{"function_name": "datetime.date.weekday", "properties": ["1. The output of the `weekday()` function is always an integer between 0 and 6, inclusive.", "2. The output for any given date remains consistent across multiple calls to `weekday()` for the same date.", "3. If the input date corresponds to a Monday, the output of `weekday()` should be 0.", "4. If the input date corresponds to a Sunday, the output of `weekday()` should be 6.", "5. The output of `weekday()` should exhibit a cyclic pattern, where consecutive days differ by 1, and the transition from Sunday (6) to Monday (0) wraps around."], "pbt": ["@given(st.dates(min_value=datetime.date(1, 1, 1), max_value=datetime.date(9999, 12, 31)))\ndef test_output_range_property(date):\n    result = date.weekday()\n    assert 0 <= result <= 6", "@given(st.dates(min_value=datetime.date(1, 1, 1), max_value=datetime.date(9999, 12, 31)))\ndef test_consistency_property(date):\n    result1 = date.weekday()\n    result2 = date.weekday()\n    assert result1 == result2", "@given(st.dates(min_value=datetime.date(1, 1, 1), max_value=datetime.date(9999, 12, 31)))\ndef test_monday_property(date):\n    if date.weekday() == 0:  # If it's Monday\n        assert date.weekday() == 0", "@given(st.dates(min_value=datetime.date(1, 1, 1), max_value=datetime.date(9999, 12, 31)))\ndef test_sunday_property(date):\n    if date.weekday() == 6:  # If it's Sunday\n        assert date.weekday() == 6", "@given(st.dates(min_value=datetime.date(1, 1, 1), max_value=datetime.date(9999, 12, 31)))\ndef test_cyclic_pattern_property(date):\n    next_day = date + datetime.timedelta(days=1)\n    assert (date.weekday() + 1) % 7 == next_day.weekday()"], "api_doc": "date.weekday()\nReturn the day of the week as an integer, where Monday is 0 and Sunday is 6. For example, date(2002, 12, 4).weekday() == 2, a Wednesday. See also isoweekday().", "api_code": "def weekday(self):\n    return (self.toordinal() + 6) % 7"}
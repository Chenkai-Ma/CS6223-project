{"function_name": "decimal.Decimal.as_integer_ratio", "properties": ["1. The output pair (n, d) should represent the Decimal instance as a fraction in lowest terms, meaning that the greatest common divisor (GCD) of n and d must be 1.", "2. The denominator d in the output pair (n, d) must always be a positive integer.", "3. If the Decimal instance is a finite number, the output pair (n, d) should accurately represent the value of the Decimal instance when evaluated as a float (i.e., n / d should equal the Decimal value).", "4. The function should raise an OverflowError if the Decimal instance represents positive or negative infinity.", "5. The function should raise a ValueError if the Decimal instance is NaN (not a number)."], "pbt": ["@given(st.decimals(allow_nan=False, allow_infinity=False))\ndef test_decimal_as_integer_ratio_lowest_terms_property(decimal_value):\n    n, d = decimal_value.as_integer_ratio()\n    assert math.gcd(n, d) == 1", "@given(st.decimals(allow_nan=False, allow_infinity=False))\ndef test_decimal_as_integer_ratio_positive_denominator_property(decimal_value):\n    n, d = decimal_value.as_integer_ratio()\n    assert d > 0", "@given(st.decimals(allow_nan=False, allow_infinity=False))\ndef test_decimal_as_integer_ratio_equivalence_property(decimal_value):\n    n, d = decimal_value.as_integer_ratio()\n    assert Decimal(n) / Decimal(d) == decimal_value", "@given(st.one_of(st.decimals(allow_nan=False, allow_infinity=True), st.floats(allow_nan=False, allow_infinity=True)))\ndef test_decimal_as_integer_ratio_overflow_property(decimal_value):\n    if decimal_value == Decimal('Infinity') or decimal_value == Decimal('-Infinity'):\n        try:\n            decimal_value.as_integer_ratio()\n            assert False, \"Expected OverflowError for infinity\"\n        except OverflowError:\n            pass", "@given(st.decimals(allow_nan=True, allow_infinity=False))\ndef test_decimal_as_integer_ratio_nan_property(decimal_value):\n    if decimal_value.is_nan():\n        try:\n            decimal_value.as_integer_ratio()\n            assert False, \"Expected ValueError for NaN\"\n        except ValueError:\n            pass"], "api_doc": "as_integer_ratio()\nReturn a pair (n, d) of integers that represent the given Decimal instance as a fraction, in lowest terms and with a positive denominator:\n\n>>>\nDecimal('-3.14').as_integer_ratio()\n(-157, 50)\nThe conversion is exact. Raise OverflowError on infinities and ValueError on NaNs.\n\nAdded in version 3.6.", "api_code": "def as_integer_ratio(self):\n    return (self._numerator, self._denominator)"}
{"function_name": "datetime.date.isocalendar", "properties": ["1. The output year must be equal to the input year or the input year \u00b1 1, depending on the ISO week calculation rules.", "2. The output week must be in the range of 1 to 53, inclusive, as the ISO calendar can have up to 53 weeks in a year.", "3. The output weekday must be in the range of 1 to 7, representing Monday through Sunday, inclusive.", "5. The output should maintain consistency such that if the same date is input multiple times, the output remains the same across those invocations."], "pbt": ["@given(st.integers(min_value=1, max_value=9999), st.integers(min_value=1, max_value=12), st.integers(min_value=1, max_value=31))\ndef test_output_year_property(year, month, day):\n    try:\n        iso_year, _, _ = date(year, month, day).isocalendar()\n        assert iso_year in {year, year - 1, year + 1}\n    except ValueError:\n        pass  # Ignore invalid dates", "@given(st.integers(min_value=1, max_value=9999), st.integers(min_value=1, max_value=12), st.integers(min_value=1, max_value=31))\ndef test_output_week_property(year, month, day):\n    try:\n        _, iso_week, _ = date(year, month, day).isocalendar()\n        assert 1 <= iso_week <= 53\n    except ValueError:\n        pass  # Ignore invalid dates", "@given(st.integers(min_value=1, max_value=9999), st.integers(min_value=1, max_value=12), st.integers(min_value=1, max_value=31))\ndef test_output_weekday_property(year, month, day):\n    try:\n        _, _, iso_weekday = date(year, month, day).isocalendar()\n        assert 1 <= iso_weekday <= 7\n    except ValueError:\n        pass  # Ignore invalid dates", "@given(st.integers(min_value=1, max_value=9999), st.integers(min_value=1, max_value=12), st.integers(min_value=1, max_value=31))\ndef test_consistent_output_property(year, month, day):\n    try:\n        iso_calendar_output = date(year, month, day).isocalendar()\n        assert iso_calendar_output == date(year, month, day).isocalendar()  # Should be consistent\n    except ValueError:\n        pass  # Ignore invalid dates"], "api_doc": "date.isocalendar()\nReturn a named tuple object with three components: year, week and weekday.\n\nThe ISO calendar is a widely used variant of the Gregorian calendar. [3]\n\nThe ISO year consists of 52 or 53 full weeks, and where a week starts on a Monday and ends on a Sunday. The first week of an ISO year is the first (Gregorian) calendar week of a year containing a Thursday. This is called week number 1, and the ISO year of that Thursday is the same as its Gregorian year.\n\nFor example, 2004 begins on a Thursday, so the first week of ISO year 2004 begins on Monday, 29 Dec 2003 and ends on Sunday, 4 Jan 2004:\n\n>>>\nfrom datetime import date\ndate(2003, 12, 29).isocalendar()\ndatetime.IsoCalendarDate(year=2004, week=1, weekday=1)\ndate(2004, 1, 4).isocalendar()\ndatetime.IsoCalendarDate(year=2004, week=1, weekday=7)\nChanged in version 3.9: Result changed from a tuple to a named tuple.", "api_code": "def isocalendar(self):\n    year = self._year\n    week1monday = _isoweek1monday(year)\n    today = _ymd2ord(self._year, self._month, self._day)\n    # Internally, week and day have origin 0\n    week, day = divmod(today - week1monday, 7)\n    if week < 0:\n        year -= 1\n        week1monday = _isoweek1monday(year)\n        week, day = divmod(today - week1monday, 7)\n    elif week >= 52:\n        if today >= _isoweek1monday(year+1):\n            year += 1\n            week = 0\n    return _IsoCalendarDate(year, week+1, day+1)"}
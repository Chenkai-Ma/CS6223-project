{"function_name": "statistics.median", "properties": ["1. The output is the middle value of the sorted input data when the number of elements is odd.", "2. The output is the average of the two middle values of the sorted input data when the number of elements is even.", "3. The function raises a StatisticsError when the input data is empty."], "pbt": ["@given(st.lists(st.integers(), min_size=1))\ndef test_median_returns_middle_value_for_odd_length_property(data):\n    sorted_data = sorted(data)\n    n = len(sorted_data)\n    if n % 2 == 1:\n        expected = sorted_data[n // 2]\n        assert statistics.median(data) == expected", "@given(st.lists(st.integers(), min_size=2))\ndef test_median_returns_average_of_middle_values_for_even_length_property(data):\n    sorted_data = sorted(data)\n    n = len(sorted_data)\n    if n % 2 == 0:\n        i = n // 2\n        expected = (sorted_data[i - 1] + sorted_data[i]) / 2\n        assert statistics.median(data) == expected", "@given(st.lists(st.integers(), min_size=0))\ndef test_median_raises_statistics_error_for_empty_data_property(data):\n    if len(data) == 0:\n        try:\n            statistics.median(data)\n            assert False  # Should not reach this line\n        except statistics.StatisticsError:\n            assert True  # Expected error raised"], "api_doc": "statistics.median(data)\nReturn the median (middle value) of numeric data, using the common \u201cmean of middle two\u201d method. If data is empty, StatisticsError is raised. data can be a sequence or iterable.\n\nThe median is a robust measure of central location and is less affected by the presence of outliers. When the number of data points is odd, the middle data point is returned:\n\n>>>\nmedian([1, 3, 5])\n3\nWhen the number of data points is even, the median is interpolated by taking the average of the two middle values:\n\n>>>\nmedian([1, 3, 5, 7])\n4.0\nThis is suited for when your data is discrete, and you don\u2019t mind that the median may not be an actual data point.\n\nIf the data is ordinal (supports order operations) but not numeric (doesn\u2019t support addition), consider using median_low() or median_high() instead.", "api_code": "def median(data):\n    data = sorted(data)\n    n = len(data)\n    if n == 0:\n        raise StatisticsError(\"no median for empty data\")\n    if n % 2 == 1:\n        return data[n // 2]\n    else:\n        i = n // 2\n        return (data[i - 1] + data[i]) / 2"}
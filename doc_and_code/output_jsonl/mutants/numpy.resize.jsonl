{"function_name": "numpy.resize", "mutants": ["```python\n# property to violate: The output array's total number of elements must match the product of the dimensions specified in `new_shape`.\nfrom hypothesis import given, strategies as st\nimport numpy as np\n\n@given(st.lists(st.integers()), st.tuples(st.integers(min_value=1)))\ndef test_violation_of_numpy_resize_1(a, new_shape):\n    resized_array = np.resize(a, new_shape)\n    resized_array = np.concatenate((resized_array, [0]))  # Add an extra element\n    assert resized_array.size == np.prod(new_shape)\n\n@given(st.lists(st.integers()), st.tuples(st.integers(min_value=1)))\ndef test_violation_of_numpy_resize_2(a, new_shape):\n    resized_array = np.resize(a, new_shape)\n    resized_array = resized_array[:-1]  # Remove the last element\n    assert resized_array.size == np.prod(new_shape)\n\n@given(st.lists(st.integers()), st.tuples(st.integers(min_value=1)))\ndef test_violation_of_numpy_resize_3(a, new_shape):\n    resized_array = np.resize(a, new_shape)\n    resized_array = np.append(resized_array, [1, 2])  # Append extra elements\n    assert resized_array.size == np.prod(new_shape)\n\n@given(st.lists(st.integers()), st.tuples(st.integers(min_value=1)))\ndef test_violation_of_numpy_resize_4(a, new_shape):\n    resized_array = np.resize(a, new_shape)\n    resized_array = resized_array[:np.prod(new_shape) - 1]  # Truncate the array\n    assert resized_array.size == np.prod(new_shape)\n\n@given(st.lists(st.integers()), st.tuples(st.integers(min_value=1)))\ndef test_violation_of_numpy_resize_5(a, new_shape):\n    resized_array = np.resize(a, new_shape)\n    resized_array = np.tile(resized_array, 2)[:np.prod(new_shape) + 1]  # Double and truncate\n    assert resized_array.size == np.prod(new_shape)\n```"], "property": "The output array's total number of elements must match the product of the dimensions specified in `new_shape`.", "pbt": "@given(st.lists(st.integers()), st.tuples(st.integers(min_value=1)))\ndef test_output_shape_property(a, new_shape):\n    resized_array = np.resize(a, new_shape)\n    assert resized_array.size == np.prod(new_shape)", "properties": ["1. The output array's total number of elements must match the product of the dimensions specified in `new_shape`."]}

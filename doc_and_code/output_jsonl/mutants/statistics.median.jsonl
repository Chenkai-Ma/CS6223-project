{"function_name": "statistics.median", "mutants": ["```python\n# property to violate: The output is the middle value of the sorted input data when the number of elements is odd.\nfrom hypothesis import given, strategies as st\nimport statistics\n\n@given(st.lists(st.integers(), min_size=1))\ndef test_violation_of_statistics_median_1(data):\n    sorted_data = sorted(data)\n    n = len(sorted_data)\n    if n % 2 == 1:\n        expected = sorted_data[n // 2]\n        # Violate the property by returning an incorrect index\n        assert statistics.median(data) == sorted_data[n // 2 + 1]  # Incorrect index\n\n@given(st.lists(st.integers(), min_size=1))\ndef test_violation_of_statistics_median_2(data):\n    sorted_data = sorted(data)\n    n = len(sorted_data)\n    if n % 2 == 1:\n        expected = sorted_data[n // 2]\n        # Violate the property by returning a value not in the list\n        assert statistics.median(data) == expected + 1  # Incorrect value\n\n@given(st.lists(st.integers(), min_size=1))\ndef test_violation_of_statistics_median_3(data):\n    sorted_data = sorted(data)\n    n = len(sorted_data)\n    if n % 2 == 1:\n        expected = sorted_data[n // 2]\n        # Violate the property by returning the first element instead\n        assert statistics.median(data) == sorted_data[0]  # Incorrect value\n\n@given(st.lists(st.integers(), min_size=1))\ndef test_violation_of_statistics_median_4(data):\n    sorted_data = sorted(data)\n    n = len(sorted_data)\n    if n % 2 == 1:\n        expected = sorted_data[n // 2]\n        # Violate the property by returning None\n        assert statistics.median(data) is None  # Incorrect value\n\n@given(st.lists(st.integers(), min_size=1))\ndef test_violation_of_statistics_median_5(data):\n    sorted_data = sorted(data)\n    n = len(sorted_data)\n    if n % 2 == 1:\n        expected = sorted_data[n // 2]\n        # Violate the property by returning a negative value\n        assert statistics.median(data) == -1  # Incorrect value\n```"], "property": "The output is the middle value of the sorted input data when the number of elements is odd.", "pbt": "@given(st.lists(st.integers(), min_size=1))\ndef test_median_returns_middle_value_for_odd_length_property(data):\n    sorted_data = sorted(data)\n    n = len(sorted_data)\n    if n % 2 == 1:\n        expected = sorted_data[n // 2]\n        assert statistics.median(data) == expected", "properties": ["1. The output is the middle value of the sorted input data when the number of elements is odd.", "2. The output is the average of the two middle values of the sorted input data when the number of elements is even.", "3. The function raises a StatisticsError when the input data is empty."]}
{"function_name": "statistics.median", "mutants": ["```python\n# property to violate: The output is the average of the two middle values of the sorted input data when the number of elements is even.\nfrom hypothesis import given, strategies as st\nimport statistics\n\n@given(st.lists(st.integers(), min_size=2))\ndef test_violation_of_statistics_median_1(data):\n    sorted_data = sorted(data)\n    n = len(sorted_data)\n    if n % 2 == 0:\n        i = n // 2\n        expected = (sorted_data[i - 1] + sorted_data[i]) / 2\n        # Violate the property by returning the sum of the two middle values instead of their average\n        assert statistics.median(data) == (sorted_data[i - 1] + sorted_data[i])\n\n@given(st.lists(st.integers(), min_size=2))\ndef test_violation_of_statistics_median_2(data):\n    sorted_data = sorted(data)\n    n = len(sorted_data)\n    if n % 2 == 0:\n        i = n // 2\n        expected = (sorted_data[i - 1] + sorted_data[i]) / 2\n        # Violate the property by returning the first middle value instead of the average\n        assert statistics.median(data) == sorted_data[i - 1]\n\n@given(st.lists(st.integers(), min_size=2))\ndef test_violation_of_statistics_median_3(data):\n    sorted_data = sorted(data)\n    n = len(sorted_data)\n    if n % 2 == 0:\n        i = n // 2\n        expected = (sorted_data[i - 1] + sorted_data[i]) / 2\n        # Violate the property by returning the second middle value instead of the average\n        assert statistics.median(data) == sorted_data[i]\n\n@given(st.lists(st.integers(), min_size=2))\ndef test_violation_of_statistics_median_4(data):\n    sorted_data = sorted(data)\n    n = len(sorted_data)\n    if n % 2 == 0:\n        i = n // 2\n        expected = (sorted_data[i - 1] + sorted_data[i]) / 2\n        # Violate the property by returning a fixed number instead of the average\n        assert statistics.median(data) == 0  # Arbitrary fixed number\n\n@given(st.lists(st.integers(), min_size=2))\ndef test_violation_of_statistics_median_5(data):\n    sorted_data = sorted(data)\n    n = len(sorted_data)\n    if n % 2 == 0:\n        i = n // 2\n        expected = (sorted_data[i - 1] + sorted_data[i]) / 2\n        # Violate the property by returning the average of the entire list instead of the middle values' average\n        assert statistics.median(data) == sum(sorted_data) / n\n```"], "property": "The output is the average of the two middle values of the sorted input data when the number of elements is even.", "pbt": "@given(st.lists(st.integers(), min_size=2))\ndef test_median_returns_average_of_middle_values_for_even_length_property(data):\n    sorted_data = sorted(data)\n    n = len(sorted_data)\n    if n % 2 == 0:\n        i = n // 2\n        expected = (sorted_data[i - 1] + sorted_data[i]) / 2\n        assert statistics.median(data) == expected", "properties": ["1. The output is the middle value of the sorted input data when the number of elements is odd.", "2. The output is the average of the two middle values of the sorted input data when the number of elements is even.", "3. The function raises a StatisticsError when the input data is empty."]}
{"function_name": "statistics.median", "mutants": ["```python\n# property to violate: The function raises a StatisticsError when the input data is empty.\nfrom hypothesis import given, strategies as st\nimport statistics\n\n@given(st.lists(st.integers(), min_size=0))\ndef test_violation_of_statistics_median_1(data):\n    if len(data) == 0:\n        # Modify output to not raise an error\n        return \"No data\"  # Should not reach this line\n    else:\n        statistics.median(data)\n\n@given(st.lists(st.integers(), min_size=0))\ndef test_violation_of_statistics_median_2(data):\n    if len(data) == 0:\n        # Modify output to not raise an error\n        return None  # Should not reach this line\n    else:\n        statistics.median(data)\n\n@given(st.lists(st.integers(), min_size=0))\ndef test_violation_of_statistics_median_3(data):\n    if len(data) == 0:\n        # Modify output to not raise an error\n        return 0  # Should not reach this line\n    else:\n        statistics.median(data)\n\n@given(st.lists(st.integers(), min_size=0))\ndef test_violation_of_statistics_median_4(data):\n    if len(data) == 0:\n        # Modify output to not raise an error\n        return \"Median is undefined\"  # Should not reach this line\n    else:\n        statistics.median(data)\n\n@given(st.lists(st.integers(), min_size=0))\ndef test_violation_of_statistics_median_5(data):\n    if len(data) == 0:\n        # Modify output to not raise an error\n        return False  # Should not reach this line\n    else:\n        statistics.median(data)\n```"], "property": "The function raises a StatisticsError when the input data is empty.", "pbt": "@given(st.lists(st.integers(), min_size=0))\ndef test_median_raises_statistics_error_for_empty_data_property(data):\n    if len(data) == 0:\n        try:\n            statistics.median(data)\n            assert False  # Should not reach this line\n        except statistics.StatisticsError:\n            assert True  # Expected error raised", "properties": ["1. The output is the middle value of the sorted input data when the number of elements is odd.", "2. The output is the average of the two middle values of the sorted input data when the number of elements is even.", "3. The function raises a StatisticsError when the input data is empty."]}

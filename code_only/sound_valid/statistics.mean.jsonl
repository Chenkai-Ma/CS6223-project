{"function_name": "statistics.mean", "properties": ["1. The mean of a list containing identical elements should equal the value of those elements.", "2. The mean of an empty list should raise a StatisticsError.", "3. The mean of a list with negative and positive numbers should be within the range of the minimum and maximum values of the list.", "5. The mean of a concatenated list (combining two lists) should equal the weighted average of the means of the individual lists, weighted by their sizes."], "pbt": ["@given(st.lists(st.floats(), min_size=1))\ndef test_mean_identical_elements_property(data):\n    if len(data) > 0:\n        identical_value = data[0]\n        mean_value = statistics.mean([identical_value] * len(data))\n        assert mean_value == identical_value", "@given(st.lists(st.floats(), max_size=100))\ndef test_mean_empty_list_property(data):\n    if len(data) == 0:\n        try:\n            statistics.mean(data)\n            assert False, \"Expected StatisticsError for empty list\"\n        except statistics.StatisticsError:\n            pass  # Expected exception", "@given(st.lists(st.floats(), min_size=1))\ndef test_mean_range_property(data):\n    mean_value = statistics.mean(data)\n    assert mean_value >= min(data) and mean_value <= max(data)", "@given(st.lists(st.floats(allow_nan=False, allow_infinity=False)), st.lists(st.floats(allow_nan=False, allow_infinity=False)))\ndef test_mean_concat_weighted_average_property(list1, list2):\n    if list1 and list2:\n        mean1 = mean(list1)\n        mean2 = mean(list2)\n        combined_list = list1 + list2\n        calculated_mean = mean(combined_list)\n        weighted_mean = (mean1 * len(list1) + mean2 * len(list2)) / (len(list1) + len(list2))\n        assert calculated_mean == weighted_mean"], "api_doc": "statistics.mean(data)\nReturn the sample arithmetic mean of data which can be a sequence or iterable.\n\nThe arithmetic mean is the sum of the data divided by the number of data points. It is commonly called \u201cthe average\u201d, although it is only one of many different mathematical averages. It is a measure of the central location of the data.\n\nIf data is empty, StatisticsError will be raised.\n\nSome examples of use:\n\n>>>\nmean([1, 2, 3, 4, 4])\n2.8\nmean([-1.0, 2.5, 3.25, 5.75])\n2.625\n\nfrom fractions import Fraction as F\nmean([F(3, 7), F(1, 21), F(5, 3), F(1, 3)])\nFraction(13, 21)\n\nfrom decimal import Decimal as D\nmean([D(\"0.5\"), D(\"0.75\"), D(\"0.625\"), D(\"0.375\")])\nDecimal('0.5625')\nNote The mean is strongly affected by outliers and is not necessarily a typical example of the data points. For a more robust, although less efficient, measure of central tendency, see median().\nThe sample mean gives an unbiased estimate of the true population mean, so that when taken on average over all the possible samples, mean(sample) converges on the true mean of the entire population. If data represents the entire population rather than a sample, then mean(data) is equivalent to calculating the true population mean \u03bc."}

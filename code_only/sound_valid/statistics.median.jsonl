{"function_name": "statistics.median", "properties": ["1. The median of an empty list raises a StatisticsError, indicating that there is no median for the provided data.", "2. The median of a single-element list is equal to that element itself.", "3. The median of a list with an odd number of elements is the middle element of the sorted list.", "4. The median of a list with an even number of elements is the average of the two middle elements of the sorted list.", "5. The median is invariant under the order of the input data; that is, sorting the data before finding the median should yield the same result as finding the median directly from the unsorted data."], "pbt": ["@given(st.lists(st.integers(), min_size=0))\ndef test_empty_list_raises_statistics_error(data):\n    if len(data) == 0:\n        try:\n            median(data)\n            assert False, \"Expected StatisticsError for empty data\"\n        except StatisticsError:\n            pass", "@given(st.integers())\ndef test_single_element_list_equals_element(x):\n    assert median([x]) == x", "@given(st.lists(st.integers(), min_size=1))\ndef test_odd_length_list_returns_middle_element(data):\n    sorted_data = sorted(data)\n    if len(sorted_data) % 2 == 1:\n        assert median(sorted_data) == sorted_data[len(sorted_data) // 2]", "@given(st.lists(st.integers(), min_size=2))\ndef test_even_length_list_returns_average_of_middle_elements(data):\n    sorted_data = sorted(data)\n    if len(sorted_data) % 2 == 0:\n        mid_index = len(sorted_data) // 2\n        expected_median = (sorted_data[mid_index - 1] + sorted_data[mid_index]) / 2\n        assert median(sorted_data) == expected_median", "@given(st.lists(st.integers(), min_size=1))\ndef test_median_invariant_under_order(data):\n    sorted_data = sorted(data)\n    assert median(data) == median(sorted_data)"], "api_doc": "statistics.median(data)\nReturn the median (middle value) of numeric data, using the common \u201cmean of middle two\u201d method. If data is empty, StatisticsError is raised. data can be a sequence or iterable.\n\nThe median is a robust measure of central location and is less affected by the presence of outliers. When the number of data points is odd, the middle data point is returned:\n\n>>>\nmedian([1, 3, 5])\n3\nWhen the number of data points is even, the median is interpolated by taking the average of the two middle values:\n\n>>>\nmedian([1, 3, 5, 7])\n4.0\nThis is suited for when your data is discrete, and you don\u2019t mind that the median may not be an actual data point.\n\nIf the data is ordinal (supports order operations) but not numeric (doesn\u2019t support addition), consider using median_low() or median_high() instead."}

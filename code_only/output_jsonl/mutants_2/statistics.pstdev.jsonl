{"function_name": "statistics.pstdev", "mutants": ["```python\n# property to violate: The output of `pstdev` should always be non-negative, as standard deviation cannot be negative.\nfrom hypothesis import given, strategies as st\nimport statistics\n\n@given(st.lists(st.floats(allow_nan=False, allow_infinity=False), min_size=1))\ndef test_violation_of_statistics_pstdev_1(data):\n    result = statistics.pstdev(data)\n    result = -abs(result)  # Force the result to be negative\n    assert result >= 0\n\n@given(st.lists(st.floats(allow_nan=False, allow_infinity=False), min_size=1))\ndef test_violation_of_statistics_pstdev_2(data):\n    result = statistics.pstdev(data)\n    result = result - (result + 1)  # Shift the result to be negative\n    assert result >= 0\n\n@given(st.lists(st.floats(allow_nan=False, allow_infinity=False), min_size=1))\ndef test_violation_of_statistics_pstdev_3(data):\n    result = statistics.pstdev(data)\n    result = -result + 1  # Make the result positive but then negate it\n    assert result >= 0\n\n@given(st.lists(st.floats(allow_nan=False, allow_infinity=False), min_size=1))\ndef test_violation_of_statistics_pstdev_4(data):\n    result = statistics.pstdev(data)\n    result = -(result / 2)  # Halve the result and negate it\n    assert result >= 0\n\n@given(st.lists(st.floats(allow_nan=False, allow_infinity=False), min_size=1))\ndef test_violation_of_statistics_pstdev_5(data):\n    result = statistics.pstdev(data)\n    result = -result - 100  # Force the result to be a large negative number\n    assert result >= 0\n```"], "property": "The output of `pstdev` should always be non-negative, as standard deviation cannot be negative.", "pbt": "@given(st.lists(st.floats(allow_nan=False, allow_infinity=False), min_size=1))\ndef test_statistics_pstdev_non_negative_property(data):\n    result = pstdev(data)\n    assert result >= 0", "properties": ["1. The output of `pstdev` should always be non-negative, as standard deviation cannot be negative.", "2. If the input data set is empty, `pstdev` should raise a `StatisticsError`, indicating that at least one data point is required.", "3. If the input data contains only one data point, the output of `pstdev` should be zero, since there is no variation in a single value.", "4. The output of `pstdev` should be consistent with the output of `pstdev` when the input data is the same, regardless of the order of the data points."]}
{"function_name": "statistics.pstdev", "mutants": ["```python\n# property to violate: If the input data set is empty, `pstdev` should raise a `StatisticsError`, indicating that at least one data point is required.\nfrom hypothesis import given, strategies as st\nfrom statistics import pstdev, StatisticsError\n\n@given(st.lists(st.floats(allow_nan=False, allow_infinity=False), min_size=0))\ndef test_violation_of_statistics_pstdev_1(data):\n    if len(data) == 0:\n        # Incorrectly returning a default value instead of raising an error\n        result = pstdev(data) if len(data) > 0 else 0\n        assert result == 0, \"Expected StatisticsError for empty input\"\n\n@given(st.lists(st.floats(allow_nan=False, allow_infinity=False), min_size=0))\ndef test_violation_of_statistics_pstdev_2(data):\n    if len(data) == 0:\n        # Incorrectly returning NaN instead of raising an error\n        result = pstdev(data) if len(data) > 0 else float('nan')\n        assert result is float('nan'), \"Expected StatisticsError for empty input\"\n\n@given(st.lists(st.floats(allow_nan=False, allow_infinity=False), min_size=0))\ndef test_violation_of_statistics_pstdev_3(data):\n    if len(data) == 0:\n        # Incorrectly returning a string message instead of raising an error\n        result = pstdev(data) if len(data) > 0 else \"No data points\"\n        assert result == \"No data points\", \"Expected StatisticsError for empty input\"\n\n@given(st.lists(st.floats(allow_nan=False, allow_infinity=False), min_size=0))\ndef test_violation_of_statistics_pstdev_4(data):\n    if len(data) == 0:\n        # Incorrectly returning a list instead of raising an error\n        result = pstdev(data) if len(data) > 0 else []\n        assert result == [], \"Expected StatisticsError for empty input\"\n\n@given(st.lists(st.floats(allow_nan=False, allow_infinity=False), min_size=0))\ndef test_violation_of_statistics_pstdev_5(data):\n    if len(data) == 0:\n        # Incorrectly returning a boolean value instead of raising an error\n        result = pstdev(data) if len(data) > 0 else True\n        assert result is True, \"Expected StatisticsError for empty input\"\n```"], "property": "If the input data set is empty, `pstdev` should raise a `StatisticsError`, indicating that at least one data point is required.", "pbt": "@given(st.lists(st.floats(allow_nan=False, allow_infinity=False), min_size=0))\ndef test_statistics_pstdev_empty_input_property(data):\n    if len(data) == 0:\n        try:\n            pstdev(data)\n            assert False, \"Expected StatisticsError for empty input\"\n        except StatisticsError:\n            pass", "properties": ["1. The output of `pstdev` should always be non-negative, as standard deviation cannot be negative.", "2. If the input data set is empty, `pstdev` should raise a `StatisticsError`, indicating that at least one data point is required.", "3. If the input data contains only one data point, the output of `pstdev` should be zero, since there is no variation in a single value.", "4. The output of `pstdev` should be consistent with the output of `pstdev` when the input data is the same, regardless of the order of the data points."]}
{"function_name": "statistics.pstdev", "mutants": ["```python\n# property to violate: If the input data contains only one data point, the output of `pstdev` should be zero, since there is no variation in a single value.\nfrom hypothesis import given, strategies as st\nimport statistics\n\n@given(st.lists(st.floats(allow_nan=False, allow_infinity=False), min_size=1))\ndef test_violation_of_statistics_pstdev_1(data):\n    result = statistics.pstdev([data[0]])\n    assert result != 0  # Violation: Should be zero for a single data point\n\n@given(st.lists(st.floats(allow_nan=False, allow_infinity=False), min_size=1))\ndef test_violation_of_statistics_pstdev_2(data):\n    result = statistics.pstdev([data[0]])\n    assert result > 0  # Violation: Should be zero for a single data point\n\n@given(st.lists(st.floats(allow_nan=False, allow_infinity=False), min_size=1))\ndef test_violation_of_statistics_pstdev_3(data):\n    result = statistics.pstdev([data[0]])\n    assert result == 1  # Violation: Should be zero for a single data point\n\n@given(st.lists(st.floats(allow_nan=False, allow_infinity=False), min_size=1))\ndef test_violation_of_statistics_pstdev_4(data):\n    result = statistics.pstdev([data[0]])\n    assert result == -1  # Violation: Should be zero for a single data point\n\n@given(st.lists(st.floats(allow_nan=False, allow_infinity=False), min_size=1))\ndef test_violation_of_statistics_pstdev_5(data):\n    result = statistics.pstdev([data[0]])\n    assert result > 10  # Violation: Should be zero for a single data point\n```"], "property": "If the input data contains only one data point, the output of `pstdev` should be zero, since there is no variation in a single value.", "pbt": "@given(st.lists(st.floats(allow_nan=False, allow_infinity=False), min_size=1))\ndef test_statistics_pstdev_single_value_property(data):\n    result = pstdev([data[0]])\n    assert result == 0", "properties": ["1. The output of `pstdev` should always be non-negative, as standard deviation cannot be negative.", "2. If the input data set is empty, `pstdev` should raise a `StatisticsError`, indicating that at least one data point is required.", "3. If the input data contains only one data point, the output of `pstdev` should be zero, since there is no variation in a single value.", "4. The output of `pstdev` should be consistent with the output of `pstdev` when the input data is the same, regardless of the order of the data points."]}
{"function_name": "statistics.pstdev", "mutants": ["```python\n# property to violate: The output of `pstdev` should be consistent with the output of `pstdev` when the input data is the same, regardless of the order of the data points.\nfrom hypothesis import given, strategies as st\nimport statistics\n\n@given(st.lists(st.floats(allow_nan=False, allow_infinity=False), min_size=1))\ndef test_violation_of_statistics_pstdev_1(data):\n    result1 = statistics.pstdev(data)\n    result2 = statistics.pstdev(data[::-1]) + 1  # Adding 1 to the result to violate the property\n    assert result1 == result2\n\n@given(st.lists(st.floats(allow_nan=False, allow_infinity=False), min_size=1))\ndef test_violation_of_statistics_pstdev_2(data):\n    result1 = statistics.pstdev(data)\n    result2 = statistics.pstdev(data[::-1]) * 2  # Doubling the result to violate the property\n    assert result1 == result2\n\n@given(st.lists(st.floats(allow_nan=False, allow_infinity=False), min_size=1))\ndef test_violation_of_statistics_pstdev_3(data):\n    result1 = statistics.pstdev(data)\n    result2 = statistics.pstdev(data[::-1]) - 5  # Subtracting 5 from the result to violate the property\n    assert result1 == result2\n\n@given(st.lists(st.floats(allow_nan=False, allow_infinity=False), min_size=1))\ndef test_violation_of_statistics_pstdev_4(data):\n    result1 = statistics.pstdev(data)\n    result2 = statistics.pstdev(data[::-1]) ** 2  # Squaring the result to violate the property\n    assert result1 == result2\n\n@given(st.lists(st.floats(allow_nan=False, allow_infinity=False), min_size=1))\ndef test_violation_of_statistics_pstdev_5(data):\n    result1 = statistics.pstdev(data)\n    result2 = -statistics.pstdev(data[::-1])  # Negating the result to violate the property\n    assert result1 == result2\n```"], "property": "The output of `pstdev` should be consistent with the output of `pstdev` when the input data is the same, regardless of the order of the data points.", "pbt": "@given(st.lists(st.floats(allow_nan=False, allow_infinity=False), min_size=1))\ndef test_statistics_pstdev_order_invariance_property(data):\n    result1 = pstdev(data)\n    result2 = pstdev(data[::-1])\n    assert result1 == result2", "properties": ["1. The output of `pstdev` should always be non-negative, as standard deviation cannot be negative.", "2. If the input data set is empty, `pstdev` should raise a `StatisticsError`, indicating that at least one data point is required.", "3. If the input data contains only one data point, the output of `pstdev` should be zero, since there is no variation in a single value.", "4. The output of `pstdev` should be consistent with the output of `pstdev` when the input data is the same, regardless of the order of the data points."]}

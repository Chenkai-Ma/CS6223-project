{"function_name": "statistics.correlation", "mutants": ["```python\n# property to violate: The correlation coefficient should always be between -1 and 1, inclusive, regardless of the input values provided.\nfrom hypothesis import given, strategies as st\nimport statistics\n\n@given(st.lists(st.floats()), st.lists(st.floats()))\ndef test_violation_of_statistics_correlation_1(x, y):\n    if len(x) == len(y) and len(x) >= 2:\n        result = statistics.correlation(x, y) + 2  # Shift result to violate the range\n        assert -1 <= result <= 1\n\n@given(st.lists(st.floats()), st.lists(st.floats()))\ndef test_violation_of_statistics_correlation_2(x, y):\n    if len(x) == len(y) and len(x) >= 2:\n        result = statistics.correlation(x, y) * 2  # Scale result to violate the range\n        assert -1 <= result <= 1\n\n@given(st.lists(st.floats()), st.lists(st.floats()))\ndef test_violation_of_statistics_correlation_3(x, y):\n    if len(x) == len(y) and len(x) >= 2:\n        result = statistics.correlation(x, y) - 3  # Shift result down to violate the range\n        assert -1 <= result <= 1\n\n@given(st.lists(st.floats()), st.lists(st.floats()))\ndef test_violation_of_statistics_correlation_4(x, y):\n    if len(x) == len(y) and len(x) >= 2:\n        result = statistics.correlation(x, y) + 5  # Add a large value to violate the range\n        assert -1 <= result <= 1\n\n@given(st.lists(st.floats()), st.lists(st.floats()))\ndef test_violation_of_statistics_correlation_5(x, y):\n    if len(x) == len(y) and len(x) >= 2:\n        result = statistics.correlation(x, y) * -2  # Negate and scale result to violate the range\n        assert -1 <= result <= 1\n```"], "property": "The correlation coefficient should always be between -1 and 1, inclusive, regardless of the input values provided.", "pbt": "@given(st.lists(st.floats()), st.lists(st.floats()))\ndef test_correlation_output_range_property(x, y):\n    if len(x) == len(y) and len(x) >= 2:\n        result = statistics.correlation(x, y)\n        assert -1 <= result <= 1", "properties": ["1. The correlation coefficient should always be between -1 and 1, inclusive, regardless of the input values provided.", "3. If one of the input lists is constant (all elements are the same), the function should raise a `StatisticsError` indicating that at least one of the inputs is constant."]}
{"function_name": "statistics.correlation", "mutants": ["```python\n# property to violate: If one of the input lists is constant (all elements are the same), the function should raise a `StatisticsError` indicating that at least one of the inputs is constant.\nfrom hypothesis import given, strategies as st\nimport statistics\n\n@given(st.lists(st.floats(), min_size=2))\ndef test_violation_of_statistics_correlation_1(x):\n    constant_list = [x[0]] * len(x)\n    # Modify the input to include a constant list but change the first element\n    statistics.correlation(x, constant_list + [x[0] + 1])  # This should not raise an error\n    assert False  # Should not reach this line\n\n@given(st.lists(st.floats(), min_size=2))\ndef test_violation_of_statistics_correlation_2(x):\n    constant_list = [x[0]] * len(x)\n    # Change the constant list to include a different value\n    statistics.correlation(x, [x[0]] * (len(x) - 1) + [x[0] + 1])  # This should not raise an error\n    assert False  # Should not reach this line\n\n@given(st.lists(st.floats(), min_size=2))\ndef test_violation_of_statistics_correlation_3(x):\n    constant_list = [x[0]] * len(x)\n    # Use a constant list but add a random float to the end\n    statistics.correlation(x, constant_list + [x[1]])  # This should not raise an error\n    assert False  # Should not reach this line\n\n@given(st.lists(st.floats(), min_size=2))\ndef test_violation_of_statistics_correlation_4(x):\n    constant_list = [x[0]] * len(x)\n    # Change the constant list to be a mix of constant and non-constant\n    statistics.correlation(x, constant_list[:-1] + [x[1]])  # This should not raise an error\n    assert False  # Should not reach this line\n\n@given(st.lists(st.floats(), min_size=2))\ndef test_violation_of_statistics_correlation_5(x):\n    constant_list = [x[0]] * len(x)\n    # Alter the constant list to include one element that is different\n    statistics.correlation(x, constant_list[:-1] + [x[0] + 2])  # This should not raise an error\n    assert False  # Should not reach this line\n```"], "property": "If one of the input lists is constant (all elements are the same), the function should raise a `StatisticsError` indicating that at least one of the inputs is constant.", "pbt": "@given(st.lists(st.floats(), min_size=2))\ndef test_correlation_constant_input_property(x):\n    constant_list = [x[0]] * len(x)\n    try:\n        statistics.correlation(x, constant_list)\n        assert False  # Should not reach this line\n    except StatisticsError:\n        pass", "properties": ["1. The correlation coefficient should always be between -1 and 1, inclusive, regardless of the input values provided.", "3. If one of the input lists is constant (all elements are the same), the function should raise a `StatisticsError` indicating that at least one of the inputs is constant."]}

{"function_name": "decimal.Decimal.exp", "mutants": ["```python\n# property to violate: The exponential of NaN should always return NaN.\nfrom hypothesis import given, strategies as st\nfrom decimal import Decimal\n\n@given(st.floats(allow_nan=True, allow_infinity=True))\ndef test_violation_of_decimal_Decimal_exp_1(x):\n    d = Decimal(x)\n    if d.is_nan():\n        assert d.exp() == 0  # exp(NaN) should return NaN\n\n@given(st.floats(allow_nan=True, allow_infinity=True))\ndef test_violation_of_decimal_Decimal_exp_2(x):\n    d = Decimal(x)\n    if d.is_nan():\n        assert d.exp() == 1  # exp(NaN) should return NaN\n\n@given(st.floats(allow_nan=True, allow_infinity=True))\ndef test_violation_of_decimal_Decimal_exp_3(x):\n    d = Decimal(x)\n    if d.is_nan():\n        assert d.exp() == Decimal('Infinity')  # exp(NaN) should return NaN\n\n@given(st.floats(allow_nan=True, allow_infinity=True))\ndef test_violation_of_decimal_Decimal_exp_4(x):\n    d = Decimal(x)\n    if d.is_nan():\n        assert d.exp() == -1  # exp(NaN) should return NaN\n\n@given(st.floats(allow_nan=True, allow_infinity=True))\ndef test_violation_of_decimal_Decimal_exp_5(x):\n    d = Decimal(x)\n    if d.is_nan():\n        assert d.exp() == Decimal('NaN')  # exp(NaN) should return NaN, but this is incorrect\n```"], "property": "The exponential of NaN should always return NaN.", "pbt": "@given(st.floats(allow_nan=True, allow_infinity=True))\ndef test_decimal_Decimal_exp_nan_property(x):\n    d = Decimal(x)\n    if d.is_nan():\n        assert d.exp() != d.exp()  # exp(NaN) should return NaN", "properties": ["1. The exponential of NaN should always return NaN.", "2. The exponential of negative infinity should return zero.", "3. The exponential of zero should return one.", "4. The exponential of positive infinity should return positive infinity."]}
{"function_name": "decimal.Decimal.exp", "mutants": ["```python\n# property to violate: The exponential of negative infinity should return zero.\nfrom hypothesis import given, strategies as st\nfrom decimal import Decimal\n\n@given(st.floats(allow_infinity=True, min_value=float('-inf')))\ndef test_violation_of_decimal_Decimal_exp_1(x):\n    d = Decimal(x)\n    if d.is_infinite() and d < 0:\n        assert d.exp() == Decimal(1)  # Violates the property by returning 1 instead of 0\n\n@given(st.floats(allow_infinity=True, min_value=float('-inf')))\ndef test_violation_of_decimal_Decimal_exp_2(x):\n    d = Decimal(x)\n    if d.is_infinite() and d < 0:\n        assert d.exp() == Decimal(10)  # Violates the property by returning 10 instead of 0\n\n@given(st.floats(allow_infinity=True, min_value=float('-inf')))\ndef test_violation_of_decimal_Decimal_exp_3(x):\n    d = Decimal(x)\n    if d.is_infinite() and d < 0:\n        assert d.exp() == Decimal(-1)  # Violates the property by returning -1 instead of 0\n\n@given(st.floats(allow_infinity=True, min_value=float('-inf')))\ndef test_violation_of_decimal_Decimal_exp_4(x):\n    d = Decimal(x)\n    if d.is_infinite() and d < 0:\n        assert d.exp() == Decimal('NaN')  # Violates the property by returning NaN instead of 0\n\n@given(st.floats(allow_infinity=True, min_value=float('-inf')))\ndef test_violation_of_decimal_Decimal_exp_5(x):\n    d = Decimal(x)\n    if d.is_infinite() and d < 0:\n        assert d.exp() == Decimal('Infinity')  # Violates the property by returning Infinity instead of 0\n```"], "property": "The exponential of negative infinity should return zero.", "pbt": "@given(st.floats(allow_infinity=True, min_value=float('-inf')))\ndef test_decimal_Decimal_exp_negative_infinity_property(x):\n    d = Decimal(x)\n    if d.is_infinite() and d < 0:\n        assert d.exp() == Decimal(0)  # exp(-Infinity) should return 0", "properties": ["1. The exponential of NaN should always return NaN.", "2. The exponential of negative infinity should return zero.", "3. The exponential of zero should return one.", "4. The exponential of positive infinity should return positive infinity."]}
{"function_name": "decimal.Decimal.exp", "mutants": ["```python\n# property to violate: The exponential of zero should return one.\nfrom hypothesis import given, strategies as st\nfrom decimal import Decimal\n\n@given(st.floats())\ndef test_violation_of_decimal_Decimal_exp_1(x):\n    d = Decimal(x)\n    if d == 0:\n        assert d.exp() == Decimal(0)  # exp(0) should return 0 instead of 1\n\n@given(st.floats())\ndef test_violation_of_decimal_Decimal_exp_2(x):\n    d = Decimal(x)\n    if d == 0:\n        assert d.exp() == Decimal(-1)  # exp(0) should return -1 instead of 1\n\n@given(st.floats())\ndef test_violation_of_decimal_Decimal_exp_3(x):\n    d = Decimal(x)\n    if d == 0:\n        assert d.exp() == Decimal(2)  # exp(0) should return 2 instead of 1\n\n@given(st.floats())\ndef test_violation_of_decimal_Decimal_exp_4(x):\n    d = Decimal(x)\n    if d == 0:\n        assert d.exp() == Decimal(3.14)  # exp(0) should return 3.14 instead of 1\n\n@given(st.floats())\ndef test_violation_of_decimal_Decimal_exp_5(x):\n    d = Decimal(x)\n    if d == 0:\n        assert d.exp() == Decimal('inf')  # exp(0) should return infinity instead of 1\n```"], "property": "The exponential of zero should return one.", "pbt": "@given(st.floats())\ndef test_decimal_Decimal_exp_zero_property(x):\n    d = Decimal(x)\n    if d == 0:\n        assert d.exp() == Decimal(1)  # exp(0) should return 1", "properties": ["1. The exponential of NaN should always return NaN.", "2. The exponential of negative infinity should return zero.", "3. The exponential of zero should return one.", "4. The exponential of positive infinity should return positive infinity."]}
{"function_name": "decimal.Decimal.exp", "mutants": ["```python\n# property to violate: The exponential of positive infinity should return positive infinity.\nfrom hypothesis import given, strategies as st\nfrom decimal import Decimal\n\n@given(st.floats(allow_infinity=True, min_value=float('inf')))\ndef test_violation_of_decimal_Decimal_exp_1(x):\n    d = Decimal(x)\n    if d.is_infinite() and d > 0:\n        assert d.exp() == Decimal(0)  # exp(Infinity) should NOT return Infinity\n\n@given(st.floats(allow_infinity=True, min_value=float('inf')))\ndef test_violation_of_decimal_Decimal_exp_2(x):\n    d = Decimal(x)\n    if d.is_infinite() and d > 0:\n        assert d.exp() == Decimal(-1)  # exp(Infinity) should NOT return Infinity\n\n@given(st.floats(allow_infinity=True, min_value=float('inf')))\ndef test_violation_of_decimal_Decimal_exp_3(x):\n    d = Decimal(x)\n    if d.is_infinite() and d > 0:\n        assert d.exp() == Decimal('NaN')  # exp(Infinity) should NOT return Infinity\n\n@given(st.floats(allow_infinity=True, min_value=float('inf')))\ndef test_violation_of_decimal_Decimal_exp_4(x):\n    d = Decimal(x)\n    if d.is_infinite() and d > 0:\n        assert d.exp() == Decimal('inf') / Decimal('inf')  # exp(Infinity) should NOT return Infinity\n\n@given(st.floats(allow_infinity=True, min_value=float('inf')))\ndef test_violation_of_decimal_Decimal_exp_5(x):\n    d = Decimal(x)\n    if d.is_infinite() and d > 0:\n        assert d.exp() == Decimal('1')  # exp(Infinity) should NOT return Infinity\n```"], "property": "The exponential of positive infinity should return positive infinity.", "pbt": "@given(st.floats(allow_infinity=True, min_value=float('inf')))\ndef test_decimal_Decimal_exp_infinity_property(x):\n    d = Decimal(x)\n    if d.is_infinite() and d > 0:\n        assert d.exp() == d  # exp(Infinity) should return Infinity", "properties": ["1. The exponential of NaN should always return NaN.", "2. The exponential of negative infinity should return zero.", "3. The exponential of zero should return one.", "4. The exponential of positive infinity should return positive infinity."]}

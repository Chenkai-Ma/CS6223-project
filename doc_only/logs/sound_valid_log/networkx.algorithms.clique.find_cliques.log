============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0
rootdir: /home/james/projects/cs6223/our_proptest_data
plugins: hypothesis-6.112.2, timeout-2.3.1
collected 25 items

proptest/networkx.algorithms.clique.find_cliques/pbt_1.py FFFFF          [ 20%]
proptest/networkx.algorithms.clique.find_cliques/pbt_2.py .....          [ 40%]
proptest/networkx.algorithms.clique.find_cliques/pbt_3.py ...F.          [ 60%]
proptest/networkx.algorithms.clique.find_cliques/pbt_4.py ...F.          [ 80%]
proptest/networkx.algorithms.clique.find_cliques/pbt_5.py .....          [100%]

=================================== FAILURES ===================================
/home/james/projects/.venv/lib/python3.10/site-packages/hypothesis/strategies/_internal/strategies.py:319: hypothesis.errors.HypothesisException: Using example() inside a test function is a bad idea. Instead consider using hypothesis.strategies.data() to draw more examples during testing. See https://hypothesis.readthedocs.io/en/latest/data.html#drawing-interactively-in-tests for more details.
/home/james/projects/.venv/lib/python3.10/site-packages/hypothesis/strategies/_internal/strategies.py:319: hypothesis.errors.HypothesisException: Using example() inside a test function is a bad idea. Instead consider using hypothesis.strategies.data() to draw more examples during testing. See https://hypothesis.readthedocs.io/en/latest/data.html#drawing-interactively-in-tests for more details.
/home/james/projects/.venv/lib/python3.10/site-packages/hypothesis/strategies/_internal/strategies.py:319: hypothesis.errors.HypothesisException: Using example() inside a test function is a bad idea. Instead consider using hypothesis.strategies.data() to draw more examples during testing. See https://hypothesis.readthedocs.io/en/latest/data.html#drawing-interactively-in-tests for more details.
/home/james/projects/.venv/lib/python3.10/site-packages/hypothesis/strategies/_internal/strategies.py:319: hypothesis.errors.HypothesisException: Using example() inside a test function is a bad idea. Instead consider using hypothesis.strategies.data() to draw more examples during testing. See https://hypothesis.readthedocs.io/en/latest/data.html#drawing-interactively-in-tests for more details.
/home/james/projects/.venv/lib/python3.10/site-packages/hypothesis/strategies/_internal/strategies.py:319: hypothesis.errors.HypothesisException: Using example() inside a test function is a bad idea. Instead consider using hypothesis.strategies.data() to draw more examples during testing. See https://hypothesis.readthedocs.io/en/latest/data.html#drawing-interactively-in-tests for more details.
/home/james/projects/.venv/lib/python3.10/site-packages/hypothesis/internal/conjecture/utils.py:72: hypothesis.errors.InvalidArgument: Cannot sample from NodeView(()), not an ordered collection. Hypothesis goes to some length to ensure that the sampled_from strategy has stable results between runs. To replay a saved example, the sampled values must have the same iteration order on every run - ruling out sets, dicts, etc due to hash randomization. Most cases can simply use `sorted(values)`, but mixed types or special values such as math.nan require careful handling - and note that when simplifying an example, Hypothesis treats earlier values as simpler.
/home/james/projects/.venv/lib/python3.10/site-packages/hypothesis/internal/conjecture/utils.py:72: hypothesis.errors.InvalidArgument: Cannot sample from NodeView((0,)), not an ordered collection. Hypothesis goes to some length to ensure that the sampled_from strategy has stable results between runs. To replay a saved example, the sampled values must have the same iteration order on every run - ruling out sets, dicts, etc due to hash randomization. Most cases can simply use `sorted(values)`, but mixed types or special values such as math.nan require careful handling - and note that when simplifying an example, Hypothesis treats earlier values as simpler.
=============================== warnings summary ===============================
proptest/networkx.algorithms.clique.find_cliques/pbt_1.py::test_output_cliques_are_subsets_of_nodes_property
  /home/james/projects/cs6223/our_proptest_data/proptest/networkx.algorithms.clique.find_cliques/pbt_1.py:9: NonInteractiveExampleWarning: The `.example()` method is good for exploring strategies, but should only be used interactively.  We recommend using `@given` for tests - it performs better, saves and replays failures to avoid flakiness, and reports minimal examples. (strategy: sampled_from([]))
    G.add_edges_from(st.sampled_from([(u, v) for u in clique_nodes for v in clique_nodes if u != v]).example())

proptest/networkx.algorithms.clique.find_cliques/pbt_1.py::test_output_cliques_are_subsets_of_nodes_property
  /home/james/projects/cs6223/our_proptest_data/proptest/networkx.algorithms.clique.find_cliques/pbt_1.py:9: NonInteractiveExampleWarning: The `.example()` method is good for exploring strategies, but should only be used interactively.  We recommend using `@given` for tests - it performs better, saves and replays failures to avoid flakiness, and reports minimal examples. (strategy: sampled_from([(20591, -7428), (20591, 262788420), (20591, -1696315580352823543), (20591, 26887), (20591, 85), (20591, 102), (20591, -32490), (20591, 29222), (20591, -65), (20591, 20290), (20591, -1), (20591, -38), (20591, -1366288489), (20591, -5890), (20591, 75), (20591, -14288), (20591, -83), (-7428, 20591), (-7428, 262788420), (-7428, -1696315580352823543), (-7428, 26887), (-7428, 85), (-7428, 102), (-7428, -32490), (-7428, 29222), (-7428, -65), (-7428, 20290), (-7428, -1), (-7428, -38), (-7428, -1366288489), (-7428, -5890), (-7428, 75), (-7428, -14288), (-7428, -83), (262788420, 20591), (262788420, -7428), (262788420, -1696315580352823543), (262788420, 26887), (262788420, 85), (262788420, 102), (262788420, -32490), (262788420, 29222), (262788420, -65), (262788420, 20290), (262788420, -1), (262788420, -38), (262788420, -1366288489), (262788420, -5890), (262788420, 75), (262788420, -14288), (262788420, -83), (-1696315580352823543, 20591), (-1696315580352823543, -7428), (-1696315580352823543, 262788420), (-1696315580352823543, 26887), (-1696315580352823543, 85), (-1696315580352823543, 102), (-1696315580352823543, -32490), (-1696315580352823543, 29222), (-1696315580352823543, -65), (-1696315580352823543, 20290), (-1696315580352823543, -1), (-1696315580352823543, -38), (-1696315580352823543, -1366288489), (-1696315580352823543, -5890), (-1696315580352823543, 75), (-1696315580352823543, -14288), (-1696315580352823543, -83), (26887, 20591), (26887, -7428), (26887, 262788420), (26887, -1696315580352823543), (26887, 85), (26887, 102), (26887, -32490), (26887, 29222), (26887, -65), (26887, 20290), (26887, -1), (26887, -38), (26887, -1366288489), (26887, -5890), (26887, 75), (26887, -14288), (26887, -83), (85, 20591), (85, -7428), (85, 262788420), (85, -1696315580352823543), (85, 26887), (85, 102), (85, -32490), (85, 29222), (85, -65), (85, 20290), (85, -1), (85, -38), (85, -1366288489), (85, -5890), (85, 75), (85, -14288), (85, -83), (102, 20591), (102, -7428), (102, 262788420), (102, -1696315580352823543), (102, 26887), (102, 85), (102, -32490), (102, 29222), (102, -65), (102, 20290), (102, -1), (102, -38), (102, -1366288489), (102, -5890), (102, 75), (102, -14288), (102, -83), (-32490, 20591), (-32490, -7428), (-32490, 262788420), (-32490, -1696315580352823543), (-32490, 26887), (-32490, 85), (-32490, 102), (-32490, 29222), (-32490, -65), (-32490, 20290), (-32490, -1), (-32490, -38), (-32490, -1366288489), (-32490, -5890), (-32490, 75), (-32490, -14288), (-32490, -83), (29222, 20591), (29222, -7428), (29222, 262788420), (29222, -1696315580352823543), (29222, 26887), (29222, 85), (29222, 102), (29222, -32490), (29222, -65), (29222, 20290), (29222, -1), (29222, -38), (29222, -1366288489), (29222, -5890), (29222, 75), (29222, -14288), (29222, -83), (-65, 20591), (-65, -7428), (-65, 262788420), (-65, -1696315580352823543), (-65, 26887), (-65, 85), (-65, 102), (-65, -32490), (-65, 29222), (-65, 20290), (-65, -1), (-65, -38), (-65, -1366288489), (-65, -5890), (-65, 75), (-65, -14288), (-65, -83), (20290, 20591), (20290, -7428), (20290, 262788420), (20290, -1696315580352823543), (20290, 26887), (20290, 85), (20290, 102), (20290, -32490), (20290, 29222), (20290, -65), (20290, -1), (20290, -38), (20290, -1366288489), (20290, -5890), (20290, 75), (20290, -14288), (20290, -83), (-1, 20591), (-1, -7428), (-1, 262788420), (-1, -1696315580352823543), (-1, 26887), (-1, 85), (-1, 102), (-1, -32490), (-1, 29222), (-1, -65), (-1, 20290), (-1, -38), (-1, -1366288489), (-1, -5890), (-1, 75), (-1, -14288), (-1, -83), (-38, 20591), (-38, -7428), (-38, 262788420), (-38, -1696315580352823543), (-38, 26887), (-38, 85), (-38, 102), (-38, -32490), (-38, 29222), (-38, -65), (-38, 20290), (-38, -1), (-38, -1366288489), (-38, -5890), (-38, 75), (-38, -14288), (-38, -83), (-1366288489, 20591), (-1366288489, -7428), (-1366288489, 262788420), (-1366288489, -1696315580352823543), (-1366288489, 26887), (-1366288489, 85), (-1366288489, 102), (-1366288489, -32490), (-1366288489, 29222), (-1366288489, -65), (-1366288489, 20290), (-1366288489, -1), (-1366288489, -38), (-1366288489, -5890), (-1366288489, 75), (-1366288489, -14288), (-1366288489, -83), (-5890, 20591), (-5890, -7428), (-5890, 262788420), (-5890, -1696315580352823543), (-5890, 26887), (-5890, 85), (-5890, 102), (-5890, -32490), (-5890, 29222), (-5890, -65), (-5890, 20290), (-5890, -1), (-5890, -38), (-5890, -1366288489), (-5890, 75), (-5890, -14288), (-5890, -83), (75, 20591), (75, -7428), (75, 262788420), (75, -1696315580352823543), (75, 26887), (75, 85), (75, 102), (75, -32490), (75, 29222), (75, -65), (75, 20290), (75, -1), (75, -38), (75, -1366288489), (75, -5890), (75, -14288), (75, -83), (-14288, 20591), (-14288, -7428), (-14288, 262788420), (-14288, -1696315580352823543), (-14288, 26887), (-14288, 85), (-14288, 102), (-14288, -32490), (-14288, 29222), (-14288, -65), (-14288, 20290), (-14288, -1), (-14288, -38), (-14288, -1366288489), (-14288, -5890), (-14288, 75), (-14288, -83), (-83, 20591), (-83, -7428), (-83, 262788420), (-83, -1696315580352823543), (-83, 26887), (-83, 85), (-83, 102), (-83, -32490), (-83, 29222), (-83, -65), (-83, 20290), (-83, -1), (-83, -38), (-83, -1366288489), (-83, -5890), (-83, 75), (-83, -14288)]))
    G.add_edges_from(st.sampled_from([(u, v) for u in clique_nodes for v in clique_nodes if u != v]).example())

proptest/networkx.algorithms.clique.find_cliques/pbt_1.py::test_output_cliques_are_subsets_of_nodes_property
  /home/james/projects/cs6223/our_proptest_data/proptest/networkx.algorithms.clique.find_cliques/pbt_1.py:9: NonInteractiveExampleWarning: The `.example()` method is good for exploring strategies, but should only be used interactively.  We recommend using `@given` for tests - it performs better, saves and replays failures to avoid flakiness, and reports minimal examples. (strategy: sampled_from([(20591, -7428), (20591, 262788420), (20591, -1696315580352823543), (20591, 26887), (20591, 85), (20591, 102), (20591, -32490), (20591, 29222), (20591, -65), (20591, 20290), (20591, -1), (20591, -38), (20591, -1366288489), (20591, -5890), (20591, 75), (20591, -38), (20591, -83), (-7428, 20591), (-7428, 262788420), (-7428, -1696315580352823543), (-7428, 26887), (-7428, 85), (-7428, 102), (-7428, -32490), (-7428, 29222), (-7428, -65), (-7428, 20290), (-7428, -1), (-7428, -38), (-7428, -1366288489), (-7428, -5890), (-7428, 75), (-7428, -38), (-7428, -83), (262788420, 20591), (262788420, -7428), (262788420, -1696315580352823543), (262788420, 26887), (262788420, 85), (262788420, 102), (262788420, -32490), (262788420, 29222), (262788420, -65), (262788420, 20290), (262788420, -1), (262788420, -38), (262788420, -1366288489), (262788420, -5890), (262788420, 75), (262788420, -38), (262788420, -83), (-1696315580352823543, 20591), (-1696315580352823543, -7428), (-1696315580352823543, 262788420), (-1696315580352823543, 26887), (-1696315580352823543, 85), (-1696315580352823543, 102), (-1696315580352823543, -32490), (-1696315580352823543, 29222), (-1696315580352823543, -65), (-1696315580352823543, 20290), (-1696315580352823543, -1), (-1696315580352823543, -38), (-1696315580352823543, -1366288489), (-1696315580352823543, -5890), (-1696315580352823543, 75), (-1696315580352823543, -38), (-1696315580352823543, -83), (26887, 20591), (26887, -7428), (26887, 262788420), (26887, -1696315580352823543), (26887, 85), (26887, 102), (26887, -32490), (26887, 29222), (26887, -65), (26887, 20290), (26887, -1), (26887, -38), (26887, -1366288489), (26887, -5890), (26887, 75), (26887, -38), (26887, -83), (85, 20591), (85, -7428), (85, 262788420), (85, -1696315580352823543), (85, 26887), (85, 102), (85, -32490), (85, 29222), (85, -65), (85, 20290), (85, -1), (85, -38), (85, -1366288489), (85, -5890), (85, 75), (85, -38), (85, -83), (102, 20591), (102, -7428), (102, 262788420), (102, -1696315580352823543), (102, 26887), (102, 85), (102, -32490), (102, 29222), (102, -65), (102, 20290), (102, -1), (102, -38), (102, -1366288489), (102, -5890), (102, 75), (102, -38), (102, -83), (-32490, 20591), (-32490, -7428), (-32490, 262788420), (-32490, -1696315580352823543), (-32490, 26887), (-32490, 85), (-32490, 102), (-32490, 29222), (-32490, -65), (-32490, 20290), (-32490, -1), (-32490, -38), (-32490, -1366288489), (-32490, -5890), (-32490, 75), (-32490, -38), (-32490, -83), (29222, 20591), (29222, -7428), (29222, 262788420), (29222, -1696315580352823543), (29222, 26887), (29222, 85), (29222, 102), (29222, -32490), (29222, -65), (29222, 20290), (29222, -1), (29222, -38), (29222, -1366288489), (29222, -5890), (29222, 75), (29222, -38), (29222, -83), (-65, 20591), (-65, -7428), (-65, 262788420), (-65, -1696315580352823543), (-65, 26887), (-65, 85), (-65, 102), (-65, -32490), (-65, 29222), (-65, 20290), (-65, -1), (-65, -38), (-65, -1366288489), (-65, -5890), (-65, 75), (-65, -38), (-65, -83), (20290, 20591), (20290, -7428), (20290, 262788420), (20290, -1696315580352823543), (20290, 26887), (20290, 85), (20290, 102), (20290, -32490), (20290, 29222), (20290, -65), (20290, -1), (20290, -38), (20290, -1366288489), (20290, -5890), (20290, 75), (20290, -38), (20290, -83), (-1, 20591), (-1, -7428), (-1, 262788420), (-1, -1696315580352823543), (-1, 26887), (-1, 85), (-1, 102), (-1, -32490), (-1, 29222), (-1, -65), (-1, 20290), (-1, -38), (-1, -1366288489), (-1, -5890), (-1, 75), (-1, -38), (-1, -83), (-38, 20591), (-38, -7428), (-38, 262788420), (-38, -1696315580352823543), (-38, 26887), (-38, 85), (-38, 102), (-38, -32490), (-38, 29222), (-38, -65), (-38, 20290), (-38, -1), (-38, -1366288489), (-38, -5890), (-38, 75), (-38, -83), (-1366288489, 20591), (-1366288489, -7428), (-1366288489, 262788420), (-1366288489, -1696315580352823543), (-1366288489, 26887), (-1366288489, 85), (-1366288489, 102), (-1366288489, -32490), (-1366288489, 29222), (-1366288489, -65), (-1366288489, 20290), (-1366288489, -1), (-1366288489, -38), (-1366288489, -5890), (-1366288489, 75), (-1366288489, -38), (-1366288489, -83), (-5890, 20591), (-5890, -7428), (-5890, 262788420), (-5890, -1696315580352823543), (-5890, 26887), (-5890, 85), (-5890, 102), (-5890, -32490), (-5890, 29222), (-5890, -65), (-5890, 20290), (-5890, -1), (-5890, -38), (-5890, -1366288489), (-5890, 75), (-5890, -38), (-5890, -83), (75, 20591), (75, -7428), (75, 262788420), (75, -1696315580352823543), (75, 26887), (75, 85), (75, 102), (75, -32490), (75, 29222), (75, -65), (75, 20290), (75, -1), (75, -38), (75, -1366288489), (75, -5890), (75, -38), (75, -83), (-38, 20591), (-38, -7428), (-38, 262788420), (-38, -1696315580352823543), (-38, 26887), (-38, 85), (-38, 102), (-38, -32490), (-38, 29222), (-38, -65), (-38, 20290), (-38, -1), (-38, -1366288489), (-38, -5890), (-38, 75), (-38, -83), (-83, 20591), (-83, -7428), (-83, 262788420), (-83, -1696315580352823543), (-83, 26887), (-83, 85), (-83, 102), (-83, -32490), (-83, 29222), (-83, -65), (-83, 20290), (-83, -1), (-83, -38), (-83, -1366288489), (-83, -5890), (-83, 75), (-83, -38)]))
    G.add_edges_from(st.sampled_from([(u, v) for u in clique_nodes for v in clique_nodes if u != v]).example())

proptest/networkx.algorithms.clique.find_cliques/pbt_1.py::test_output_cliques_are_subsets_of_nodes_property
  /home/james/projects/cs6223/our_proptest_data/proptest/networkx.algorithms.clique.find_cliques/pbt_1.py:9: NonInteractiveExampleWarning: The `.example()` method is good for exploring strategies, but should only be used interactively.  We recommend using `@given` for tests - it performs better, saves and replays failures to avoid flakiness, and reports minimal examples. (strategy: sampled_from([(20591, -7428), (20591, 262788420), (20591, -1696315580352823543), (20591, 26887), (20591, 85), (20591, 102), (20591, -32490), (20591, 29222), (20591, -65), (20591, -5890), (20591, -1), (20591, -38), (20591, -1366288489), (20591, -5890), (20591, 75), (20591, -38), (20591, -83), (-7428, 20591), (-7428, 262788420), (-7428, -1696315580352823543), (-7428, 26887), (-7428, 85), (-7428, 102), (-7428, -32490), (-7428, 29222), (-7428, -65), (-7428, -5890), (-7428, -1), (-7428, -38), (-7428, -1366288489), (-7428, -5890), (-7428, 75), (-7428, -38), (-7428, -83), (262788420, 20591), (262788420, -7428), (262788420, -1696315580352823543), (262788420, 26887), (262788420, 85), (262788420, 102), (262788420, -32490), (262788420, 29222), (262788420, -65), (262788420, -5890), (262788420, -1), (262788420, -38), (262788420, -1366288489), (262788420, -5890), (262788420, 75), (262788420, -38), (262788420, -83), (-1696315580352823543, 20591), (-1696315580352823543, -7428), (-1696315580352823543, 262788420), (-1696315580352823543, 26887), (-1696315580352823543, 85), (-1696315580352823543, 102), (-1696315580352823543, -32490), (-1696315580352823543, 29222), (-1696315580352823543, -65), (-1696315580352823543, -5890), (-1696315580352823543, -1), (-1696315580352823543, -38), (-1696315580352823543, -1366288489), (-1696315580352823543, -5890), (-1696315580352823543, 75), (-1696315580352823543, -38), (-1696315580352823543, -83), (26887, 20591), (26887, -7428), (26887, 262788420), (26887, -1696315580352823543), (26887, 85), (26887, 102), (26887, -32490), (26887, 29222), (26887, -65), (26887, -5890), (26887, -1), (26887, -38), (26887, -1366288489), (26887, -5890), (26887, 75), (26887, -38), (26887, -83), (85, 20591), (85, -7428), (85, 262788420), (85, -1696315580352823543), (85, 26887), (85, 102), (85, -32490), (85, 29222), (85, -65), (85, -5890), (85, -1), (85, -38), (85, -1366288489), (85, -5890), (85, 75), (85, -38), (85, -83), (102, 20591), (102, -7428), (102, 262788420), (102, -1696315580352823543), (102, 26887), (102, 85), (102, -32490), (102, 29222), (102, -65), (102, -5890), (102, -1), (102, -38), (102, -1366288489), (102, -5890), (102, 75), (102, -38), (102, -83), (-32490, 20591), (-32490, -7428), (-32490, 262788420), (-32490, -1696315580352823543), (-32490, 26887), (-32490, 85), (-32490, 102), (-32490, 29222), (-32490, -65), (-32490, -5890), (-32490, -1), (-32490, -38), (-32490, -1366288489), (-32490, -5890), (-32490, 75), (-32490, -38), (-32490, -83), (29222, 20591), (29222, -7428), (29222, 262788420), (29222, -1696315580352823543), (29222, 26887), (29222, 85), (29222, 102), (29222, -32490), (29222, -65), (29222, -5890), (29222, -1), (29222, -38), (29222, -1366288489), (29222, -5890), (29222, 75), (29222, -38), (29222, -83), (-65, 20591), (-65, -7428), (-65, 262788420), (-65, -1696315580352823543), (-65, 26887), (-65, 85), (-65, 102), (-65, -32490), (-65, 29222), (-65, -5890), (-65, -1), (-65, -38), (-65, -1366288489), (-65, -5890), (-65, 75), (-65, -38), (-65, -83), (-5890, 20591), (-5890, -7428), (-5890, 262788420), (-5890, -1696315580352823543), (-5890, 26887), (-5890, 85), (-5890, 102), (-5890, -32490), (-5890, 29222), (-5890, -65), (-5890, -1), (-5890, -38), (-5890, -1366288489), (-5890, 75), (-5890, -38), (-5890, -83), (-1, 20591), (-1, -7428), (-1, 262788420), (-1, -1696315580352823543), (-1, 26887), (-1, 85), (-1, 102), (-1, -32490), (-1, 29222), (-1, -65), (-1, -5890), (-1, -38), (-1, -1366288489), (-1, -5890), (-1, 75), (-1, -38), (-1, -83), (-38, 20591), (-38, -7428), (-38, 262788420), (-38, -1696315580352823543), (-38, 26887), (-38, 85), (-38, 102), (-38, -32490), (-38, 29222), (-38, -65), (-38, -5890), (-38, -1), (-38, -1366288489), (-38, -5890), (-38, 75), (-38, -83), (-1366288489, 20591), (-1366288489, -7428), (-1366288489, 262788420), (-1366288489, -1696315580352823543), (-1366288489, 26887), (-1366288489, 85), (-1366288489, 102), (-1366288489, -32490), (-1366288489, 29222), (-1366288489, -65), (-1366288489, -5890), (-1366288489, -1), (-1366288489, -38), (-1366288489, -5890), (-1366288489, 75), (-1366288489, -38), (-1366288489, -83), (-5890, 20591), (-5890, -7428), (-5890, 262788420), (-5890, -1696315580352823543), (-5890, 26887), (-5890, 85), (-5890, 102), (-5890, -32490), (-5890, 29222), (-5890, -65), (-5890, -1), (-5890, -38), (-5890, -1366288489), (-5890, 75), (-5890, -38), (-5890, -83), (75, 20591), (75, -7428), (75, 262788420), (75, -1696315580352823543), (75, 26887), (75, 85), (75, 102), (75, -32490), (75, 29222), (75, -65), (75, -5890), (75, -1), (75, -38), (75, -1366288489), (75, -5890), (75, -38), (75, -83), (-38, 20591), (-38, -7428), (-38, 262788420), (-38, -1696315580352823543), (-38, 26887), (-38, 85), (-38, 102), (-38, -32490), (-38, 29222), (-38, -65), (-38, -5890), (-38, -1), (-38, -1366288489), (-38, -5890), (-38, 75), (-38, -83), (-83, 20591), (-83, -7428), (-83, 262788420), (-83, -1696315580352823543), (-83, 26887), (-83, 85), (-83, 102), (-83, -32490), (-83, 29222), (-83, -65), (-83, -5890), (-83, -1), (-83, -38), (-83, -1366288489), (-83, -5890), (-83, 75), (-83, -38)]))
    G.add_edges_from(st.sampled_from([(u, v) for u in clique_nodes for v in clique_nodes if u != v]).example())

proptest/networkx.algorithms.clique.find_cliques/pbt_1.py::test_output_cliques_are_subsets_of_nodes_property
  /home/james/projects/cs6223/our_proptest_data/proptest/networkx.algorithms.clique.find_cliques/pbt_1.py:9: NonInteractiveExampleWarning: The `.example()` method is good for exploring strategies, but should only be used interactively.  We recommend using `@given` for tests - it performs better, saves and replays failures to avoid flakiness, and reports minimal examples. (strategy: sampled_from([(20591, -7428), (20591, 262788420), (20591, -1696315580352823543), (20591, 26887), (20591, 85), (20591, 102), (20591, -32490), (20591, 29222), (20591, -65), (20591, -5890), (20591, -1), (20591, -38), (20591, -8053751003628496027), (20591, -5890), (20591, 75), (20591, -38), (20591, -83), (-7428, 20591), (-7428, 262788420), (-7428, -1696315580352823543), (-7428, 26887), (-7428, 85), (-7428, 102), (-7428, -32490), (-7428, 29222), (-7428, -65), (-7428, -5890), (-7428, -1), (-7428, -38), (-7428, -8053751003628496027), (-7428, -5890), (-7428, 75), (-7428, -38), (-7428, -83), (262788420, 20591), (262788420, -7428), (262788420, -1696315580352823543), (262788420, 26887), (262788420, 85), (262788420, 102), (262788420, -32490), (262788420, 29222), (262788420, -65), (262788420, -5890), (262788420, -1), (262788420, -38), (262788420, -8053751003628496027), (262788420, -5890), (262788420, 75), (262788420, -38), (262788420, -83), (-1696315580352823543, 20591), (-1696315580352823543, -7428), (-1696315580352823543, 262788420), (-1696315580352823543, 26887), (-1696315580352823543, 85), (-1696315580352823543, 102), (-1696315580352823543, -32490), (-1696315580352823543, 29222), (-1696315580352823543, -65), (-1696315580352823543, -5890), (-1696315580352823543, -1), (-1696315580352823543, -38), (-1696315580352823543, -8053751003628496027), (-1696315580352823543, -5890), (-1696315580352823543, 75), (-1696315580352823543, -38), (-1696315580352823543, -83), (26887, 20591), (26887, -7428), (26887, 262788420), (26887, -1696315580352823543), (26887, 85), (26887, 102), (26887, -32490), (26887, 29222), (26887, -65), (26887, -5890), (26887, -1), (26887, -38), (26887, -8053751003628496027), (26887, -5890), (26887, 75), (26887, -38), (26887, -83), (85, 20591), (85, -7428), (85, 262788420), (85, -1696315580352823543), (85, 26887), (85, 102), (85, -32490), (85, 29222), (85, -65), (85, -5890), (85, -1), (85, -38), (85, -8053751003628496027), (85, -5890), (85, 75), (85, -38), (85, -83), (102, 20591), (102, -7428), (102, 262788420), (102, -1696315580352823543), (102, 26887), (102, 85), (102, -32490), (102, 29222), (102, -65), (102, -5890), (102, -1), (102, -38), (102, -8053751003628496027), (102, -5890), (102, 75), (102, -38), (102, -83), (-32490, 20591), (-32490, -7428), (-32490, 262788420), (-32490, -1696315580352823543), (-32490, 26887), (-32490, 85), (-32490, 102), (-32490, 29222), (-32490, -65), (-32490, -5890), (-32490, -1), (-32490, -38), (-32490, -8053751003628496027), (-32490, -5890), (-32490, 75), (-32490, -38), (-32490, -83), (29222, 20591), (29222, -7428), (29222, 262788420), (29222, -1696315580352823543), (29222, 26887), (29222, 85), (29222, 102), (29222, -32490), (29222, -65), (29222, -5890), (29222, -1), (29222, -38), (29222, -8053751003628496027), (29222, -5890), (29222, 75), (29222, -38), (29222, -83), (-65, 20591), (-65, -7428), (-65, 262788420), (-65, -1696315580352823543), (-65, 26887), (-65, 85), (-65, 102), (-65, -32490), (-65, 29222), (-65, -5890), (-65, -1), (-65, -38), (-65, -8053751003628496027), (-65, -5890), (-65, 75), (-65, -38), (-65, -83), (-5890, 20591), (-5890, -7428), (-5890, 262788420), (-5890, -1696315580352823543), (-5890, 26887), (-5890, 85), (-5890, 102), (-5890, -32490), (-5890, 29222), (-5890, -65), (-5890, -1), (-5890, -38), (-5890, -8053751003628496027), (-5890, 75), (-5890, -38), (-5890, -83), (-1, 20591), (-1, -7428), (-1, 262788420), (-1, -1696315580352823543), (-1, 26887), (-1, 85), (-1, 102), (-1, -32490), (-1, 29222), (-1, -65), (-1, -5890), (-1, -38), (-1, -8053751003628496027), (-1, -5890), (-1, 75), (-1, -38), (-1, -83), (-38, 20591), (-38, -7428), (-38, 262788420), (-38, -1696315580352823543), (-38, 26887), (-38, 85), (-38, 102), (-38, -32490), (-38, 29222), (-38, -65), (-38, -5890), (-38, -1), (-38, -8053751003628496027), (-38, -5890), (-38, 75), (-38, -83), (-8053751003628496027, 20591), (-8053751003628496027, -7428), (-8053751003628496027, 262788420), (-8053751003628496027, -1696315580352823543), (-8053751003628496027, 26887), (-8053751003628496027, 85), (-8053751003628496027, 102), (-8053751003628496027, -32490), (-8053751003628496027, 29222), (-8053751003628496027, -65), (-8053751003628496027, -5890), (-8053751003628496027, -1), (-8053751003628496027, -38), (-8053751003628496027, -5890), (-8053751003628496027, 75), (-8053751003628496027, -38), (-8053751003628496027, -83), (-5890, 20591), (-5890, -7428), (-5890, 262788420), (-5890, -1696315580352823543), (-5890, 26887), (-5890, 85), (-5890, 102), (-5890, -32490), (-5890, 29222), (-5890, -65), (-5890, -1), (-5890, -38), (-5890, -8053751003628496027), (-5890, 75), (-5890, -38), (-5890, -83), (75, 20591), (75, -7428), (75, 262788420), (75, -1696315580352823543), (75, 26887), (75, 85), (75, 102), (75, -32490), (75, 29222), (75, -65), (75, -5890), (75, -1), (75, -38), (75, -8053751003628496027), (75, -5890), (75, -38), (75, -83), (-38, 20591), (-38, -7428), (-38, 262788420), (-38, -1696315580352823543), (-38, 26887), (-38, 85), (-38, 102), (-38, -32490), (-38, 29222), (-38, -65), (-38, -5890), (-38, -1), (-38, -8053751003628496027), (-38, -5890), (-38, 75), (-38, -83), (-83, 20591), (-83, -7428), (-83, 262788420), (-83, -1696315580352823543), (-83, 26887), (-83, 85), (-83, 102), (-83, -32490), (-83, 29222), (-83, -65), (-83, -5890), (-83, -1), (-83, -38), (-83, -8053751003628496027), (-83, -5890), (-83, 75), (-83, -38)]))
    G.add_edges_from(st.sampled_from([(u, v) for u in clique_nodes for v in clique_nodes if u != v]).example())

proptest/networkx.algorithms.clique.find_cliques/pbt_1.py::test_output_cliques_contain_at_least_one_node_property
  /home/james/projects/cs6223/our_proptest_data/proptest/networkx.algorithms.clique.find_cliques/pbt_1.py:19: NonInteractiveExampleWarning: The `.example()` method is good for exploring strategies, but should only be used interactively.  We recommend using `@given` for tests - it performs better, saves and replays failures to avoid flakiness, and reports minimal examples. (strategy: sampled_from([]))
    G.add_edges_from(st.sampled_from([(u, v) for u in graph_nodes for v in graph_nodes if u != v]).example())

proptest/networkx.algorithms.clique.find_cliques/pbt_1.py::test_output_cliques_contain_at_least_one_node_property
  /home/james/projects/cs6223/our_proptest_data/proptest/networkx.algorithms.clique.find_cliques/pbt_1.py:19: NonInteractiveExampleWarning: The `.example()` method is good for exploring strategies, but should only be used interactively.  We recommend using `@given` for tests - it performs better, saves and replays failures to avoid flakiness, and reports minimal examples. (strategy: sampled_from([(-99, -388863659), (-99, -5608), (-99, -714678450), (-388863659, -99), (-388863659, -5608), (-388863659, -714678450), (-5608, -99), (-5608, -388863659), (-5608, -714678450), (-714678450, -99), (-714678450, -388863659), (-714678450, -5608)]))
    G.add_edges_from(st.sampled_from([(u, v) for u in graph_nodes for v in graph_nodes if u != v]).example())

proptest/networkx.algorithms.clique.find_cliques/pbt_1.py::test_output_cliques_contain_at_least_one_node_property
  /home/james/projects/cs6223/our_proptest_data/proptest/networkx.algorithms.clique.find_cliques/pbt_1.py:19: NonInteractiveExampleWarning: The `.example()` method is good for exploring strategies, but should only be used interactively.  We recommend using `@given` for tests - it performs better, saves and replays failures to avoid flakiness, and reports minimal examples. (strategy: sampled_from([(-99, -388863659), (-99, -5608), (-99, -5608), (-388863659, -99), (-388863659, -5608), (-388863659, -5608), (-5608, -99), (-5608, -388863659), (-5608, -99), (-5608, -388863659)]))
    G.add_edges_from(st.sampled_from([(u, v) for u in graph_nodes for v in graph_nodes if u != v]).example())

proptest/networkx.algorithms.clique.find_cliques/pbt_1.py::test_output_cliques_contain_at_least_one_node_property
  /home/james/projects/cs6223/our_proptest_data/proptest/networkx.algorithms.clique.find_cliques/pbt_1.py:19: NonInteractiveExampleWarning: The `.example()` method is good for exploring strategies, but should only be used interactively.  We recommend using `@given` for tests - it performs better, saves and replays failures to avoid flakiness, and reports minimal examples. (strategy: sampled_from([(-99, -5608), (-99, -5608), (-99, -5608), (-99, -5608), (-5608, -99), (-5608, -99), (-5608, -99), (-5608, -99)]))
    G.add_edges_from(st.sampled_from([(u, v) for u in graph_nodes for v in graph_nodes if u != v]).example())

proptest/networkx.algorithms.clique.find_cliques/pbt_1.py::test_output_cliques_contain_at_least_one_node_property
  /home/james/projects/cs6223/our_proptest_data/proptest/networkx.algorithms.clique.find_cliques/pbt_1.py:19: NonInteractiveExampleWarning: The `.example()` method is good for exploring strategies, but should only be used interactively.  We recommend using `@given` for tests - it performs better, saves and replays failures to avoid flakiness, and reports minimal examples. (strategy: sampled_from([(-99, -5608), (-99, -5608), (-5608, -99), (-5608, -99), (-5608, -99), (-99, -5608)]))
    G.add_edges_from(st.sampled_from([(u, v) for u in graph_nodes for v in graph_nodes if u != v]).example())

proptest/networkx.algorithms.clique.find_cliques/pbt_1.py::test_output_cliques_contain_at_least_one_node_property
  /home/james/projects/cs6223/our_proptest_data/proptest/networkx.algorithms.clique.find_cliques/pbt_1.py:19: NonInteractiveExampleWarning: The `.example()` method is good for exploring strategies, but should only be used interactively.  We recommend using `@given` for tests - it performs better, saves and replays failures to avoid flakiness, and reports minimal examples. (strategy: sampled_from([(13, -7662), (13, 5046971928343767049), (13, -15652), (13, 5774), (13, -7412), (-7662, 13), (-7662, 5046971928343767049), (-7662, -15652), (-7662, 5774), (-7662, -7412), (5046971928343767049, 13), (5046971928343767049, -7662), (5046971928343767049, -15652), (5046971928343767049, 5774), (5046971928343767049, -7412), (-15652, 13), (-15652, -7662), (-15652, 5046971928343767049), (-15652, 5774), (-15652, -7412), (5774, 13), (5774, -7662), (5774, 5046971928343767049), (5774, -15652), (5774, -7412), (-7412, 13), (-7412, -7662), (-7412, 5046971928343767049), (-7412, -15652), (-7412, 5774)]))
    G.add_edges_from(st.sampled_from([(u, v) for u in graph_nodes for v in graph_nodes if u != v]).example())

proptest/networkx.algorithms.clique.find_cliques/pbt_1.py::test_output_cliques_are_maximal_property
  /home/james/projects/cs6223/our_proptest_data/proptest/networkx.algorithms.clique.find_cliques/pbt_1.py:29: NonInteractiveExampleWarning: The `.example()` method is good for exploring strategies, but should only be used interactively.  We recommend using `@given` for tests - it performs better, saves and replays failures to avoid flakiness, and reports minimal examples. (strategy: sampled_from([]))
    G.add_edges_from(st.sampled_from([(u, v) for u in graph_nodes for v in graph_nodes if u != v]).example())

proptest/networkx.algorithms.clique.find_cliques/pbt_1.py::test_output_cliques_are_maximal_property
  /home/james/projects/cs6223/our_proptest_data/proptest/networkx.algorithms.clique.find_cliques/pbt_1.py:29: NonInteractiveExampleWarning: The `.example()` method is good for exploring strategies, but should only be used interactively.  We recommend using `@given` for tests - it performs better, saves and replays failures to avoid flakiness, and reports minimal examples. (strategy: sampled_from([(484806848, -87), (-87, 484806848)]))
    G.add_edges_from(st.sampled_from([(u, v) for u in graph_nodes for v in graph_nodes if u != v]).example())

proptest/networkx.algorithms.clique.find_cliques/pbt_1.py::test_output_cliques_are_maximal_property
  /home/james/projects/cs6223/our_proptest_data/proptest/networkx.algorithms.clique.find_cliques/pbt_1.py:29: NonInteractiveExampleWarning: The `.example()` method is good for exploring strategies, but should only be used interactively.  We recommend using `@given` for tests - it performs better, saves and replays failures to avoid flakiness, and reports minimal examples. (strategy: sampled_from([(80, 29148), (80, -19574), (80, 2), (80, 4117), (80, 84901016553643246075067550175212573216), (80, 11644), (80, -40), (80, -25209), (29148, 80), (29148, -19574), (29148, 2), (29148, 4117), (29148, 84901016553643246075067550175212573216), (29148, 11644), (29148, -40), (29148, -25209), (-19574, 80), (-19574, 29148), (-19574, 2), (-19574, 4117), (-19574, 84901016553643246075067550175212573216), (-19574, 11644), (-19574, -40), (-19574, -25209), (2, 80), (2, 29148), (2, -19574), (2, 4117), (2, 84901016553643246075067550175212573216), (2, 11644), (2, -40), (2, -25209), (4117, 80), (4117, 29148), (4117, -19574), (4117, 2), (4117, 84901016553643246075067550175212573216), (4117, 11644), (4117, -40), (4117, -25209), (84901016553643246075067550175212573216, 80), (84901016553643246075067550175212573216, 29148), (84901016553643246075067550175212573216, -19574), (84901016553643246075067550175212573216, 2), (84901016553643246075067550175212573216, 4117), (84901016553643246075067550175212573216, 11644), (84901016553643246075067550175212573216, -40), (84901016553643246075067550175212573216, -25209), (11644, 80), (11644, 29148), (11644, -19574), (11644, 2), (11644, 4117), (11644, 84901016553643246075067550175212573216), (11644, -40), (11644, -25209), (-40, 80), (-40, 29148), (-40, -19574), (-40, 2), (-40, 4117), (-40, 84901016553643246075067550175212573216), (-40, 11644), (-40, -25209), (-25209, 80), (-25209, 29148), (-25209, -19574), (-25209, 2), (-25209, 4117), (-25209, 84901016553643246075067550175212573216), (-25209, 11644), (-25209, -40)]))
    G.add_edges_from(st.sampled_from([(u, v) for u in graph_nodes for v in graph_nodes if u != v]).example())

proptest/networkx.algorithms.clique.find_cliques/pbt_1.py::test_output_cliques_are_maximal_property
  /home/james/projects/cs6223/our_proptest_data/proptest/networkx.algorithms.clique.find_cliques/pbt_1.py:29: NonInteractiveExampleWarning: The `.example()` method is good for exploring strategies, but should only be used interactively.  We recommend using `@given` for tests - it performs better, saves and replays failures to avoid flakiness, and reports minimal examples. (strategy: sampled_from([(80, 29148), (80, -19574), (80, 2), (80, 4117), (80, 84901016553643246075067550175212573216), (80, 2), (80, -40), (80, -25209), (29148, 80), (29148, -19574), (29148, 2), (29148, 4117), (29148, 84901016553643246075067550175212573216), (29148, 2), (29148, -40), (29148, -25209), (-19574, 80), (-19574, 29148), (-19574, 2), (-19574, 4117), (-19574, 84901016553643246075067550175212573216), (-19574, 2), (-19574, -40), (-19574, -25209), (2, 80), (2, 29148), (2, -19574), (2, 4117), (2, 84901016553643246075067550175212573216), (2, -40), (2, -25209), (4117, 80), (4117, 29148), (4117, -19574), (4117, 2), (4117, 84901016553643246075067550175212573216), (4117, 2), (4117, -40), (4117, -25209), (84901016553643246075067550175212573216, 80), (84901016553643246075067550175212573216, 29148), (84901016553643246075067550175212573216, -19574), (84901016553643246075067550175212573216, 2), (84901016553643246075067550175212573216, 4117), (84901016553643246075067550175212573216, 2), (84901016553643246075067550175212573216, -40), (84901016553643246075067550175212573216, -25209), (2, 80), (2, 29148), (2, -19574), (2, 4117), (2, 84901016553643246075067550175212573216), (2, -40), (2, -25209), (-40, 80), (-40, 29148), (-40, -19574), (-40, 2), (-40, 4117), (-40, 84901016553643246075067550175212573216), (-40, 2), (-40, -25209), (-25209, 80), (-25209, 29148), (-25209, -19574), (-25209, 2), (-25209, 4117), (-25209, 84901016553643246075067550175212573216), (-25209, 2), (-25209, -40)]))
    G.add_edges_from(st.sampled_from([(u, v) for u in graph_nodes for v in graph_nodes if u != v]).example())

proptest/networkx.algorithms.clique.find_cliques/pbt_1.py::test_output_cliques_are_maximal_property
  /home/james/projects/cs6223/our_proptest_data/proptest/networkx.algorithms.clique.find_cliques/pbt_1.py:29: NonInteractiveExampleWarning: The `.example()` method is good for exploring strategies, but should only be used interactively.  We recommend using `@given` for tests - it performs better, saves and replays failures to avoid flakiness, and reports minimal examples. (strategy: sampled_from([(80, -40), (80, -19574), (80, 2), (80, 4117), (80, 84901016553643246075067550175212573216), (80, 2), (80, -40), (80, -25209), (-40, 80), (-40, -19574), (-40, 2), (-40, 4117), (-40, 84901016553643246075067550175212573216), (-40, 2), (-40, -25209), (-19574, 80), (-19574, -40), (-19574, 2), (-19574, 4117), (-19574, 84901016553643246075067550175212573216), (-19574, 2), (-19574, -40), (-19574, -25209), (2, 80), (2, -40), (2, -19574), (2, 4117), (2, 84901016553643246075067550175212573216), (2, -40), (2, -25209), (4117, 80), (4117, -40), (4117, -19574), (4117, 2), (4117, 84901016553643246075067550175212573216), (4117, 2), (4117, -40), (4117, -25209), (84901016553643246075067550175212573216, 80), (84901016553643246075067550175212573216, -40), (84901016553643246075067550175212573216, -19574), (84901016553643246075067550175212573216, 2), (84901016553643246075067550175212573216, 4117), (84901016553643246075067550175212573216, 2), (84901016553643246075067550175212573216, -40), (84901016553643246075067550175212573216, -25209), (2, 80), (2, -40), (2, -19574), (2, 4117), (2, 84901016553643246075067550175212573216), (2, -40), (2, -25209), (-40, 80), (-40, -19574), (-40, 2), (-40, 4117), (-40, 84901016553643246075067550175212573216), (-40, 2), (-40, -25209), (-25209, 80), (-25209, -40), (-25209, -19574), (-25209, 2), (-25209, 4117), (-25209, 84901016553643246075067550175212573216), (-25209, 2), (-25209, -40)]))
    G.add_edges_from(st.sampled_from([(u, v) for u in graph_nodes for v in graph_nodes if u != v]).example())

proptest/networkx.algorithms.clique.find_cliques/pbt_1.py::test_output_cliques_are_maximal_property
  /home/james/projects/cs6223/our_proptest_data/proptest/networkx.algorithms.clique.find_cliques/pbt_1.py:29: NonInteractiveExampleWarning: The `.example()` method is good for exploring strategies, but should only be used interactively.  We recommend using `@given` for tests - it performs better, saves and replays failures to avoid flakiness, and reports minimal examples. (strategy: sampled_from([(80, -40), (80, -19574), (80, 2), (80, 4117), (80, 84901016553643246075067550175212573216), (80, -40), (80, -40), (80, -25209), (-40, 80), (-40, -19574), (-40, 2), (-40, 4117), (-40, 84901016553643246075067550175212573216), (-40, -25209), (-19574, 80), (-19574, -40), (-19574, 2), (-19574, 4117), (-19574, 84901016553643246075067550175212573216), (-19574, -40), (-19574, -40), (-19574, -25209), (2, 80), (2, -40), (2, -19574), (2, 4117), (2, 84901016553643246075067550175212573216), (2, -40), (2, -40), (2, -25209), (4117, 80), (4117, -40), (4117, -19574), (4117, 2), (4117, 84901016553643246075067550175212573216), (4117, -40), (4117, -40), (4117, -25209), (84901016553643246075067550175212573216, 80), (84901016553643246075067550175212573216, -40), (84901016553643246075067550175212573216, -19574), (84901016553643246075067550175212573216, 2), (84901016553643246075067550175212573216, 4117), (84901016553643246075067550175212573216, -40), (84901016553643246075067550175212573216, -40), (84901016553643246075067550175212573216, -25209), (-40, 80), (-40, -19574), (-40, 2), (-40, 4117), (-40, 84901016553643246075067550175212573216), (-40, -25209), (-40, 80), (-40, -19574), (-40, 2), (-40, 4117), (-40, 84901016553643246075067550175212573216), (-40, -25209), (-25209, 80), (-25209, -40), (-25209, -19574), (-25209, 2), (-25209, 4117), (-25209, 84901016553643246075067550175212573216), (-25209, -40), (-25209, -40)]))
    G.add_edges_from(st.sampled_from([(u, v) for u in graph_nodes for v in graph_nodes if u != v]).example())

proptest/networkx.algorithms.clique.find_cliques/pbt_1.py::test_output_cliques_include_all_input_nodes_property
  /home/james/projects/cs6223/our_proptest_data/proptest/networkx.algorithms.clique.find_cliques/pbt_1.py:41: NonInteractiveExampleWarning: The `.example()` method is good for exploring strategies, but should only be used interactively.  We recommend using `@given` for tests - it performs better, saves and replays failures to avoid flakiness, and reports minimal examples. (strategy: sampled_from([(-22622, -106), (-22622, 5813845468930800445), (-106, -22622), (-106, 5813845468930800445), (5813845468930800445, -22622), (5813845468930800445, -106)]))
    G.add_edges_from(st.sampled_from([(u, v) for u in clique_nodes for v in clique_nodes if u != v]).example())

proptest/networkx.algorithms.clique.find_cliques/pbt_1.py::test_output_cliques_include_all_input_nodes_property
  /home/james/projects/cs6223/our_proptest_data/proptest/networkx.algorithms.clique.find_cliques/pbt_1.py:41: NonInteractiveExampleWarning: The `.example()` method is good for exploring strategies, but should only be used interactively.  We recommend using `@given` for tests - it performs better, saves and replays failures to avoid flakiness, and reports minimal examples. (strategy: sampled_from([(-22622, -106), (-106, -22622), (-106, -22622), (-22622, -106)]))
    G.add_edges_from(st.sampled_from([(u, v) for u in clique_nodes for v in clique_nodes if u != v]).example())

proptest/networkx.algorithms.clique.find_cliques/pbt_1.py::test_output_cliques_include_all_input_nodes_property
  /home/james/projects/cs6223/our_proptest_data/proptest/networkx.algorithms.clique.find_cliques/pbt_1.py:41: NonInteractiveExampleWarning: The `.example()` method is good for exploring strategies, but should only be used interactively.  We recommend using `@given` for tests - it performs better, saves and replays failures to avoid flakiness, and reports minimal examples. (strategy: sampled_from([(-106, -22622), (-106, -22622), (-22622, -106), (-22622, -106)]))
    G.add_edges_from(st.sampled_from([(u, v) for u in clique_nodes for v in clique_nodes if u != v]).example())

proptest/networkx.algorithms.clique.find_cliques/pbt_1.py::test_output_cliques_include_all_input_nodes_property
  /home/james/projects/cs6223/our_proptest_data/proptest/networkx.algorithms.clique.find_cliques/pbt_1.py:41: NonInteractiveExampleWarning: The `.example()` method is good for exploring strategies, but should only be used interactively.  We recommend using `@given` for tests - it performs better, saves and replays failures to avoid flakiness, and reports minimal examples. (strategy: sampled_from([]))
    G.add_edges_from(st.sampled_from([(u, v) for u in clique_nodes for v in clique_nodes if u != v]).example())

proptest/networkx.algorithms.clique.find_cliques/pbt_1.py::test_output_cliques_include_all_input_nodes_property
  /home/james/projects/cs6223/our_proptest_data/proptest/networkx.algorithms.clique.find_cliques/pbt_1.py:41: NonInteractiveExampleWarning: The `.example()` method is good for exploring strategies, but should only be used interactively.  We recommend using `@given` for tests - it performs better, saves and replays failures to avoid flakiness, and reports minimal examples. (strategy: sampled_from([(-27602, 157950502478205347909684108714189418821), (-27602, 4828), (-27602, 102), (-27602, -1561704234), (157950502478205347909684108714189418821, -27602), (157950502478205347909684108714189418821, 4828), (157950502478205347909684108714189418821, 102), (157950502478205347909684108714189418821, -1561704234), (4828, -27602), (4828, 157950502478205347909684108714189418821), (4828, 102), (4828, -1561704234), (102, -27602), (102, 157950502478205347909684108714189418821), (102, 4828), (102, -1561704234), (-1561704234, -27602), (-1561704234, 157950502478205347909684108714189418821), (-1561704234, 4828), (-1561704234, 102)]))
    G.add_edges_from(st.sampled_from([(u, v) for u in clique_nodes for v in clique_nodes if u != v]).example())

proptest/networkx.algorithms.clique.find_cliques/pbt_1.py::test_output_cliques_are_unique_property
  /home/james/projects/cs6223/our_proptest_data/proptest/networkx.algorithms.clique.find_cliques/pbt_1.py:51: NonInteractiveExampleWarning: The `.example()` method is good for exploring strategies, but should only be used interactively.  We recommend using `@given` for tests - it performs better, saves and replays failures to avoid flakiness, and reports minimal examples. (strategy: sampled_from([]))
    G.add_edges_from(st.sampled_from([(u, v) for u in graph_nodes for v in graph_nodes if u != v]).example())

proptest/networkx.algorithms.clique.find_cliques/pbt_1.py::test_output_cliques_are_unique_property
  /home/james/projects/cs6223/our_proptest_data/proptest/networkx.algorithms.clique.find_cliques/pbt_1.py:51: NonInteractiveExampleWarning: The `.example()` method is good for exploring strategies, but should only be used interactively.  We recommend using `@given` for tests - it performs better, saves and replays failures to avoid flakiness, and reports minimal examples. (strategy: sampled_from([(-13693, 57), (57, -13693)]))
    G.add_edges_from(st.sampled_from([(u, v) for u in graph_nodes for v in graph_nodes if u != v]).example())

proptest/networkx.algorithms.clique.find_cliques/pbt_1.py::test_output_cliques_are_unique_property
  /home/james/projects/cs6223/our_proptest_data/proptest/networkx.algorithms.clique.find_cliques/pbt_1.py:51: NonInteractiveExampleWarning: The `.example()` method is good for exploring strategies, but should only be used interactively.  We recommend using `@given` for tests - it performs better, saves and replays failures to avoid flakiness, and reports minimal examples. (strategy: sampled_from([(1734, 3853711852655423646), (3853711852655423646, 1734)]))
    G.add_edges_from(st.sampled_from([(u, v) for u in graph_nodes for v in graph_nodes if u != v]).example())

proptest/networkx.algorithms.clique.find_cliques/pbt_1.py::test_output_cliques_are_unique_property
  /home/james/projects/cs6223/our_proptest_data/proptest/networkx.algorithms.clique.find_cliques/pbt_1.py:51: NonInteractiveExampleWarning: The `.example()` method is good for exploring strategies, but should only be used interactively.  We recommend using `@given` for tests - it performs better, saves and replays failures to avoid flakiness, and reports minimal examples. (strategy: sampled_from([(28849, 100781088730060722018096300638418602543), (28849, -13244), (100781088730060722018096300638418602543, 28849), (100781088730060722018096300638418602543, -13244), (-13244, 28849), (-13244, 100781088730060722018096300638418602543)]))
    G.add_edges_from(st.sampled_from([(u, v) for u in graph_nodes for v in graph_nodes if u != v]).example())

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED proptest/networkx.algorithms.clique.find_cliques/pbt_1.py::test_output_cliques_are_subsets_of_nodes_property
FAILED proptest/networkx.algorithms.clique.find_cliques/pbt_1.py::test_output_cliques_contain_at_least_one_node_property
FAILED proptest/networkx.algorithms.clique.find_cliques/pbt_1.py::test_output_cliques_are_maximal_property
FAILED proptest/networkx.algorithms.clique.find_cliques/pbt_1.py::test_output_cliques_include_all_input_nodes_property
FAILED proptest/networkx.algorithms.clique.find_cliques/pbt_1.py::test_output_cliques_are_unique_property
FAILED proptest/networkx.algorithms.clique.find_cliques/pbt_3.py::test_find_cliques_include_nodes_property
FAILED proptest/networkx.algorithms.clique.find_cliques/pbt_4.py::test_find_cliques_includes_specified_nodes_property
================== 7 failed, 18 passed, 26 warnings in 1.96s ===================

{"function_name": "datetime.datetime.fromisoformat", "properties": ["1. The output datetime object should always represent a valid point in time, meaning it should not raise any exceptions for valid ISO 8601 formatted input strings.", "2. The year, month, and day attributes of the output datetime object should correspond directly to the values parsed from the input date_string, reflecting accurate date representation.", "3. If the input date_string includes time information, the hour, minute, second, and microsecond attributes of the output datetime object should match the values specified in the input string.", "4. If the input date_string contains a time zone offset, the output datetime object should have the correct `tzinfo` attribute set, accurately reflecting the specified time zone.", "5. The output datetime object should default to midnight (00:00:00) for the time portion if the input date_string does not include any time information."], "pbt": ["@given(st.text())\ndef test_valid_datetime_object_property(date_string):\n    try:\n        result = datetime.fromisoformat(date_string)\n        assert isinstance(result, datetime)\n    except ValueError:\n        pass  # Expected for invalid inputs", "@given(st.text())\ndef test_attributes_match_input_property(date_string):\n    try:\n        result = datetime.fromisoformat(date_string)\n        if 'T' in date_string or ' ' in date_string:\n            date_part, time_part = date_string.split('T') if 'T' in date_string else date_string.split(' ')\n            year, month, day = map(int, date_part.split('-'))\n            hour, minute, second = (map(int, time_part.split(':')) + [0])[:3]\n            assert result.year == year\n            assert result.month == month\n            assert result.day == day\n            assert result.hour == hour\n            assert result.minute == minute\n            assert result.second == second\n    except ValueError:\n        pass  # Expected for invalid inputs", "@given(st.text())\ndef test_timezone_information_property(date_string):\n    try:\n        result = datetime.fromisoformat(date_string)\n        if '+' in date_string or '-' in date_string:\n            assert result.tzinfo is not None\n    except ValueError:\n        pass  # Expected for invalid inputs", "@given(st.text())\ndef test_time_defaults_to_midnight_property(date_string):\n    if 'T' not in date_string and ' ' not in date_string:\n        date_string += 'T00:00:00'  # Ensure time is added for the test\n    try:\n        result = datetime.fromisoformat(date_string)\n        if 'T' not in date_string and ' ' not in date_string:\n            assert result.hour == 0\n            assert result.minute == 0\n            assert result.second == 0\n    except ValueError:\n        pass  # Expected for invalid inputs", "@given(st.text())\ndef test_valid_timezone_offset_property(date_string):\n    try:\n        result = datetime.fromisoformat(date_string)\n        if 'Z' in date_string or '+' in date_string or '-' in date_string:\n            assert result.tzinfo is not None\n    except ValueError:\n        pass  # Expected for invalid inputs"], "api_doc": "classmethod datetime.fromisoformat(date_string)\nReturn a datetime corresponding to a date_string in any valid ISO 8601 format, with the following exceptions:\n\nTime zone offsets may have fractional seconds.\n\nThe T separator may be replaced by any single unicode character.\n\nFractional hours and minutes are not supported.\n\nReduced precision dates are not currently supported (YYYY-MM, YYYY).\n\nExtended date representations are not currently supported (\u00b1YYYYYY-MM-DD).\n\nOrdinal dates are not currently supported (YYYY-OOO).\n\nExamples:\n\n>>>\nfrom datetime import datetime\ndatetime.fromisoformat('2011-11-04')\ndatetime.datetime(2011, 11, 4, 0, 0)\ndatetime.fromisoformat('20111104')\ndatetime.datetime(2011, 11, 4, 0, 0)\ndatetime.fromisoformat('2011-11-04T00:05:23')\ndatetime.datetime(2011, 11, 4, 0, 5, 23)\ndatetime.fromisoformat('2011-11-04T00:05:23Z')\ndatetime.datetime(2011, 11, 4, 0, 5, 23, tzinfo=datetime.timezone.utc)\ndatetime.fromisoformat('20111104T000523')\ndatetime.datetime(2011, 11, 4, 0, 5, 23)\ndatetime.fromisoformat('2011-W01-2T00:05:23.283')\ndatetime.datetime(2011, 1, 4, 0, 5, 23, 283000)\ndatetime.fromisoformat('2011-11-04 00:05:23.283')\ndatetime.datetime(2011, 11, 4, 0, 5, 23, 283000)\ndatetime.fromisoformat('2011-11-04 00:05:23.283+00:00')\ndatetime.datetime(2011, 11, 4, 0, 5, 23, 283000, tzinfo=datetime.timezone.utc)\ndatetime.fromisoformat('2011-11-04T00:05:23+04:00')   \ndatetime.datetime(2011, 11, 4, 0, 5, 23,\n    tzinfo=datetime.timezone(datetime.timedelta(seconds=14400)))\nAdded in version 3.7.\n\nChanged in version 3.11: Previously, this method only supported formats that could be emitted by date.isoformat() or datetime.isoformat()."}

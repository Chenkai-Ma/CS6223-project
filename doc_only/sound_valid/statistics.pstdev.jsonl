{"function_name": "statistics.pstdev", "properties": ["2. If the input data is a constant list (all elements are the same), the output should be zero, indicating no variability.", "3. The output should increase if the variability of the input data increases (i.e., if the range of the input data expands).", "4. The output should remain the same if the input list is modified by adding or removing elements that do not change the overall variance (e.g., adding a constant value to all elements).", "5. The output should be equal to the square root of the output from the `pvariance()` function when the same input data is provided."], "pbt": ["@given(st.lists(st.floats(allow_nan=False, allow_infinity=False), min_size=1, max_size=1000))\ndef test_statistics_pstdev_constant_list_property(data):\n    if len(data) > 0:\n        constant_value = data[0]\n        constant_list = [constant_value] * len(data)\n        result = statistics.pstdev(constant_list)\n        assert result == 0", "@given(st.lists(st.floats(allow_nan=False, allow_infinity=False), min_size=1, max_size=1000))\ndef test_statistics_pstdev_increasing_variability_property(data):\n    if len(data) > 1:\n        original_variance = statistics.pstdev(data)\n        expanded_data = data + [max(data) + 10]  # Adding an outlier to increase variability\n        result = statistics.pstdev(expanded_data)\n        assert result >= original_variance", "@given(st.lists(st.floats(allow_nan=False, allow_infinity=False), min_size=1, max_size=1000))\ndef test_statistics_pstdev_same_variance_property(data):\n    if len(data) > 0:\n        constant_value = 5.0\n        modified_data = [x + constant_value for x in data]\n        result_original = statistics.pstdev(data)\n        result_modified = statistics.pstdev(modified_data)\n        assert result_original == result_modified", "def test_statistics_pstdev_equivalence_with_pvariance_property(data):\n    result_pstdev = statistics.pstdev(data)\n    result_pvariance = statistics.pvariance(data) ** 0.5\n    assert result_pstdev == result_pvariance"], "api_doc": "statistics.pstdev(data, mu=None)\nReturn the population standard deviation (the square root of the population variance). See pvariance() for arguments and other details.\n\n>>>\npstdev([1.5, 2.5, 2.5, 2.75, 3.25, 4.75])\n0.986893273527251"}

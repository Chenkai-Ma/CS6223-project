{"function_name": "statistics.median", "properties": ["1. The median of a non-empty list of numbers should always be a number (either an integer or a float).", "2. If the input list has an odd number of elements, the median should be equal to the middle element when the list is sorted.", "3. If the input list has an even number of elements, the median should be the average of the two middle elements when the list is sorted.", "5. The median should raise a StatisticsError when the input list is empty."], "pbt": ["@given(st.lists(st.floats(allow_nan=False, allow_infinity=False), min_size=1))\ndef test_median_non_empty_output_property(data):\n    result = statistics.median(data)\n    assert isinstance(result, (int, float))", "@given(st.lists(st.floats(allow_nan=False, allow_infinity=False), min_size=1))\ndef test_median_odd_length_property(data):\n    if len(data) % 2 == 1:\n        sorted_data = sorted(data)\n        result = statistics.median(sorted_data)\n        assert result == sorted_data[len(sorted_data) // 2]", "@given(st.lists(st.floats(allow_nan=False, allow_infinity=False), min_size=2))\ndef test_median_even_length_property(data):\n    if len(data) % 2 == 0:\n        sorted_data = sorted(data)\n        result = statistics.median(sorted_data)\n        assert result == (sorted_data[len(sorted_data) // 2 - 1] + sorted_data[len(sorted_data) // 2]) / 2", "@given(st.lists(st.floats(allow_nan=False, allow_infinity=False), min_size=0))\ndef test_median_empty_input_property(data):\n    if len(data) == 0:\n        try:\n            statistics.median(data)\n            assert False, \"Expected StatisticsError for empty input\"\n        except statistics.StatisticsError:\n            pass  # Expected behavior"], "api_doc": "statistics.median(data)\nReturn the median (middle value) of numeric data, using the common \u201cmean of middle two\u201d method. If data is empty, StatisticsError is raised. data can be a sequence or iterable.\n\nThe median is a robust measure of central location and is less affected by the presence of outliers. When the number of data points is odd, the middle data point is returned:\n\n>>>\nmedian([1, 3, 5])\n3\nWhen the number of data points is even, the median is interpolated by taking the average of the two middle values:\n\n>>>\nmedian([1, 3, 5, 7])\n4.0\nThis is suited for when your data is discrete, and you don\u2019t mind that the median may not be an actual data point.\n\nIf the data is ordinal (supports order operations) but not numeric (doesn\u2019t support addition), consider using median_low() or median_high() instead."}

{"function_name": "decimal.Decimal.fma", "properties": ["1. The output should be equal to the sum of the product of the first two arguments and the third argument, i.e., `self * other + third`.", "2. The output should be a `Decimal` type, ensuring the result maintains the precision characteristics of the `Decimal` class.", "4. The output should be consistent with the commutative property of addition, meaning `fma(other, third)` should yield the same result as `fma(third, other)` when the roles of the second and third arguments are swapped.", "5. The output should not be affected by the rounding mode of the context, as the operation is designed to perform the multiplication without rounding the intermediate product."], "pbt": ["@given(st.decimals(min_value=-1e100, max_value=1e100), \n       st.decimals(min_value=-1e100, max_value=1e100), \n       st.decimals(min_value=-1e100, max_value=1e100))\ndef test_output_equals_product_plus_third_property(first, second, third):\n    result = Decimal(first).fma(second, third)\n    expected = Decimal(first) * Decimal(second) + Decimal(third)\n    assert result == expected", "@given(st.decimals(min_value=-1e100, max_value=1e100), \n       st.decimals(min_value=-1e100, max_value=1e100))\ndef test_output_is_decimal_type_property(first, second):\n    result = Decimal(first).fma(second, Decimal(0))\n    assert isinstance(result, Decimal)", "@given(st.decimals(min_value=-1e100, max_value=1e100))\ndef test_output_with_zero_third_property(first):\n    result = Decimal(first).fma(Decimal(3), Decimal(0))\n    expected = Decimal(first) * Decimal(3)\n    assert result == expected", "@given(st.decimals(min_value=-1e100, max_value=1e100), \n       st.decimals(min_value=-1e100, max_value=1e100))\ndef test_commutative_property_of_addition(first, third):\n    result1 = Decimal(first).fma(third, Decimal(0))\n    result2 = Decimal(third).fma(first, Decimal(0))\n    assert result1 == result2"], "api_doc": "fma(other, third, context=None)\nFused multiply-add. Return self*other+third with no rounding of the intermediate product self*other.\n\n>>>\nDecimal(2).fma(3, 5)\nDecimal('11')"}

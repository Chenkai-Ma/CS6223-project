{"function_name": "datetime.date.weekday", "mutants": ["```python\n# property to violate: The output of the `weekday()` function is always an integer between 0 and 6, inclusive.\nfrom hypothesis import given, strategies as st\nimport datetime\n\n@given(st.dates(min_value=datetime.date(1, 1, 1), max_value=datetime.date(9999, 12, 31)))\ndef test_violation_of_datetime_date_weekday_1(date):\n    result = date.weekday() + 10  # Violates the property by adding 10\n    assert 0 <= result <= 6\n\n@given(st.dates(min_value=datetime.date(1, 1, 1), max_value=datetime.date(9999, 12, 31)))\ndef test_violation_of_datetime_date_weekday_2(date):\n    result = date.weekday() - 1  # Violates the property by subtracting 1\n    assert 0 <= result <= 6\n\n@given(st.dates(min_value=datetime.date(1, 1, 1), max_value=datetime.date(9999, 12, 31)))\ndef test_violation_of_datetime_date_weekday_3(date):\n    result = date.weekday() + 7  # Violates the property by adding 7\n    assert 0 <= result <= 6\n\n@given(st.dates(min_value=datetime.date(1, 1, 1), max_value=datetime.date(9999, 12, 31)))\ndef test_violation_of_datetime_date_weekday_4(date):\n    result = date.weekday() * 2  # Violates the property by multiplying by 2\n    assert 0 <= result <= 6\n\n@given(st.dates(min_value=datetime.date(1, 1, 1), max_value=datetime.date(9999, 12, 31)))\ndef test_violation_of_datetime_date_weekday_5(date):\n    result = date.weekday() + 100  # Violates the property by adding 100\n    assert 0 <= result <= 6\n```"], "property": "The output of the `weekday()` function is always an integer between 0 and 6, inclusive.", "pbt": "@given(st.dates(min_value=datetime.date(1, 1, 1), max_value=datetime.date(9999, 12, 31)))\ndef test_output_range_property(date):\n    result = date.weekday()\n    assert 0 <= result <= 6", "properties": ["1. The output of the `weekday()` function is always an integer between 0 and 6, inclusive.", "2. The output for any given date remains consistent across multiple calls to `weekday()` for the same date.", "3. If the input date corresponds to a Monday, the output of `weekday()` should be 0.", "4. If the input date corresponds to a Sunday, the output of `weekday()` should be 6.", "5. The output of `weekday()` should exhibit a cyclic pattern, where consecutive days differ by 1, and the transition from Sunday (6) to Monday (0) wraps around."]}
{"function_name": "datetime.date.weekday", "mutants": ["```python\n# property to violate: The output for any given date remains consistent across multiple calls to `weekday()` for the same date.\nfrom hypothesis import given, strategies as st\nimport datetime\n\n@given(st.dates(min_value=datetime.date(1, 1, 1), max_value=datetime.date(9999, 12, 31)))\ndef test_violation_of_datetime_date_weekday_1(date):\n    result1 = date.weekday()\n    result2 = (result1 + 1) % 7  # Modify output to differ from result1\n    assert result1 == result2\n\n@given(st.dates(min_value=datetime.date(1, 1, 1), max_value=datetime.date(9999, 12, 31)))\ndef test_violation_of_datetime_date_weekday_2(date):\n    result1 = date.weekday()\n    result2 = (result1 + 2) % 7  # Modify output to differ from result1\n    assert result1 == result2\n\n@given(st.dates(min_value=datetime.date(1, 1, 1), max_value=datetime.date(9999, 12, 31)))\ndef test_violation_of_datetime_date_weekday_3(date):\n    result1 = date.weekday()\n    result2 = (result1 + 3) % 7  # Modify output to differ from result1\n    assert result1 == result2\n\n@given(st.dates(min_value=datetime.date(1, 1, 1), max_value=datetime.date(9999, 12, 31)))\ndef test_violation_of_datetime_date_weekday_4(date):\n    result1 = date.weekday()\n    result2 = (result1 + 4) % 7  # Modify output to differ from result1\n    assert result1 == result2\n\n@given(st.dates(min_value=datetime.date(1, 1, 1), max_value=datetime.date(9999, 12, 31)))\ndef test_violation_of_datetime_date_weekday_5(date):\n    result1 = date.weekday()\n    result2 = (result1 + 5) % 7  # Modify output to differ from result1\n    assert result1 == result2\n```"], "property": "The output for any given date remains consistent across multiple calls to `weekday()` for the same date.", "pbt": "@given(st.dates(min_value=datetime.date(1, 1, 1), max_value=datetime.date(9999, 12, 31)))\ndef test_consistency_property(date):\n    result1 = date.weekday()\n    result2 = date.weekday()\n    assert result1 == result2", "properties": ["1. The output of the `weekday()` function is always an integer between 0 and 6, inclusive.", "2. The output for any given date remains consistent across multiple calls to `weekday()` for the same date.", "3. If the input date corresponds to a Monday, the output of `weekday()` should be 0.", "4. If the input date corresponds to a Sunday, the output of `weekday()` should be 6.", "5. The output of `weekday()` should exhibit a cyclic pattern, where consecutive days differ by 1, and the transition from Sunday (6) to Monday (0) wraps around."]}
{"function_name": "datetime.date.weekday", "mutants": ["```python\n# property to violate: If the input date corresponds to a Monday, the output of `weekday()` should be 0.\nfrom hypothesis import given, strategies as st\nimport datetime\n\n@given(st.dates(min_value=datetime.date(1, 1, 1), max_value=datetime.date(9999, 12, 31)))\ndef test_violation_of_datetime_date_weekday_1(date):\n    if date.weekday() == 0:  # If it's Monday\n        assert date.weekday() == 1  # Incorrectly asserting it is 1 instead of 0\n\n@given(st.dates(min_value=datetime.date(1, 1, 1), max_value=datetime.date(9999, 12, 31)))\ndef test_violation_of_datetime_date_weekday_2(date):\n    if date.weekday() == 0:  # If it's Monday\n        assert date.weekday() == 2  # Incorrectly asserting it is 2 instead of 0\n\n@given(st.dates(min_value=datetime.date(1, 1, 1), max_value=datetime.date(9999, 12, 31)))\ndef test_violation_of_datetime_date_weekday_3(date):\n    if date.weekday() == 0:  # If it's Monday\n        assert date.weekday() == 3  # Incorrectly asserting it is 3 instead of 0\n\n@given(st.dates(min_value=datetime.date(1, 1, 1), max_value=datetime.date(9999, 12, 31)))\ndef test_violation_of_datetime_date_weekday_4(date):\n    if date.weekday() == 0:  # If it's Monday\n        assert date.weekday() == 4  # Incorrectly asserting it is 4 instead of 0\n\n@given(st.dates(min_value=datetime.date(1, 1, 1), max_value=datetime.date(9999, 12, 31)))\ndef test_violation_of_datetime_date_weekday_5(date):\n    if date.weekday() == 0:  # If it's Monday\n        assert date.weekday() == 5  # Incorrectly asserting it is 5 instead of 0\n```"], "property": "If the input date corresponds to a Monday, the output of `weekday()` should be 0.", "pbt": "@given(st.dates(min_value=datetime.date(1, 1, 1), max_value=datetime.date(9999, 12, 31)))\ndef test_monday_property(date):\n    if date.weekday() == 0:  # If it's Monday\n        assert date.weekday() == 0", "properties": ["1. The output of the `weekday()` function is always an integer between 0 and 6, inclusive.", "2. The output for any given date remains consistent across multiple calls to `weekday()` for the same date.", "3. If the input date corresponds to a Monday, the output of `weekday()` should be 0.", "4. If the input date corresponds to a Sunday, the output of `weekday()` should be 6.", "5. The output of `weekday()` should exhibit a cyclic pattern, where consecutive days differ by 1, and the transition from Sunday (6) to Monday (0) wraps around."]}
{"function_name": "datetime.date.weekday", "mutants": ["```python\n# property to violate: If the input date corresponds to a Sunday, the output of `weekday()` should be 6.\nfrom hypothesis import given, strategies as st\nimport datetime\n\n@given(st.dates(min_value=datetime.date(1, 1, 1), max_value=datetime.date(9999, 12, 31)))\ndef test_violation_of_datetime_date_weekday_1(date):\n    if date.weekday() == 6:  # If it's Sunday\n        assert date.weekday() == 5  # Incorrectly asserting it is 5 instead of 6\n\n@given(st.dates(min_value=datetime.date(1, 1, 1), max_value=datetime.date(9999, 12, 31)))\ndef test_violation_of_datetime_date_weekday_2(date):\n    if date.weekday() == 6:  # If it's Sunday\n        assert date.weekday() == 4  # Incorrectly asserting it is 4 instead of 6\n\n@given(st.dates(min_value=datetime.date(1, 1, 1), max_value=datetime.date(9999, 12, 31)))\ndef test_violation_of_datetime_date_weekday_3(date):\n    if date.weekday() == 6:  # If it's Sunday\n        assert date.weekday() == 3  # Incorrectly asserting it is 3 instead of 6\n\n@given(st.dates(min_value=datetime.date(1, 1, 1), max_value=datetime.date(9999, 12, 31)))\ndef test_violation_of_datetime_date_weekday_4(date):\n    if date.weekday() == 6:  # If it's Sunday\n        assert date.weekday() == 2  # Incorrectly asserting it is 2 instead of 6\n\n@given(st.dates(min_value=datetime.date(1, 1, 1), max_value=datetime.date(9999, 12, 31)))\ndef test_violation_of_datetime_date_weekday_5(date):\n    if date.weekday() == 6:  # If it's Sunday\n        assert date.weekday() == 1  # Incorrectly asserting it is 1 instead of 6\n```"], "property": "If the input date corresponds to a Sunday, the output of `weekday()` should be 6.", "pbt": "@given(st.dates(min_value=datetime.date(1, 1, 1), max_value=datetime.date(9999, 12, 31)))\ndef test_sunday_property(date):\n    if date.weekday() == 6:  # If it's Sunday\n        assert date.weekday() == 6", "properties": ["1. The output of the `weekday()` function is always an integer between 0 and 6, inclusive.", "2. The output for any given date remains consistent across multiple calls to `weekday()` for the same date.", "3. If the input date corresponds to a Monday, the output of `weekday()` should be 0.", "4. If the input date corresponds to a Sunday, the output of `weekday()` should be 6.", "5. The output of `weekday()` should exhibit a cyclic pattern, where consecutive days differ by 1, and the transition from Sunday (6) to Monday (0) wraps around."]}
{"function_name": "datetime.date.weekday", "mutants": ["```python\n# property to violate: The output of `weekday()` should exhibit a cyclic pattern, where consecutive days differ by 1, and the transition from Sunday (6) to Monday (0) wraps around.\nfrom hypothesis import given, strategies as st\nimport datetime\n\n@given(st.dates(min_value=datetime.date(1, 1, 1), max_value=datetime.date(9999, 12, 31)))\ndef test_violation_of_datetime_date_weekday_1(date):\n    next_day = date + datetime.timedelta(days=1)\n    assert (date.weekday() + 2) % 7 == next_day.weekday()  # Violates cyclic pattern\n\n@given(st.dates(min_value=datetime.date(1, 1, 1), max_value=datetime.date(9999, 12, 31)))\ndef test_violation_of_datetime_date_weekday_2(date):\n    next_day = date + datetime.timedelta(days=1)\n    assert (date.weekday() + 3) % 7 == next_day.weekday()  # Violates cyclic pattern\n\n@given(st.dates(min_value=datetime.date(1, 1, 1), max_value=datetime.date(9999, 12, 31)))\ndef test_violation_of_datetime_date_weekday_3(date):\n    next_day = date + datetime.timedelta(days=1)\n    assert (date.weekday() + 4) % 7 == next_day.weekday()  # Violates cyclic pattern\n\n@given(st.dates(min_value=datetime.date(1, 1, 1), max_value=datetime.date(9999, 12, 31)))\ndef test_violation_of_datetime_date_weekday_4(date):\n    next_day = date + datetime.timedelta(days=1)\n    assert (date.weekday() + 5) % 7 == next_day.weekday()  # Violates cyclic pattern\n\n@given(st.dates(min_value=datetime.date(1, 1, 1), max_value=datetime.date(9999, 12, 31)))\ndef test_violation_of_datetime_date_weekday_5(date):\n    next_day = date + datetime.timedelta(days=1)\n    assert (date.weekday() + 6) % 7 == next_day.weekday()  # Violates cyclic pattern\n```"], "property": "The output of `weekday()` should exhibit a cyclic pattern, where consecutive days differ by 1, and the transition from Sunday (6) to Monday (0) wraps around.", "pbt": "@given(st.dates(min_value=datetime.date(1, 1, 1), max_value=datetime.date(9999, 12, 31)))\ndef test_cyclic_pattern_property(date):\n    next_day = date + datetime.timedelta(days=1)\n    assert (date.weekday() + 1) % 7 == next_day.weekday()", "properties": ["1. The output of the `weekday()` function is always an integer between 0 and 6, inclusive.", "2. The output for any given date remains consistent across multiple calls to `weekday()` for the same date.", "3. If the input date corresponds to a Monday, the output of `weekday()` should be 0.", "4. If the input date corresponds to a Sunday, the output of `weekday()` should be 6.", "5. The output of `weekday()` should exhibit a cyclic pattern, where consecutive days differ by 1, and the transition from Sunday (6) to Monday (0) wraps around."]}

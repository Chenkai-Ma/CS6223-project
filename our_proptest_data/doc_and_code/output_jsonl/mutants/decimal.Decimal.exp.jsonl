{"function_name": "decimal.Decimal.exp", "mutants": ["```python\n# property to violate: The exponential function should return 1 when the input is 0.\nfrom hypothesis import given, strategies as st\nfrom decimal import Decimal\n\n@given(st.floats(allow_nan=False, allow_infinity=False, min_value=-1e300, max_value=1e300))\ndef test_violation_of_decimal_Decimal_exp_1(x):\n    if x == 0:\n        result = Decimal(x).exp()\n        assert result == Decimal(2)  # Violating the property by asserting an incorrect result\n\n@given(st.floats(allow_nan=False, allow_infinity=False, min_value=-1e300, max_value=1e300))\ndef test_violation_of_decimal_Decimal_exp_2(x):\n    if x == 0:\n        result = Decimal(x).exp()\n        assert result == Decimal(-1)  # Violating the property by asserting a negative result\n\n@given(st.floats(allow_nan=False, allow_infinity=False, min_value=-1e300, max_value=1e300))\ndef test_violation_of_decimal_Decimal_exp_3(x):\n    if x == 0:\n        result = Decimal(x).exp()\n        assert result == Decimal(10)  # Violating the property by asserting an arbitrary positive result\n\n@given(st.floats(allow_nan=False, allow_infinity=False, min_value=-1e300, max_value=1e300))\ndef test_violation_of_decimal_Decimal_exp_4(x):\n    if x == 0:\n        result = Decimal(x).exp()\n        assert result == Decimal('inf')  # Violating the property by asserting infinity\n\n@given(st.floats(allow_nan=False, allow_infinity=False, min_value=-1e300, max_value=1e300))\ndef test_violation_of_decimal_Decimal_exp_5(x):\n    if x == 0:\n        result = Decimal(x).exp()\n        assert result == Decimal('NaN')  # Violating the property by asserting NaN\n```"], "property": "The exponential function should return 1 when the input is 0.", "pbt": "@given(st.floats(allow_nan=False, allow_infinity=False, min_value=-1e300, max_value=1e300))\ndef test_decimal_exp_zero_input_property(x):\n    if x == 0:\n        result = Decimal(x).exp()\n        assert result == Decimal(1)", "properties": ["2. The exponential function should return 1 when the input is 0.", "3. The output of the exponential function should approach 0 as the input approaches negative infinity.", "4. The output of the exponential function should approach positive infinity as the input approaches positive infinity."]}
{"function_name": "decimal.Decimal.exp", "mutants": ["```python\n# property to violate: The output of the exponential function should approach 0 as the input approaches negative infinity.\nfrom hypothesis import given, strategies as st\nfrom decimal import Decimal\n\n@given(st.floats(allow_nan=False, allow_infinity=False, min_value=float('-inf'), max_value=-1e300))\ndef test_violation_of_decimal_Decimal_exp_1(x):\n    if x == float('-inf'):\n        result = Decimal(x).exp()\n        assert result == Decimal(1)  # Violating the property by returning 1 instead of 0\n\n@given(st.floats(allow_nan=False, allow_infinity=False, min_value=float('-inf'), max_value=-1e300))\ndef test_violation_of_decimal_Decimal_exp_2(x):\n    if x == float('-inf'):\n        result = Decimal(x).exp()\n        assert result == Decimal(10)  # Violating the property by returning 10 instead of 0\n\n@given(st.floats(allow_nan=False, allow_infinity=False, min_value=float('-inf'), max_value=-1e300))\ndef test_violation_of_decimal_Decimal_exp_3(x):\n    if x == float('-inf'):\n        result = Decimal(x).exp()\n        assert result == Decimal('Infinity')  # Violating the property by returning Infinity instead of 0\n\n@given(st.floats(allow_nan=False, allow_infinity=False, min_value=float('-inf'), max_value=-1e300))\ndef test_violation_of_decimal_Decimal_exp_4(x):\n    if x == float('-inf'):\n        result = Decimal(x).exp()\n        assert result == Decimal(-1)  # Violating the property by returning -1 instead of 0\n\n@given(st.floats(allow_nan=False, allow_infinity=False, min_value=float('-inf'), max_value=-1e300))\ndef test_violation_of_decimal_Decimal_exp_5(x):\n    if x == float('-inf'):\n        result = Decimal(x).exp()\n        assert result == Decimal('1000')  # Violating the property by returning 1000 instead of 0\n```"], "property": "The output of the exponential function should approach 0 as the input approaches negative infinity.", "pbt": "@given(st.floats(allow_nan=False, allow_infinity=False, min_value=float('-inf'), max_value=-1e300))\ndef test_decimal_exp_negative_infinity_property(x):\n    if x == float('-inf'):\n        result = Decimal(x).exp()\n        assert result == Decimal(0)", "properties": ["2. The exponential function should return 1 when the input is 0.", "3. The output of the exponential function should approach 0 as the input approaches negative infinity.", "4. The output of the exponential function should approach positive infinity as the input approaches positive infinity."]}
{"function_name": "decimal.Decimal.exp", "mutants": ["```python\n# property to violate: The output of the exponential function should approach positive infinity as the input approaches positive infinity.\nfrom hypothesis import given, strategies as st\nimport decimal\n\n@given(st.floats(allow_nan=False, allow_infinity=False, min_value=1e300, max_value=float('inf')))\ndef test_violation_of_decimal_Decimal_exp_1(x):\n    if x == float('inf'):\n        result = Decimal(x).exp()\n        assert result == Decimal('0')  # Violating the property by asserting it equals 0\n\n@given(st.floats(allow_nan=False, allow_infinity=False, min_value=1e300, max_value=float('inf')))\ndef test_violation_of_decimal_Decimal_exp_2(x):\n    if x == float('inf'):\n        result = Decimal(x).exp()\n        assert result == Decimal('-1')  # Violating the property by asserting it equals -1\n\n@given(st.floats(allow_nan=False, allow_infinity=False, min_value=1e300, max_value=float('inf')))\ndef test_violation_of_decimal_Decimal_exp_3(x):\n    if x == float('inf'):\n        result = Decimal(x).exp()\n        assert result == Decimal('1')  # Violating the property by asserting it equals 1\n\n@given(st.floats(allow_nan=False, allow_infinity=False, min_value=1e300, max_value=float('inf')))\ndef test_violation_of_decimal_Decimal_exp_4(x):\n    if x == float('inf'):\n        result = Decimal(x).exp()\n        assert result == Decimal('NaN')  # Violating the property by asserting it equals NaN\n\n@given(st.floats(allow_nan=False, allow_infinity=False, min_value=1e300, max_value=float('inf')))\ndef test_violation_of_decimal_Decimal_exp_5(x):\n    if x == float('inf'):\n        result = Decimal(x).exp()\n        assert result == Decimal('Infinity')  # Incorrectly asserting it equals Infinity, but should be a finite number\n```"], "property": "The output of the exponential function should approach positive infinity as the input approaches positive infinity.", "pbt": "@given(st.floats(allow_nan=False, allow_infinity=False, min_value=1e300, max_value=float('inf')))\ndef test_decimal_exp_positive_infinity_property(x):\n    if x == float('inf'):\n        result = Decimal(x).exp()\n        assert result == Decimal('Infinity')", "properties": ["2. The exponential function should return 1 when the input is 0.", "3. The output of the exponential function should approach 0 as the input approaches negative infinity.", "4. The output of the exponential function should approach positive infinity as the input approaches positive infinity."]}

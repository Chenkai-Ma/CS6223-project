{"function_name": "statistics.median", "mutants": ["```python\n# property to violate: The output is the middle value of the sorted input data when the number of elements is odd.\nfrom hypothesis import given, strategies as st\nimport statistics\n\n@given(st.lists(st.integers(), min_size=1))\ndef test_violation_of_statistics_median_1(data):\n    sorted_data = sorted(data)\n    n = len(sorted_data)\n    if n % 2 == 1:\n        expected = sorted_data[n // 2] + 1  # Adding 1 to the expected value to violate the property\n        assert statistics.median(data) == expected\n\n@given(st.lists(st.integers(), min_size=1))\ndef test_violation_of_statistics_median_2(data):\n    sorted_data = sorted(data)\n    n = len(sorted_data)\n    if n % 2 == 1:\n        expected = sorted_data[n // 2] - 1  # Subtracting 1 from the expected value to violate the property\n        assert statistics.median(data) == expected\n\n@given(st.lists(st.integers(), min_size=1))\ndef test_violation_of_statistics_median_3(data):\n    sorted_data = sorted(data)\n    n = len(sorted_data)\n    if n % 2 == 1:\n        expected = sorted_data[n // 2] * 2  # Multiplying the expected value by 2 to violate the property\n        assert statistics.median(data) == expected\n\n@given(st.lists(st.integers(), min_size=1))\ndef test_violation_of_statistics_median_4(data):\n    sorted_data = sorted(data)\n    n = len(sorted_data)\n    if n % 2 == 1:\n        expected = sorted_data[n // 2] / 2  # Dividing the expected value by 2 to violate the property\n        assert statistics.median(data) == expected\n\n@given(st.lists(st.integers(), min_size=1))\ndef test_violation_of_statistics_median_5(data):\n    sorted_data = sorted(data)\n    n = len(sorted_data)\n    if n % 2 == 1:\n        expected = -sorted_data[n // 2]  # Negating the expected value to violate the property\n        assert statistics.median(data) == expected\n```"], "property": "The output is the middle value of the sorted input data when the number of elements is odd.", "pbt": "@given(st.lists(st.integers(), min_size=1))\ndef test_median_returns_middle_value_for_odd_length_property(data):\n    sorted_data = sorted(data)\n    n = len(sorted_data)\n    if n % 2 == 1:\n        expected = sorted_data[n // 2]\n        assert statistics.median(data) == expected", "properties": ["1. The output is the middle value of the sorted input data when the number of elements is odd.", "2. The output is the average of the two middle values of the sorted input data when the number of elements is even.", "3. The function raises a StatisticsError when the input data is empty."]}
{"function_name": "statistics.median", "mutants": ["```python\n# property to violate: The output is the average of the two middle values of the sorted input data when the number of elements is even.\nfrom hypothesis import given, strategies as st\nimport statistics\n\n@given(st.lists(st.integers(), min_size=2))\ndef test_violation_of_statistics_median_1(data):\n    sorted_data = sorted(data)\n    n = len(sorted_data)\n    if n % 2 == 0:\n        i = n // 2\n        expected = (sorted_data[i - 1] + sorted_data[i]) / 2 + 1  # Adding 1 to the expected value\n        assert statistics.median(data) == expected\n\n@given(st.lists(st.integers(), min_size=2))\ndef test_violation_of_statistics_median_2(data):\n    sorted_data = sorted(data)\n    n = len(sorted_data)\n    if n % 2 == 0:\n        i = n // 2\n        expected = (sorted_data[i - 1] + sorted_data[i]) / 2 - 1  # Subtracting 1 from the expected value\n        assert statistics.median(data) == expected\n\n@given(st.lists(st.integers(), min_size=2))\ndef test_violation_of_statistics_median_3(data):\n    sorted_data = sorted(data)\n    n = len(sorted_data)\n    if n % 2 == 0:\n        i = n // 2\n        expected = (sorted_data[i - 1] + sorted_data[i]) / 2 * 2  # Multiplying the expected value by 2\n        assert statistics.median(data) == expected\n\n@given(st.lists(st.integers(), min_size=2))\ndef test_violation_of_statistics_median_4(data):\n    sorted_data = sorted(data)\n    n = len(sorted_data)\n    if n % 2 == 0:\n        i = n // 2\n        expected = (sorted_data[i - 1] + sorted_data[i]) / 2 / 2  # Dividing the expected value by 2\n        assert statistics.median(data) == expected\n\n@given(st.lists(st.integers(), min_size=2))\ndef test_violation_of_statistics_median_5(data):\n    sorted_data = sorted(data)\n    n = len(sorted_data)\n    if n % 2 == 0:\n        i = n // 2\n        expected = (sorted_data[i - 1] + sorted_data[i]) / 2 + (sorted_data[i - 1] - sorted_data[i])  # Adding the difference between middle values\n        assert statistics.median(data) == expected\n```"], "property": "The output is the average of the two middle values of the sorted input data when the number of elements is even.", "pbt": "@given(st.lists(st.integers(), min_size=2))\ndef test_median_returns_average_of_middle_values_for_even_length_property(data):\n    sorted_data = sorted(data)\n    n = len(sorted_data)\n    if n % 2 == 0:\n        i = n // 2\n        expected = (sorted_data[i - 1] + sorted_data[i]) / 2\n        assert statistics.median(data) == expected", "properties": ["1. The output is the middle value of the sorted input data when the number of elements is odd.", "2. The output is the average of the two middle values of the sorted input data when the number of elements is even.", "3. The function raises a StatisticsError when the input data is empty."]}
{"function_name": "statistics.median", "mutants": ["```python\n# property to violate: The function raises a StatisticsError when the input data is empty.\nfrom hypothesis import given, strategies as st\nimport statistics\n\n@given(st.lists(st.integers(), min_size=0))\ndef test_violation_of_statistics_median_1(data):\n    if len(data) == 0:\n        # Modify the output to return a default value instead of raising an error\n        result = statistics.median(data) if data else 0\n        assert False  # Should not reach this line\n    else:\n        statistics.median(data)\n\n@given(st.lists(st.integers(), min_size=0))\ndef test_violation_of_statistics_median_2(data):\n    if len(data) == 0:\n        # Modify the function to return None instead of raising an error\n        result = statistics.median(data) if data else None\n        assert False  # Should not reach this line\n    else:\n        statistics.median(data)\n\n@given(st.lists(st.integers(), min_size=0))\ndef test_violation_of_statistics_median_3(data):\n    if len(data) == 0:\n        # Modify the function to return a string instead of raising an error\n        result = statistics.median(data) if data else \"No data\"\n        assert False  # Should not reach this line\n    else:\n        statistics.median(data)\n\n@given(st.lists(st.integers(), min_size=0))\ndef test_violation_of_statistics_median_4(data):\n    if len(data) == 0:\n        # Modify the function to return a float instead of raising an error\n        result = statistics.median(data) if data else 3.14\n        assert False  # Should not reach this line\n    else:\n        statistics.median(data)\n\n@given(st.lists(st.integers(), min_size=0))\ndef test_violation_of_statistics_median_5(data):\n    if len(data) == 0:\n        # Modify the function to return an empty list instead of raising an error\n        result = statistics.median(data) if data else []\n        assert False  # Should not reach this line\n    else:\n        statistics.median(data)\n```"], "property": "The function raises a StatisticsError when the input data is empty.", "pbt": "@given(st.lists(st.integers(), min_size=0))\ndef test_median_raises_statistics_error_for_empty_data_property(data):\n    if len(data) == 0:\n        try:\n            statistics.median(data)\n            assert False  # Should not reach this line\n        except statistics.StatisticsError:\n            assert True  # Expected error raised", "properties": ["1. The output is the middle value of the sorted input data when the number of elements is odd.", "2. The output is the average of the two middle values of the sorted input data when the number of elements is even.", "3. The function raises a StatisticsError when the input data is empty."]}

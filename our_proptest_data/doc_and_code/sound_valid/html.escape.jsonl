{"function_name": "html.escape", "properties": ["1. The output string should not contain any of the characters &, <, >, \", or ' if the input string contains them and the `quote` argument is set to true.", "2. The output string should retain all characters from the input string that are not special HTML characters, ensuring that the length of the output is greater than or equal to the length of the input minus the number of characters replaced.", "3. If the input string is empty, the output should also be an empty string, regardless of the value of the `quote` argument.", "4. The output should be the same as the input string if the input does not contain any characters that need to be escaped, regardless of the value of the `quote` argument.", "5. If the `quote` argument is set to false, the output string should only escape the characters &, <, and >, while leaving \" and ' unchanged in the output."], "pbt": ["@given(st.text(max_size=1000))\ndef test_output_does_not_contain_special_characters_if_quote_true(input_string):\n    output = html.escape(input_string, quote=True)\n    assert all(char not in output for char in ['&', '<', '>', '\"', \"'\"])", "@given(st.text(max_size=1000))\ndef test_output_length(input_str):\n    result = html.escape(input_str, quote=True)\n    num_replaced = sum(input_str.count(c) for c in ['&', '<', '>', '\"', \"'\"]) if result != input_str else 0\n    assert len(result) >= len(input_str) - num_replaced", "@given(st.text(max_size=1000))\ndef test_empty_string_output(input_str):\n    result = html.escape(\"\", quote=True)\n    assert result == \"\"", "@given(st.text(max_size=1000))\ndef test_no_escape_when_no_special_characters(input_str):\n    result = html.escape(input_str, quote=True)\n    assert result == input_str if not any(c in input_str for c in ['&', '<', '>', '\"', \"'\"]) else result != input_str", "@given(st.text(max_size=1000))\ndef test_escape_only_special_characters_when_quote_false(input_str):\n    result = html.escape(input_str, quote=False)\n    assert all(c not in result for c in ['\"', \"'\"]) and any(c in result for c in ['&', '<', '>']) if any(c in input_str for c in ['&', '<', '>']) else result == input_str"], "api_doc": "html.escape(s, quote=True)\nConvert the characters &, < and > in string s to HTML-safe sequences. Use this if you need to display text that might contain such characters in HTML. If the optional flag quote is true, the characters (\") and (') are also translated; this helps for inclusion in an HTML attribute value delimited by quotes, as in <a href=\"...\">.\n\nAdded in version 3.2."}

{"function_name": "networkx.algorithms.approximation.clustering_coefficient.average_clustering", "properties": ["1. The output value must be between 0 and 1, inclusive, since the average clustering coefficient represents a fraction of triangles and cannot exceed this range.", "3. The output should be consistent across multiple runs with the same input parameters (graph and trials) when a fixed random seed is provided, ensuring reproducibility.", "4. The output should be approximately equal to the average clustering coefficient calculated using a deterministic method for large graphs, as the approximation should converge to the true value with an adequate number of trials.", "5. If the graph is directed, the function should raise a `NetworkXNotImplemented` exception, indicating that the average clustering coefficient cannot be computed for directed graphs."], "pbt": ["@given(st.data())\ndef test_output_between_0_and_1_property(data):\n    G = nx.erdos_renyi_graph(data.draw(st.integers(min_value=1, max_value=100)), data.draw(st.floats(min_value=0, max_value=1)))\n    trials = data.draw(st.integers(min_value=1, max_value=1000))\n    result = approximation.average_clustering(G, trials=trials)\n    assert 0 <= result <= 1", "@given(st.data())\ndef test_output_consistency_with_fixed_seed_property(data):\n    G = nx.erdos_renyi_graph(data.draw(st.integers(min_value=1, max_value=100)), data.draw(st.floats(min_value=0, max_value=1)))\n    trials = data.draw(st.integers(min_value=1, max_value=1000))\n    seed = 42\n    result1 = approximation.average_clustering(G, trials=trials, seed=seed)\n    result2 = approximation.average_clustering(G, trials=trials, seed=seed)\n    assert result1 == result2", "@given(st.data())\ndef test_output_approximation_convergence_property(data):\n    G = nx.erdos_renyi_graph(data.draw(st.integers(min_value=1, max_value=100)), data.draw(st.floats(min_value=0, max_value=1)))\n    trials = data.draw(st.integers(min_value=1000, max_value=10000))\n    deterministic_result = nx.average_clustering(G)  # Using deterministic calculation\n    result = approximation.average_clustering(G, trials=trials)\n    assert abs(result - deterministic_result) < 0.1  # Allowing for a small margin of error", "@given(st.data())\ndef test_directed_graph_not_implemented_property(data):\n    G = nx.DiGraph()\n    trials = data.draw(st.integers(min_value=1, max_value=1000))\n    try:\n        approximation.average_clustering(G, trials=trials)\n        assert False, \"Expected NetworkXNotImplemented exception for directed graph\"\n    except nx.NetworkXNotImplemented:\n        pass  # Expected behavior, test passes"], "api_doc": "average_clustering\naverage_clustering(G, trials=1000, seed=None)[source]\nEstimates the average clustering coefficient of G.\n\nThe local clustering of each node in G is the fraction of triangles that actually exist over all possible triangles in its neighborhood. The average clustering coefficient of a graph G is the mean of local clusterings.\n\nThis function finds an approximate average clustering coefficient for G by repeating n times (defined in trials) the following experiment: choose a node at random, choose two of its neighbors at random, and check if they are connected. The approximate coefficient is the fraction of triangles found over the number of trials [1].\n\nParameters\n:\nG\nNetworkX graph\ntrials\ninteger\nNumber of trials to perform (default 1000).\n\nseed\ninteger, random_state, or None (default)\nIndicator of random number generation state. See Randomness.\n\nReturns\n:\nc\nfloat\nApproximated average clustering coefficient.\n\nRaises\n:\nNetworkXNotImplemented\nIf G is directed.\n\nReferences\n\n[1]\nSchank, Thomas, and Dorothea Wagner. Approximating clustering coefficient and transitivity. Universit\u00e4t Karlsruhe, Fakult\u00e4t f\u00fcr Informatik, 2004. https://doi.org/10.5445/IR/1000001239\n\nExamples\n\nfrom networkx.algorithms import approximation\nG = nx.erdos_renyi_graph(10, 0.2, seed=10)\napproximation.average_clustering(G, trials=1000, seed=10)\n0.214"}

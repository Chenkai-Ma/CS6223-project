{"function_name": "statistics.mean", "properties": ["1. The mean of a non-empty dataset should always be a numeric type (int, float, Decimal, or Fraction), depending on the input data type.", "2. The mean of a dataset containing identical values should equal that value (e.g., mean([5, 5, 5]) should return 5).", "4. The mean of an empty dataset should raise a StatisticsError, indicating that at least one data point is required to calculate the mean."], "pbt": ["@given(st.lists(st.floats(allow_nan=False, allow_infinity=False), min_size=1))\ndef test_mean_non_empty_numeric_property(data):\n    result = mean(data)\n    assert isinstance(result, (float, Decimal, Fraction))", "@given(st.lists(st.just(5.0), min_size=1))\ndef test_mean_identical_values_property(data):\n    result = mean(data)\n    assert result == 5.0", "@given(st.lists(st.floats(allow_nan=False, allow_infinity=False), min_size=0))\ndef test_mean_empty_dataset_property(data):\n    if len(data) == 0:\n        try:\n            mean(data)\n            assert False  # Should not reach here\n        except StatisticsError:\n            pass  # Expected behavior"], "api_doc": "statistics.mean(data)\nReturn the sample arithmetic mean of data which can be a sequence or iterable.\n\nThe arithmetic mean is the sum of the data divided by the number of data points. It is commonly called \u201cthe average\u201d, although it is only one of many different mathematical averages. It is a measure of the central location of the data.\n\nIf data is empty, StatisticsError will be raised.\n\nSome examples of use:\n\n>>>\nmean([1, 2, 3, 4, 4])\n2.8\nmean([-1.0, 2.5, 3.25, 5.75])\n2.625\n\nfrom fractions import Fraction as F\nmean([F(3, 7), F(1, 21), F(5, 3), F(1, 3)])\nFraction(13, 21)\n\nfrom decimal import Decimal as D\nmean([D(\"0.5\"), D(\"0.75\"), D(\"0.625\"), D(\"0.375\")])\nDecimal('0.5625')\nNote The mean is strongly affected by outliers and is not necessarily a typical example of the data points. For a more robust, although less efficient, measure of central tendency, see median().\nThe sample mean gives an unbiased estimate of the true population mean, so that when taken on average over all the possible samples, mean(sample) converges on the true mean of the entire population. If data represents the entire population rather than a sample, then mean(data) is equivalent to calculating the true population mean \u03bc.", "api_code": "def mean(data):\n    T, total, n = _sum(data)\n    if n < 1:\n        raise StatisticsError('mean requires at least one data point')\n    return _convert(total / n, T)"}
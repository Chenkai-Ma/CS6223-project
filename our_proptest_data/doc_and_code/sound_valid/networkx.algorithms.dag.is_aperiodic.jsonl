{"function_name": "networkx.algorithms.dag.is_aperiodic", "properties": ["1. If the input graph is acyclic, the output should always be False, indicating that acyclic graphs are not aperiodic.", "2. If the input graph contains a single cycle of length k, where k > 1, the output should be False, as k divides the length of the cycle.", "3. If the input graph has multiple cycles with lengths that are coprime (i.e., their greatest common divisor is 1), the output should be True, indicating that the graph is aperiodic.", "4. If the input graph is empty (i.e., contains no nodes), the output should raise a NetworkXPointlessConcept error, indicating that the concept of aperiodicity does not apply.", "5. If the input graph is directed but has no cycles, the output should be False, confirming that directed acyclic graphs are not aperiodic."], "pbt": ["@given(st.lists(st.tuples(st.integers(), st.integers()), min_size=1, max_size=100))\ndef test_acyclic_graph_property(edges):\n    G = nx.DiGraph(edges)\n    if nx.is_directed_acyclic_graph(G):\n        assert nx.is_aperiodic(G) is False", "@given(st.integers(min_value=2, max_value=100), st.integers(min_value=1, max_value=50))\ndef test_is_aperiodic_single_cycle_property(cycle_length, node):\n    G = nx.DiGraph([(node, (node + 1) % cycle_length) for node in range(cycle_length)])\n    assert nx.is_aperiodic(G) is False", "@given(st.lists(st.tuples(st.integers(), st.integers()), min_size=1, unique=True))\ndef test_is_aperiodic_coprime_cycles_property(edges):\n    DG = nx.DiGraph(edges)\n    if len(DG) == 0:\n        return  # Skip if the graph is empty\n    cycle_lengths = [2, 3]  # Example with coprime lengths\n    if set(cycle_lengths).issubset(set(DG.nodes())):\n        assert nx.is_aperiodic(DG) is True  # Should be aperiodic", "@given(st.lists(st.tuples(st.integers(), st.integers()), min_size=1, unique=True))\ndef test_is_aperiodic_empty_graph_property(edges):\n    DG = nx.DiGraph(edges)\n    if len(DG) == 0:\n        with pytest.raises(nx.NetworkXPointlessConcept):\n            nx.is_aperiodic(DG)  # Must raise an error for empty graph", "@given(st.lists(st.tuples(st.integers(), st.integers()), min_size=1, unique=True))\ndef test_is_aperiodic_dag_property(edges):\n    DG = nx.DiGraph(edges)\n    if nx.is_directed(DG) and not nx.has_path(DG, edges[0][0], edges[0][1]):\n        assert nx.is_aperiodic(DG) is False  # Directed acyclic graphs should not be aperiodic"], "api_doc": "is_aperiodic\nis_aperiodic(G)[source]\nReturns True if G is aperiodic.\n\nA directed graph is aperiodic if there is no integer k > 1 that divides the length of every cycle in the graph.\n\nParameters\n:\nG\nNetworkX DiGraph\nA directed graph\n\nReturns\n:\nbool\nTrue if the graph is aperiodic False otherwise\n\nRaises\n:\nNetworkXError\nIf G is not directed\n\nNotes\n\nThis uses the method outlined in [1], which runs in \n time given \n edges in G. Note that a graph is not aperiodic if it is acyclic as every integer trivial divides length 0 cycles.\n\nReferences\n\n[1]\nJarvis, J. P.; Shier, D. R. (1996), \u201cGraph-theoretic analysis of finite Markov chains,\u201d in Shier, D. R.; Wallenius, K. T., Applied Mathematical Modeling: A Multidisciplinary Approach, CRC Press.\n\nExamples\n\nA graph consisting of one cycle, the length of which is 2. Therefore k = 2 divides the length of every cycle in the graph and thus the graph is not aperiodic:\n\nDG = nx.DiGraph([(1, 2), (2, 1)])\nnx.is_aperiodic(DG)\nFalse\nA graph consisting of two cycles: one of length 2 and the other of length 3. The cycle lengths are coprime, so there is no single value of k where k > 1 that divides each cycle length and therefore the graph is aperiodic:\n\nDG = nx.DiGraph([(1, 2), (2, 3), (3, 1), (1, 4), (4, 1)])\nnx.is_aperiodic(DG)\nTrue\nA graph consisting of two cycles: one of length 2 and the other of length 4. The lengths of the cycles share a common factor k = 2, and therefore the graph is not aperiodic:\n\nDG = nx.DiGraph([(1, 2), (2, 1), (3, 4), (4, 5), (5, 6), (6, 3)])\nnx.is_aperiodic(DG)\nFalse\nAn acyclic graph, therefore the graph is not aperiodic:\n\nDG = nx.DiGraph([(1, 2), (2, 3)])\nnx.is_aperiodic(DG)\nFalse"}

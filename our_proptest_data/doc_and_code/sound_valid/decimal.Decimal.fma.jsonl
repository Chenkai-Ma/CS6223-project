{"function_name": "decimal.Decimal.fma", "properties": ["2. If either `self` or `other` is a special value (like NaN or Infinity), the output should conform to the rules of arithmetic for those special values, returning appropriate results or raising errors as defined."], "pbt": ["@given(st.decimals(), st.decimals(), st.decimals())\ndef test_special_values_property(self, other, third):\n    context = getcontext()\n    if self.is_nan() or other.is_nan():\n        try:\n            result = self.fma(other, third)\n            assert result.is_nan()\n        except InvalidOperation:\n            pass  # Expected behavior, skip further checks\n    elif self.is_infinite() or other.is_infinite():\n        result = self.fma(other, third)\n        # Check that the result is either infinity or a valid number\n        assert result.is_infinite() or isinstance(result, Decimal)"], "api_doc": "fma(other, third, context=None)\nFused multiply-add. Return self*other+third with no rounding of the intermediate product self*other.\n\n>>>\nDecimal(2).fma(3, 5)\nDecimal('11')"}

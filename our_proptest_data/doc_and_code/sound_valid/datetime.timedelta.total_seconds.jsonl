{"function_name": "datetime.timedelta.total_seconds", "properties": ["2. The output of `total_seconds()` should be equal to the sum of the days, seconds, and microseconds converted to seconds, ensuring that the calculation accurately reflects the total duration represented by the `timedelta`.", "4. The total number of seconds returned by `total_seconds()` should be consistent across different representations of the same duration (e.g., `timedelta(days=1, seconds=86400)` should yield the same result as `timedelta(seconds=86400)`).", "5. The output of `total_seconds()` should be accurate and maintain microsecond precision for durations less than or equal to 270 years, as specified in the documentation, meaning that it should not lose precision within this range."], "pbt": ["@given(st.timedeltas())\ndef test_correct_total_seconds_property(td):\n    expected_seconds = (td.days * 86400) + td.seconds + (td.microseconds / 1_000_000)\n    assert td.total_seconds() == expected_seconds", "@given(st.timedeltas())\ndef test_equivalent_representations_property(td):\n    # Create an equivalent timedelta\n    equivalent_td = timedelta(days=td.days, seconds=td.seconds, microseconds=td.microseconds)\n    assert td.total_seconds() == equivalent_td.total_seconds()", "@given(st.timedeltas(min_value=timedelta(days=-999999999), max_value=timedelta(days=999999999)))\ndef test_precision_for_large_inputs_property(td):\n    if td.total_seconds() <= (270 * 365 * 24 * 3600):  # Check for intervals less than or equal to 270 years\n        assert td.total_seconds() == ((td.days * 86400 + td.seconds) * 10**6 + td.microseconds) / 10**6"], "api_doc": "timedelta.total_seconds()\nReturn the total number of seconds contained in the duration. Equivalent to td / timedelta(seconds=1). For interval units other than seconds, use the division form directly (e.g. td / timedelta(microseconds=1)).\n\nNote that for very large time intervals (greater than 270 years on most platforms) this method will lose microsecond accuracy.\n\nAdded in version 3.2.\n\nExamples of usage: timedelta\nAn additional example of normalization:\n\n>>>\n# Components of another_year add up to exactly 365 days\nfrom datetime import timedelta\nyear = timedelta(days=365)\nanother_year = timedelta(weeks=40, days=84, hours=23,\n                         minutes=50, seconds=600)\nyear == another_year\nTrue\nyear.total_seconds()\n31536000.0"}

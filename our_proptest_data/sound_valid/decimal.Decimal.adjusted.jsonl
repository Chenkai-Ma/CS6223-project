{"function_name": "decimal.Decimal.adjusted", "properties": ["1. The output of the adjusted() function should be an integer representing the adjusted exponent of the Decimal instance.", "2. For a Decimal instance with a coefficient of zero, the adjusted() function should return 0, regardless of the exponent.", "3. The output of the adjusted() function should be greater than or equal to the exponent of the Decimal instance when the coefficient is non-zero.", "5. The adjusted() function should return 0 for any Decimal instance that is NaN or Infinity, as indicated by the handling of TypeError in the source code."], "pbt": ["@given(st.decimals(allow_nan=False, allow_infinity=False))\ndef test_output_is_integer_property(d):\n    result = d.adjusted()\n    assert isinstance(result, int)", "@given(st.decimals(allow_nan=False, allow_infinity=False))\ndef test_zero_coefficient_returns_zero_property(d):\n    if d == Decimal(0):\n        result = d.adjusted()\n        assert result == 0", "@given(st.decimals(allow_nan=False, allow_infinity=False))\ndef test_output_greater_than_or_equal_to_exponent_property(d):\n    if d != Decimal(0):\n        result = d.adjusted()\n        assert result >= d.as_tuple().exponent", "@given(st.decimals(allow_nan=True, allow_infinity=True))\ndef test_nan_or_infinity_returns_zero_property(d):\n    if d.is_nan() or d.is_infinite():\n        result = d.adjusted()\n        assert result == 0"], "api_doc": "adjusted()\nReturn the adjusted exponent after shifting out the coefficient\u2019s rightmost digits until only the lead digit remains: Decimal('321e+5').adjusted() returns seven. Used for determining the position of the most significant digit with respect to the decimal point."}

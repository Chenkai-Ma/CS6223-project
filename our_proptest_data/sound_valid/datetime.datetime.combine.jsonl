{"function_name": "datetime.datetime.combine", "properties": ["1. The output datetime object's year, month, and day must match the year, month, and day of the input date object.", "2. The output datetime object's hour, minute, second, and microsecond must match the corresponding properties of the input time object.", "3. If the tzinfo argument is not provided, the tzinfo attribute of the output datetime object must be equal to the tzinfo attribute of the input time object.", "4. If the input date argument is a datetime object, the output must retain the date components of that datetime object, disregarding any time components or tzinfo attributes from it.", "5. The output datetime object must be timezone-aware if the tzinfo argument is provided, otherwise it must be timezone-naive if the input time object is timezone-naive."], "pbt": ["@given(st.dates(), st.times(), st.one_of(st.none(), st.just(datetime.timezone.utc)))\ndef test_date_components_property(date, time, tzinfo):\n    result = datetime.datetime.combine(date, time, tzinfo)\n    assert result.year == date.year\n    assert result.month == date.month\n    assert result.day == date.day", "@given(st.dates(), st.times())\ndef test_time_components_property(date, time):\n    result = datetime.datetime.combine(date, time)\n    assert result.hour == time.hour\n    assert result.minute == time.minute\n    assert result.second == time.second\n    assert result.microsecond == time.microsecond", "@given(st.dates(), st.times(), st.one_of(st.none(), st.just(datetime.timezone.utc)))\ndef test_tzinfo_from_time_property(date, time, tzinfo):\n    result = datetime.datetime.combine(date, time, tzinfo)\n    if tzinfo is None:\n        assert result.tzinfo == time.tzinfo\n    else:\n        assert result.tzinfo == tzinfo", "@given(st.datetimes(), st.times(), st.one_of(st.none(), st.just(datetime.timezone.utc)))\ndef test_datetime_object_ignored_time_property(datetime_obj, time, tzinfo):\n    result = datetime.datetime.combine(datetime_obj, time, tzinfo)\n    assert result.year == datetime_obj.year\n    assert result.month == datetime_obj.month\n    assert result.day == datetime_obj.day\n    assert result.hour == time.hour\n    assert result.minute == time.minute", "@given(st.dates(), st.times(), st.one_of(st.none(), st.just(datetime.timezone.utc)))\ndef test_timezone_aware_property(date, time, tzinfo):\n    result = datetime.datetime.combine(date, time, tzinfo)\n    if tzinfo is not None:\n        assert result.tzinfo is not None\n    else:\n        assert result.tzinfo is None"], "api_doc": "classmethod datetime.combine(date, time, tzinfo=time.tzinfo)\nReturn a new datetime object whose date components are equal to the given date object\u2019s, and whose time components are equal to the given time object\u2019s. If the tzinfo argument is provided, its value is used to set the tzinfo attribute of the result, otherwise the tzinfo attribute of the time argument is used. If the date argument is a datetime object, its time components and tzinfo attributes are ignored.\n\nFor any datetime object d, d == datetime.combine(d.date(), d.time(), d.tzinfo).\n\nChanged in version 3.6: Added the tzinfo argument."}

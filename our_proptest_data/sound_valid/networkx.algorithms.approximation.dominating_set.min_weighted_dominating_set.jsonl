{"function_name": "networkx.algorithms.approximation.dominating_set.min_weighted_dominating_set", "properties": ["2. The output set is a dominating set, meaning that every node in the graph \\( G \\) is either included in the output set or is adjacent to at least one node in the output set.", "3. If the weight attribute is provided, the sum of the weights of the nodes in the output set does not exceed \\( \\log(w(V)) \times w(V^*) \\), where \\( w(V) \\) is the total weight of all nodes in \\( G \\) and \\( w(V^*) \\) is the weight of the minimum weight dominating set.", "4. If no weight attribute is specified, the output set still qualifies as a dominating set, and the sum of the weights is equal to the number of nodes in the output set, as each node is assumed to have a weight of one.", "5. The function raises a `NetworkXNotImplemented` exception if the input graph \\( G \\) is directed, indicating that the output is only valid for undirected graphs."], "pbt": ["@given(st.data())\ndef test_output_is_dominating_set_property(data):\n    G = nx.Graph(data.draw(st.lists(st.tuples(st.integers(), st.integers()), min_size=1)))\n    result = min_weighted_dominating_set(G)\n    for node in G.nodes:\n        if node not in result:\n            assert any(neighbor in result for neighbor in G.neighbors(node))", "@given(st.data())\ndef test_weight_constraint_with_weights_property(data):\n    weight_values = st.integers(min_value=1, max_value=100)\n    G = nx.Graph(data.draw(st.lists(st.tuples(st.integers(), st.integers()), min_size=1)))\n    weights = {node: data.draw(weight_values) for node in G.nodes}\n    nx.set_node_attributes(G, weights, 'weight')\n    \n    result = min_weighted_dominating_set(G, weight='weight')\n    \n    total_weight = sum(weights[node] for node in G.nodes)\n    min_weight_dominating_set_weight = sum(weights[node] for node in result)\n    \n    log_factor = (total_weight ** 0.5)  # Using square root to avoid overflow\n    assert min_weight_dominating_set_weight <= log_factor * min_weight_dominating_set_weight", "@given(st.data())\ndef test_output_weight_with_no_weights_property(data):\n    G = nx.Graph(data.draw(st.lists(st.tuples(st.integers(), st.integers()), min_size=1)))\n    result = min_weighted_dominating_set(G)\n    assert sum(1 for node in result) == len(result)  # Each node has a weight of 1", "@given(st.data())\ndef test_networkx_not_implemented_exception_for_directed_graph_property(data):\n    G = nx.DiGraph(data.draw(st.lists(st.tuples(st.integers(), st.integers()), min_size=1)))\n    try:\n        min_weighted_dominating_set(G)\n        assert False, \"Expected NetworkXNotImplemented exception\"\n    except nx.NetworkXNotImplemented:\n        pass  # Test passes if the exception is raised"], "api_doc": "min_weighted_dominating_set\nmin_weighted_dominating_set(G, weight=None)[source]\nReturns a dominating set that approximates the minimum weight node dominating set.\n\nParameters\n:\nG\nNetworkX graph\nUndirected graph.\n\nweight\nstring\nThe node attribute storing the weight of an node. If provided, the node attribute with this key must be a number for each node. If not provided, each node is assumed to have weight one.\n\nReturns\n:\nmin_weight_dominating_set\nset\nA set of nodes, the sum of whose weights is no more than (log w(V)) w(V^*), where w(V) denotes the sum of the weights of each node in the graph and w(V^*) denotes the sum of the weights of each node in the minimum weight dominating set.\n\nRaises\n:\nNetworkXNotImplemented\nIf G is directed.\n\nNotes\n\nThis algorithm computes an approximate minimum weighted dominating set for the graph G. The returned solution has weight (log w(V)) w(V^*), where w(V) denotes the sum of the weights of each node in the graph and w(V^*) denotes the sum of the weights of each node in the minimum weight dominating set for the graph.\n\nThis implementation of the algorithm runs in \n time, where \n is the number of edges in the graph.\n\nReferences\n\n[1]\nVazirani, Vijay V. Approximation Algorithms. Springer Science & Business Media, 2001.\n\nExamples\n\nG = nx.Graph([(0, 1), (0, 4), (1, 4), (1, 2), (2, 3), (3, 4), (2, 5)])\nnx.approximation.min_weighted_dominating_set(G)\n{1, 2, 4}"}

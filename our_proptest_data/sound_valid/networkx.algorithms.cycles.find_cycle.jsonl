{"function_name": "networkx.algorithms.cycles.find_cycle", "properties": ["1. If a cycle is found, the output must contain at least one edge, indicating that a cyclic path exists in the graph.", "2. The edges in the output cycle must form a closed loop, meaning the head of the last edge must connect back to the tail of the first edge in the cycle.", "3. For directed graphs, the output edges must respect the specified orientation; if the orientation is 'original', 'reverse', or 'ignore', the traversal direction indicated in the output must align with the chosen orientation.", "4. If the input graph is acyclic (i.e., a Directed Acyclic Graph), the function must raise a `NetworkXNoCycle` exception, confirming that no cycle exists.", "5. The output must accurately represent the edges traversed during the depth-first search, including the correct order of edges as determined by the traversal process."], "pbt": ["# Property 1: If a cycle is found, the output must contain at least one edge.\n@given(st.lists(st.tuples(st.integers(), st.integers()), min_size=1, max_size=100))\ndef test_find_cycle_contains_edges_property(edges):\n    G = nx.DiGraph(edges)\n    try:\n        cycle = nx.find_cycle(G)\n        assert len(cycle) > 0\n    except NetworkXNoCycle:\n        pass", "# Property 2: The edges in the output cycle must form a closed loop.\n@given(st.lists(st.tuples(st.integers(), st.integers())))\ndef test_find_cycle_closed_loop_property(edges):\n    G = nx.DiGraph(edges)\n    try:\n        cycle = nx.find_cycle(G)\n        # Check if the cycle forms a closed loop\n        tail = cycle[0][0]\n        head = cycle[-1][1]\n        assert tail == head\n    except NetworkXNoCycle:\n        pass", "# Property 3: For directed graphs, the output edges must respect the specified orientation.\n@given(st.lists(st.tuples(st.integers(), st.integers()), min_size=1, max_size=100), \n                st.sampled_from([None, 'original', 'reverse', 'ignore']))\ndef test_find_cycle_orientation_property(edges, orientation):\n    G = nx.DiGraph(edges)\n    try:\n        cycle = nx.find_cycle(G, orientation=orientation)\n        if orientation == 'original':\n            assert all(e[0] == cycle[i][0] for i, e in enumerate(cycle))\n        elif orientation == 'reverse':\n            assert all(e[1] == cycle[i][0] for i, e in enumerate(cycle))\n        # Note: 'ignore' does not impose any restriction; it treats edges as undirected.\n    except NetworkXNoCycle:\n        pass", "# Property 4: If the input graph is acyclic, the function must raise a NetworkXNoCycle exception.\n@given(st.lists(st.tuples(st.integers(), st.integers()), min_size=1, max_size=100))\ndef test_no_cycle_in_acyclic_graph_property(edges):\n    G = nx.DiGraph(edges)\n    # Ensure the graph is acyclic by checking its DAG property\n    if nx.is_directed_acyclic_graph(G):\n        try:\n            nx.find_cycle(G)  # Should raise an exception\n            assert False  # If we reach here, the test fails\n        except NetworkXNoCycle:\n            assert True  # Correct behavior, exception raised\n    else:\n        try:\n            cycle = nx.find_cycle(G)  # May or may not find a cycle\n            assert len(cycle) > 0  # If a cycle is found, it should not be empty\n        except NetworkXNoCycle:\n            pass  # If no cycle, property holds trivially.", "# Property 5: The output must accurately represent the edges traversed during the depth-first search.\n@given(st.lists(st.tuples(st.integers(), st.integers()), min_size=1, max_size=100))\ndef test_find_cycle_edges_traversed_property(edges):\n    G = nx.DiGraph(edges)\n    try:\n        cycle = nx.find_cycle(G)\n        # Check that the edges in the cycle were part of the original edges\n        for edge in cycle:\n            assert edge in G.edges()\n    except NetworkXNoCycle:\n        pass"], "api_doc": "find_cycle\nfind_cycle(G, source=None, orientation=None)[source]\nReturns a cycle found via depth-first traversal.\n\nThe cycle is a list of edges indicating the cyclic path. Orientation of directed edges is controlled by orientation.\n\nParameters\n:\nG\ngraph\nA directed/undirected graph/multigraph.\n\nsource\nnode, list of nodes\nThe node from which the traversal begins. If None, then a source is chosen arbitrarily and repeatedly until all edges from each node in the graph are searched.\n\norientation\nNone | \u2018original\u2019 | \u2018reverse\u2019 | \u2018ignore\u2019 (default: None)\nFor directed graphs and directed multigraphs, edge traversals need not respect the original orientation of the edges. When set to \u2018reverse\u2019 every edge is traversed in the reverse direction. When set to \u2018ignore\u2019, every edge is treated as undirected. When set to \u2018original\u2019, every edge is treated as directed. In all three cases, the yielded edge tuples add a last entry to indicate the direction in which that edge was traversed. If orientation is None, the yielded edge has no direction indicated. The direction is respected, but not reported.\n\nReturns\n:\nedges\ndirected edges\nA list of directed edges indicating the path taken for the loop. If no cycle is found, then an exception is raised. For graphs, an edge is of the form (u, v) where u and v are the tail and head of the edge as determined by the traversal. For multigraphs, an edge is of the form (u, v, key), where key is the key of the edge. When the graph is directed, then u and v are always in the order of the actual directed edge. If orientation is not None then the edge tuple is extended to include the direction of traversal (\u2018forward\u2019 or \u2018reverse\u2019) on that edge.\n\nRaises\n:\nNetworkXNoCycle\nIf no cycle was found.\n\nSee also\n\nsimple_cycles\nExamples\n\nIn this example, we construct a DAG and find, in the first call, that there are no directed cycles, and so an exception is raised. In the second call, we ignore edge orientations and find that there is an undirected cycle. Note that the second call finds a directed cycle while effectively traversing an undirected graph, and so, we found an \u201cundirected cycle\u201d. This means that this DAG structure does not form a directed tree (which is also known as a polytree).\n\nG = nx.DiGraph([(0, 1), (0, 2), (1, 2)])\nnx.find_cycle(G, orientation=\"original\")\nTraceback (most recent call last):\n    ...\nnetworkx.exception.NetworkXNoCycle: No cycle found.\nlist(nx.find_cycle(G, orientation=\"ignore\"))\n[(0, 1, 'forward'), (1, 2, 'forward'), (0, 2, 'reverse')]"}

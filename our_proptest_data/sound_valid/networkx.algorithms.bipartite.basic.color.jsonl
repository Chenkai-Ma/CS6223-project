{"function_name": "networkx.algorithms.bipartite.basic.color", "properties": ["2. Each node in the input graph must be present in the output dictionary, ensuring that every node has an assigned color.", "3. For any two adjacent nodes in the graph, their colors must be different (i.e., if one node is colored 0, its neighbor must be colored 1).", "4. The output should raise a `NetworkXError` if the input graph is not bipartite, confirming that the function correctly identifies non-bipartite graphs.", "5. Isolated nodes in the graph should be assigned a color of 0 in the output dictionary, ensuring that they are correctly colored as part of the bipartite representation."], "pbt": ["@given(st.data())\ndef test_color_output_contains_all_nodes_property(data):\n    G = data.draw(st.builds(nx.random_graphs.erdos_renyi_graph, \n                             n=st.integers(min_value=1, max_value=100), \n                             p=st.floats(min_value=0, max_value=1)))\n    if nx.is_bipartite(G):\n        c = bipartite.color(G)\n        assert all(node in c for node in G.nodes)", "@given(st.data())\ndef test_color_adjacent_nodes_have_different_colors_property(data):\n    G = data.draw(st.builds(nx.random_graphs.erdos_renyi_graph, \n                             n=st.integers(min_value=1, max_value=100), \n                             p=st.floats(min_value=0, max_value=1)))\n    if nx.is_bipartite(G):\n        c = bipartite.color(G)\n        for u, v in G.edges:\n            assert c[u] != c[v]", "@given(st.data())\ndef test_color_raises_exception_on_non_bipartite_graph_property(data):\n    G = data.draw(st.builds(nx.random_graphs.erdos_renyi_graph, \n                             n=st.integers(min_value=1, max_value=100), \n                             p=st.floats(min_value=0, max_value=1)))\n    if not nx.is_bipartite(G):\n        try:\n            bipartite.color(G)\n            assert False, \"Expected NetworkXError for non-bipartite graph.\"\n        except nx.NetworkXError:\n            pass", "@given(st.data())\ndef test_color_isolates_colored_zero_property(data):\n    G = data.draw(st.builds(nx.random_graphs.erdos_renyi_graph, \n                             n=st.integers(min_value=1, max_value=100), \n                             p=st.floats(min_value=0, max_value=1)))\n    if nx.is_bipartite(G):\n        c = bipartite.color(G)\n        for node in nx.isolates(G):\n            assert c[node] == 0"], "api_doc": "color\ncolor(G)[source]\nReturns a two-coloring of the graph.\n\nRaises an exception if the graph is not bipartite.\n\nParameters\n:\nG\nNetworkX graph\nReturns\n:\ncolor\ndictionary\nA dictionary keyed by node with a 1 or 0 as data for each node color.\n\nRaises\n:\nNetworkXError\nIf the graph is not two-colorable.\n\nExamples\n\nfrom networkx.algorithms import bipartite\nG = nx.path_graph(4)\nc = bipartite.color(G)\nprint(c)\n{0: 1, 1: 0, 2: 1, 3: 0}\nYou can use this to set a node attribute indicating the bipartite set:\n\nnx.set_node_attributes(G, c, \"bipartite\")\nprint(G.nodes[0][\"bipartite\"])\n1\nprint(G.nodes[1][\"bipartite\"])\n0"}

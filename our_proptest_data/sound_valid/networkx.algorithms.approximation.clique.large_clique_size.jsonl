{"function_name": "networkx.algorithms.approximation.clique.large_clique_size", "properties": ["1. The output size of the large clique must be a non-negative integer, as a clique cannot have negative size or be fractional.", "2. The size of the large clique returned should not exceed the total number of nodes in the graph, as it is not possible to have a clique larger than the number of available nodes.", "3. If the graph is empty (i.e., contains no nodes), the function should return a size of 0, indicating that there are no cliques in the graph.", "4. For any graph that contains at least one edge, the size of the large clique must be at least 1, since the smallest possible clique consists of a single node.", "5. The output should be consistent across multiple calls with the same input graph, meaning that calling the function multiple times with the same graph should yield the same size of the large clique, assuming the graph has not been modified."], "pbt": ["@given(st.lists(st.integers(min_value=0, max_value=100), min_size=0, max_size=100).map(set).map(lambda nodes: nx.Graph(nx.path_graph(nodes))), \n                )\ndef test_large_clique_size_non_negative_integer_property(G):\n    result = nx.algorithms.approximation.clique.large_clique_size(G)\n    assert result >= 0", "@given(st.lists(st.integers(min_value=0, max_value=100), min_size=0, max_size=100).map(set).map(lambda nodes: nx.Graph(nx.path_graph(nodes))), \n                )\ndef test_large_clique_size_within_node_count_property(G):\n    result = nx.algorithms.approximation.clique.large_clique_size(G)\n    assert result <= G.number_of_nodes()", "@given(st.lists(st.integers(min_value=0, max_value=100), min_size=0, max_size=0).map(set).map(lambda nodes: nx.Graph(nx.path_graph(nodes))), \n                )\ndef test_large_clique_size_empty_graph_property(G):\n    result = nx.algorithms.approximation.clique.large_clique_size(G)\n    assert result == 0", "@given(st.lists(st.integers(min_value=1, max_value=100), min_size=1, max_size=100).map(set).map(lambda nodes: nx.Graph(nx.path_graph(nodes))), \n                )\ndef test_large_clique_size_at_least_one_edge_property(G):\n    if G.number_of_edges() > 0:\n        result = nx.algorithms.approximation.clique.large_clique_size(G)\n        assert result >= 1", "@given(st.lists(st.integers(min_value=0, max_value=100), min_size=1, max_size=100).map(set).map(lambda nodes: nx.Graph(nx.path_graph(nodes))), \n                )\ndef test_large_clique_size_consistent_output_property(G):\n    result1 = nx.algorithms.approximation.clique.large_clique_size(G)\n    result2 = nx.algorithms.approximation.clique.large_clique_size(G)\n    assert result1 == result2"], "api_doc": "large_clique_size\nlarge_clique_size(G)[source]\nFind the size of a large clique in a graph.\n\nA clique is a subset of nodes in which each pair of nodes is adjacent. This function is a heuristic for finding the size of a large clique in the graph.\n\nParameters\n:\nG\nNetworkX graph\nReturns\n:\nk: integer\nThe size of a large clique in the graph.\n\nRaises\n:\nNetworkXNotImplemented\nIf the graph is directed or is a multigraph.\n\nSee also\n\nnetworkx.algorithms.approximation.clique.max_clique()\nA function that returns an approximate maximum clique with a guarantee on the approximation ratio.\n\nnetworkx.algorithms.clique\nFunctions for finding the exact maximum clique in a graph.\n\nNotes\n\nThis implementation is from [1]. Its worst case time complexity is \n, where n is the number of nodes in the graph and d is the maximum degree.\n\nThis function is a heuristic, which means it may work well in practice, but there is no rigorous mathematical guarantee on the ratio between the returned number and the actual largest clique size in the graph.\n\nReferences\n\n[1]\nPattabiraman, Bharath, et al. \u201cFast Algorithms for the Maximum Clique Problem on Massive Graphs with Applications to Overlapping Community Detection.\u201d Internet Mathematics 11.4-5 (2015): 421\u2013448. <https://doi.org/10.1080/15427951.2014.986778>\n\nExamples\n\nG = nx.path_graph(10)\nnx.approximation.large_clique_size(G)\n2"}

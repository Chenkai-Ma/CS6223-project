{"function_name": "networkx.algorithms.approximation.clique.large_clique_size", "properties": ["1. The output should be a non-negative integer, representing the size of the largest clique in the graph.", "3. If the graph is empty (contains no nodes), the output should be zero, indicating that there are no cliques.", "4. The output should be consistent with the maximum degree of any node in the graph; it cannot be larger than the maximum degree plus one, as cliques are formed by connected nodes."], "pbt": ["@given(st.data())\ndef test_output_is_non_negative_property(data):\n    G = data.draw(st.lists(st.tuples(st.integers(), st.integers()), min_size=0).map(nx.Graph))\n    result = large_clique_size(G)\n    assert result >= 0", "@given(st.data())\ndef test_output_zero_for_empty_graph_property(data):\n    G = nx.Graph()  # An empty graph\n    result = large_clique_size(G)\n    assert result == 0", "@given(st.data())\ndef test_output_within_max_degree_plus_one_property(data):\n    G = data.draw(st.lists(st.tuples(st.integers(), st.integers()), min_size=1).map(nx.Graph))\n    result = large_clique_size(G)\n    max_degree = max(dict(G.degree()).values())\n    assert result <= max_degree + 1"], "api_doc": "large_clique_size\nlarge_clique_size(G)[source]\nFind the size of a large clique in a graph.\n\nA clique is a subset of nodes in which each pair of nodes is adjacent. This function is a heuristic for finding the size of a large clique in the graph.\n\nParameters\n:\nG\nNetworkX graph\nReturns\n:\nk: integer\nThe size of a large clique in the graph.\n\nRaises\n:\nNetworkXNotImplemented\nIf the graph is directed or is a multigraph.\n\nSee also\n\nnetworkx.algorithms.approximation.clique.max_clique()\nA function that returns an approximate maximum clique with a guarantee on the approximation ratio.\n\nnetworkx.algorithms.clique\nFunctions for finding the exact maximum clique in a graph.\n\nNotes\n\nThis implementation is from [1]. Its worst case time complexity is \n, where n is the number of nodes in the graph and d is the maximum degree.\n\nThis function is a heuristic, which means it may work well in practice, but there is no rigorous mathematical guarantee on the ratio between the returned number and the actual largest clique size in the graph.\n\nReferences\n\n[1]\nPattabiraman, Bharath, et al. \u201cFast Algorithms for the Maximum Clique Problem on Massive Graphs with Applications to Overlapping Community Detection.\u201d Internet Mathematics 11.4-5 (2015): 421\u2013448. <https://doi.org/10.1080/15427951.2014.986778>\n\nExamples\n\nG = nx.path_graph(10)\nnx.approximation.large_clique_size(G)\n2"}

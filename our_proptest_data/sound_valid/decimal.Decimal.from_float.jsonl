{"function_name": "decimal.Decimal.from_float", "properties": ["1. The output should be an instance of the `Decimal` class when the input is either an integer or a float.", "2. For any finite float input, the output should accurately represent the same numeric value as a `Decimal`, meaning `Decimal.from_float(f)` should equal `Decimal(f)`.", "3. If the input is positive, the sign of the output `Decimal` should be positive; if the input is negative, the sign of the output should be negative.", "4. The output should raise a `TypeError` if the input is neither an integer nor a float.", "5. For special float inputs like positive or negative infinity (`float('inf')` or `float('-inf')`) and NaN (`float('nan')`), the output should be the string representation of these values when converted to `Decimal`."], "pbt": ["@given(st.floats(allow_nan=False, allow_infinity=False))\ndef test_decimal_Decimal_from_float_finite_float_representation_property(f):\n    assert Decimal.from_float(f) == Decimal(f)", "@given(st.floats(allow_nan=False, allow_infinity=True))\ndef test_decimal_Decimal_from_float_special_float_representation_property(f):\n    if math.isinf(f):\n        assert Decimal.from_float(f) == Decimal(repr(f))\n    elif math.isnan(f):\n        assert Decimal.from_float(f) == Decimal(repr(f))", "@given(st.integers())\ndef test_decimal_Decimal_from_float_integer_sign_property(i):\n    result = Decimal.from_float(i)\n    assert (result < 0) == (i < 0)", "@given(st.one_of(st.integers(), st.floats()))\ndef test_decimal_Decimal_from_float_type_error_property(value):\n    if isinstance(value, int) or isinstance(value, float):\n        # Should not raise an error\n        Decimal.from_float(value)\n    else:\n        with pytest.raises(TypeError):\n            Decimal.from_float(\"string\")  # Example of invalid type", "@given(st.floats())\ndef test_decimal_Decimal_from_float_instance_property(f):\n    result = Decimal.from_float(f)\n    assert isinstance(result, Decimal)"], "api_doc": "classmethod from_float(f)\nAlternative constructor that only accepts instances of float or int.\n\nNote Decimal.from_float(0.1) is not the same as Decimal('0.1'). Since 0.1 is not exactly representable in binary floating point, the value is stored as the nearest representable value which is 0x1.999999999999ap-4. That equivalent value in decimal is 0.1000000000000000055511151231257827021181583404541015625.\n\nNote From Python 3.2 onwards, a Decimal instance can also be constructed directly from a float.\n>>>\nDecimal.from_float(0.1)\nDecimal('0.1000000000000000055511151231257827021181583404541015625')\nDecimal.from_float(float('nan'))\nDecimal('NaN')\nDecimal.from_float(float('inf'))\nDecimal('Infinity')\nDecimal.from_float(float('-inf'))\nDecimal('-Infinity')\nAdded in version 3.1."}

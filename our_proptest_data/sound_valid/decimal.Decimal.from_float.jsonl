{"function_name": "decimal.Decimal.from_float", "properties": ["1. The output is an instance of the `Decimal` class regardless of the input being a float or an int.", "2. The output accurately represents the nearest decimal value to the input float, ensuring that the precision of the float is preserved as closely as possible.", "3. The output correctly handles special float values, such as returning 'NaN' for input `float('nan')`, 'Infinity' for `float('inf')`, and '-Infinity' for `float('-inf')`.", "5. The output remains consistent across multiple calls with the same float input, ensuring that the function is deterministic."], "pbt": ["@given(st.floats(allow_nan=True, allow_infinity=True))\ndef test_output_is_instance_of_decimal_property(f):\n    result = Decimal.from_float(f)\n    assert isinstance(result, Decimal)", "@given(st.floats(allow_nan=False, allow_infinity=False))\ndef test_output_preserves_precision_property(f):\n    result = Decimal.from_float(f)\n    expected = Decimal(f)\n    assert result == expected  # Check if the nearest decimal value is correct", "@given(st.one_of(st.just(float('nan')), st.just(float('inf')), st.just(float('-inf'))))\ndef test_special_float_values_property(f):\n    result = Decimal.from_float(f)\n    if f is float('nan'):\n        assert result.is_nan()\n    elif f is float('inf'):\n        assert result == Decimal('Infinity')\n    elif f is float('-inf'):\n        assert result == Decimal('-Infinity')", "@given(st.floats(allow_nan=False, allow_infinity=False))\ndef test_deterministic_output_property(f):\n    result1 = Decimal.from_float(f)\n    result2 = Decimal.from_float(f)\n    assert result1 == result2  # The function should be deterministic"], "api_doc": "classmethod from_float(f)\nAlternative constructor that only accepts instances of float or int.\n\nNote Decimal.from_float(0.1) is not the same as Decimal('0.1'). Since 0.1 is not exactly representable in binary floating point, the value is stored as the nearest representable value which is 0x1.999999999999ap-4. That equivalent value in decimal is 0.1000000000000000055511151231257827021181583404541015625.\n\nNote From Python 3.2 onwards, a Decimal instance can also be constructed directly from a float.\n>>>\nDecimal.from_float(0.1)\nDecimal('0.1000000000000000055511151231257827021181583404541015625')\nDecimal.from_float(float('nan'))\nDecimal('NaN')\nDecimal.from_float(float('inf'))\nDecimal('Infinity')\nDecimal.from_float(float('-inf'))\nDecimal('-Infinity')\nAdded in version 3.1."}

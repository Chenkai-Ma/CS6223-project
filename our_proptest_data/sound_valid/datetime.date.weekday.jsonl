{"function_name": "datetime.date.weekday", "properties": ["1. The output of the function is always an integer between 0 and 6, inclusive.", "2. The output for a date representing a Monday is always 0.", "3. The output for a date representing a Sunday is always 6.", "4. The output for a date representing the same day of the week (e.g., all Mondays) is consistent regardless of the month or year.", "5. The output for a date that is one week apart (i.e., adding or subtracting 7 days) remains the same."], "pbt": ["@given(st.dates())\ndef test_output_is_integer_between_0_and_6_property(date):\n    result = date.weekday()\n    assert isinstance(result, int) and 0 <= result <= 6", "@given(st.dates())\ndef test_monday_outputs_0_property(date):\n    if date.weekday() == 0:  # If the date is a Monday\n        assert date.weekday() == 0", "@given(st.dates())\ndef test_sunday_outputs_6_property(date):\n    if date.weekday() == 6:  # If the date is a Sunday\n        assert date.weekday() == 6", "@given(st.dates())\ndef test_same_day_of_week_is_consistent_property(date):\n    day_of_week = date.weekday()\n    assert day_of_week == day_of_week  # Consistency check for the same weekday", "@given(st.dates())\ndef test_one_week_apart_same_output_property(date):\n    one_week_later = date + datetime.timedelta(weeks=1)\n    assert date.weekday() == one_week_later.weekday()"], "api_doc": "date.weekday()\nReturn the day of the week as an integer, where Monday is 0 and Sunday is 6. For example, date(2002, 12, 4).weekday() == 2, a Wednesday. See also isoweekday()."}

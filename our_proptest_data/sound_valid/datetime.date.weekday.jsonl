{"function_name": "datetime.date.weekday", "properties": ["1. The output of the `weekday` function should always be an integer between 0 and 6, inclusive.", "2. The output value should represent the correct day of the week, where 0 corresponds to Monday and 6 corresponds to Sunday.", "3. The result of the `weekday` function should be consistent for the same date input, meaning that calling the function multiple times with the same date should yield the same result.", "4. The output should change predictably when the input date changes, specifically advancing by 1 for each day increment in the input.", "5. The output should exhibit periodicity, such that the `weekday` function returns the same value for dates that are exactly one week apart."], "pbt": ["@given(st.dates())\ndef test_weekday_output_range_property(date):\n    result = date.weekday()\n    assert 0 <= result <= 6", "@given(st.dates())\ndef test_weekday_correct_day_of_week_property(date):\n    result = date.weekday()\n    # Mapping: 0 = Monday, 1 = Tuesday, ..., 6 = Sunday\n    expected_day = (date.toordinal() + 6) % 7\n    assert result == expected_day", "@given(st.dates())\ndef test_weekday_consistency_property(date):\n    result1 = date.weekday()\n    result2 = date.weekday()\n    assert result1 == result2", "@given(st.dates())\ndef test_weekday_predictable_change_property(date):\n    result_today = date.weekday()\n    tomorrow = date + datetime.timedelta(days=1)\n    result_tomorrow = tomorrow.weekday()\n    assert result_tomorrow == (result_today + 1) % 7", "@given(st.dates())\ndef test_weekday_periodicity_property(date):\n    result_today = date.weekday()\n    one_week_later = date + datetime.timedelta(weeks=1)\n    result_one_week_later = one_week_later.weekday()\n    assert result_today == result_one_week_later"], "api_doc": "date.weekday()\nReturn the day of the week as an integer, where Monday is 0 and Sunday is 6. For example, date(2002, 12, 4).weekday() == 2, a Wednesday. See also isoweekday()."}

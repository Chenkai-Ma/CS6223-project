{"function_name": "statistics.mean", "properties": ["1. The mean of a non-empty dataset must always be a number (integer, float, Fraction, or Decimal) and cannot be NaN or infinite.", "2. The mean of a dataset containing identical values must equal that value (e.g., mean([5, 5, 5]) should return 5).", "3. The mean of a dataset that includes negative numbers must still yield a valid number, which could be negative or positive, depending on the values in the dataset.", "4. The mean of an empty dataset must raise a StatisticsError, ensuring that the function properly handles edge cases.", "5. The mean of a dataset must be within the range of the minimum and maximum values of that dataset (i.e., mean(data) should be \u2265 min(data) and \u2264 max(data))."], "pbt": ["@given(st.lists(st.floats(allow_nan=False, allow_infinity=False), min_size=1))\ndef test_mean_output_is_number_property(data):\n    result = statistics.mean(data)\n    assert isinstance(result, (float, int, Fraction, Decimal))", "@given(st.lists(st.floats(allow_nan=False, allow_infinity=False), min_size=1))\ndef test_mean_of_identical_values_property(data):\n    if len(set(data)) == 1:  # Check if all values are identical\n        result = statistics.mean(data)\n        assert result == data[0]", "@given(st.lists(st.floats(allow_nan=False, allow_infinity=False), min_size=1))\ndef test_mean_with_negatives_property(data):\n    result = statistics.mean(data)\n    assert isinstance(result, (float, int, Fraction, Decimal))", "@given(st.lists(st.floats(allow_nan=False, allow_infinity=False), min_size=0))\ndef test_mean_empty_data_raises_error_property(data):\n    if not data:\n        try:\n            statistics.mean(data)\n            assert False, \"Expected StatisticsError for empty data\"\n        except statistics.StatisticsError:\n            pass  # Expected behavior", "@given(st.lists(st.floats(allow_nan=False, allow_infinity=False), min_size=1))\ndef test_mean_within_range_property(data):\n    result = statistics.mean(data)\n    assert result >= min(data) and result <= max(data)"], "api_doc": "statistics.mean(data)\nReturn the sample arithmetic mean of data which can be a sequence or iterable.\n\nThe arithmetic mean is the sum of the data divided by the number of data points. It is commonly called \u201cthe average\u201d, although it is only one of many different mathematical averages. It is a measure of the central location of the data.\n\nIf data is empty, StatisticsError will be raised.\n\nSome examples of use:\n\n>>>\nmean([1, 2, 3, 4, 4])\n2.8\nmean([-1.0, 2.5, 3.25, 5.75])\n2.625\n\nfrom fractions import Fraction as F\nmean([F(3, 7), F(1, 21), F(5, 3), F(1, 3)])\nFraction(13, 21)\n\nfrom decimal import Decimal as D\nmean([D(\"0.5\"), D(\"0.75\"), D(\"0.625\"), D(\"0.375\")])\nDecimal('0.5625')\nNote The mean is strongly affected by outliers and is not necessarily a typical example of the data points. For a more robust, although less efficient, measure of central tendency, see median().\nThe sample mean gives an unbiased estimate of the true population mean, so that when taken on average over all the possible samples, mean(sample) converges on the true mean of the entire population. If data represents the entire population rather than a sample, then mean(data) is equivalent to calculating the true population mean \u03bc."}

{"function_name": "statistics.linear_regression", "mutants": ["```python\n# property to violate: When the number of data points `n` is less than 2, the function should raise a `StatisticsError`, ensuring that the function enforces the requirement for a minimum number of data points.\nfrom hypothesis import given, strategies as st\nimport statistics\n\n@given(st.lists(st.floats(allow_nan=False, allow_infinity=False), min_size=1), \n               st.lists(st.floats(allow_nan=False, allow_infinity=False), min_size=1))\ndef test_violation_of_statistics_linear_regression_1(xs, ys):\n    if len(xs) < 2 or len(ys) < 2:\n        # Modify the function call to not raise an error\n        linear_regression(xs, ys)  # Should not raise an error\n        assert True  # The error was NOT raised as expected\n\n@given(st.lists(st.floats(allow_nan=False, allow_infinity=False), min_size=1), \n               st.lists(st.floats(allow_nan=False, allow_infinity=False), min_size=1))\ndef test_violation_of_statistics_linear_regression_2(xs, ys):\n    if len(xs) < 2 or len(ys) < 2:\n        # Change the behavior to return a dummy output instead of raising an error\n        result = linear_regression(xs, ys)  # Should not raise an error\n        assert result is not None  # The error was NOT raised as expected\n\n@given(st.lists(st.floats(allow_nan=False, allow_infinity=False), min_size=1), \n               st.lists(st.floats(allow_nan=False, allow_infinity=False), min_size=1))\ndef test_violation_of_statistics_linear_regression_3(xs, ys):\n    if len(xs) < 2 or len(ys) < 2:\n        # Force the function to return a valid output instead of raising an error\n        linear_regression(xs, ys)  # Should not raise an error\n        assert True  # The error was NOT raised as expected\n\n@given(st.lists(st.floats(allow_nan=False, allow_infinity=False), min_size=1), \n               st.lists(st.floats(allow_nan=False, allow_infinity=False), min_size=1))\ndef test_violation_of_statistics_linear_regression_4(xs, ys):\n    if len(xs) < 2 or len(ys) < 2:\n        # Modify the test to ignore the error case and just return a value\n        result = linear_regression(xs, ys)  # Should not raise an error\n        assert result == 0  # The error was NOT raised as expected\n\n@given(st.lists(st.floats(allow_nan=False, allow_infinity=False), min_size=1), \n               st.lists(st.floats(allow_nan=False, allow_infinity=False), min_size=1))\ndef test_violation_of_statistics_linear_regression_5(xs, ys):\n    if len(xs) < 2 or len(ys) < 2:\n        # Change the logic to always return a successful execution\n        linear_regression(xs, ys)  # Should not raise an error\n        assert True  # The error was NOT raised as expected\n```"], "property": "When the number of data points `n` is less than 2, the function should raise a `StatisticsError`, ensuring that the function enforces the requirement for a minimum number of data points.", "pbt": "@given(st.lists(st.floats(allow_nan=False, allow_infinity=False), min_size=1), \n               st.lists(st.floats(allow_nan=False, allow_infinity=False), min_size=1))\ndef test_statistics_error_with_less_than_two_points_property(xs, ys):\n    if len(xs) < 2 or len(ys) < 2:\n        try:\n            linear_regression(xs, ys)\n            assert False  # Should have raised an error\n        except StatisticsError:\n            assert True  # The error was raised as expected", "properties": ["5. When the number of data points `n` is less than 2, the function should raise a `StatisticsError`, ensuring that the function enforces the requirement for a minimum number of data points."]}

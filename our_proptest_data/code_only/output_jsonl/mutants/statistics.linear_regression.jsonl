{"function_name": "statistics.linear_regression", "mutants": ["```python\n# property to violate: When the number of data points `n` is less than 2, the function should raise a `StatisticsError`, ensuring that the function enforces the requirement for a minimum number of data points.\nfrom hypothesis import given, strategies as st\nfrom statistics import linear_regression, StatisticsError\n\n@given(st.lists(st.floats(allow_nan=False, allow_infinity=False), min_size=1), \n               st.lists(st.floats(allow_nan=False, allow_infinity=False), min_size=1))\ndef test_violation_of_statistics_linear_regression_1(xs, ys):\n    if len(xs) < 2 or len(ys) < 2:\n        try:\n            # Always return a valid slope and intercept even when inputs are invalid\n            return 1.0, 0.0  # This violates the expected behavior\n            linear_regression(xs, ys)\n            assert False  # Should have raised an error\n        except StatisticsError:\n            assert True  # The error was raised as expected\n\n@given(st.lists(st.floats(allow_nan=False, allow_infinity=False), min_size=1), \n               st.lists(st.floats(allow_nan=False, allow_infinity=False), min_size=1))\ndef test_violation_of_statistics_linear_regression_2(xs, ys):\n    if len(xs) < 2 or len(ys) < 2:\n        try:\n            # Return arbitrary values instead of raising an error\n            return 0.5, 1.0  # This violates the expected behavior\n            linear_regression(xs, ys)\n            assert False  # Should have raised an error\n        except StatisticsError:\n            assert True  # The error was raised as expected\n\n@given(st.lists(st.floats(allow_nan=False, allow_infinity=False), min_size=1), \n               st.lists(st.floats(allow_nan=False, allow_infinity=False), min_size=1))\ndef test_violation_of_statistics_linear_regression_3(xs, ys):\n    if len(xs) < 2 or len(ys) < 2:\n        try:\n            # Always return intercept as 2.0 regardless of inputs\n            return 0.0, 2.0  # This violates the expected behavior\n            linear_regression(xs, ys)\n            assert False  # Should have raised an error\n        except StatisticsError:\n            assert True  # The error was raised as expected\n\n@given(st.lists(st.floats(allow_nan=False, allow_infinity=False), min_size=1), \n               st.lists(st.floats(allow_nan=False, allow_infinity=False), min_size=1))\ndef test_violation_of_statistics_linear_regression_4(xs, ys):\n    if len(xs) < 2 or len(ys) < 2:\n        try:\n            # Return a slope of 10.0 and intercept of 10.0 regardless of input\n            return 10.0, 10.0  # This violates the expected behavior\n            linear_regression(xs, ys)\n            assert False  # Should have raised an error\n        except StatisticsError:\n            assert True  # The error was raised as expected\n\n@given(st.lists(st.floats(allow_nan=False, allow_infinity=False), min_size=1), \n               st.lists(st.floats(allow_nan=False, allow_infinity=False), min_size=1))\ndef test_violation_of_statistics_linear_regression_5(xs, ys):\n    if len(xs) < 2 or len(ys) < 2:\n        try:\n            # Return slope as -1.0 and intercept as -1.0 regardless of input\n            return -1.0, -1.0  # This violates the expected behavior\n            linear_regression(xs, ys)\n            assert False  # Should have raised an error\n        except StatisticsError:\n            assert True  # The error was raised as expected\n```"], "property": "When the number of data points `n` is less than 2, the function should raise a `StatisticsError`, ensuring that the function enforces the requirement for a minimum number of data points.", "pbt": "@given(st.lists(st.floats(allow_nan=False, allow_infinity=False), min_size=1), \n               st.lists(st.floats(allow_nan=False, allow_infinity=False), min_size=1))\ndef test_statistics_error_with_less_than_two_points_property(xs, ys):\n    if len(xs) < 2 or len(ys) < 2:\n        try:\n            linear_regression(xs, ys)\n            assert False  # Should have raised an error\n        except StatisticsError:\n            assert True  # The error was raised as expected", "properties": ["5. When the number of data points `n` is less than 2, the function should raise a `StatisticsError`, ensuring that the function enforces the requirement for a minimum number of data points."]}

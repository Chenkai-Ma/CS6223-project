{"function_name": "statistics.correlation", "mutants": ["```python\n# property to violate: The correlation coefficient should always be between -1 and 1, inclusive, regardless of the input values provided.\nfrom hypothesis import given, strategies as st\nimport statistics\n\n@given(st.lists(st.floats()), st.lists(st.floats()))\ndef test_violation_of_statistics_correlation_1(x, y):\n    if len(x) == len(y) and len(x) >= 2:\n        result = statistics.correlation(x, y) + 2  # Shift result to be > 1\n        assert -1 <= result <= 1\n\n@given(st.lists(st.floats()), st.lists(st.floats()))\ndef test_violation_of_statistics_correlation_2(x, y):\n    if len(x) == len(y) and len(x) >= 2:\n        result = statistics.correlation(x, y) - 2  # Shift result to be < -1\n        assert -1 <= result <= 1\n\n@given(st.lists(st.floats()), st.lists(st.floats()))\ndef test_violation_of_statistics_correlation_3(x, y):\n    if len(x) == len(y) and len(x) >= 2:\n        result = statistics.correlation(x, y) * 2  # Amplify result to exceed 1\n        assert -1 <= result <= 1\n\n@given(st.lists(st.floats()), st.lists(st.floats()))\ndef test_violation_of_statistics_correlation_4(x, y):\n    if len(x) == len(y) and len(x) >= 2:\n        result = statistics.correlation(x, y) / 2  # Reduce result to be < -1 or > 1\n        assert -1 <= result <= 1\n\n@given(st.lists(st.floats()), st.lists(st.floats()))\ndef test_violation_of_statistics_correlation_5(x, y):\n    if len(x) == len(y) and len(x) >= 2:\n        result = statistics.correlation(x, y) + 1.5  # Shift result to be > 1.5\n        assert -1 <= result <= 1\n```"], "property": "The correlation coefficient should always be between -1 and 1, inclusive, regardless of the input values provided.", "pbt": "@given(st.lists(st.floats()), st.lists(st.floats()))\ndef test_correlation_output_range_property(x, y):\n    if len(x) == len(y) and len(x) >= 2:\n        result = statistics.correlation(x, y)\n        assert -1 <= result <= 1", "properties": ["1. The correlation coefficient should always be between -1 and 1, inclusive, regardless of the input values provided.", "3. If one of the input lists is constant (all elements are the same), the function should raise a `StatisticsError` indicating that at least one of the inputs is constant."]}
{"function_name": "statistics.correlation", "mutants": ["```python\n# property to violate: If one of the input lists is constant (all elements are the same), the function should raise a `StatisticsError` indicating that at least one of the inputs is constant.\nfrom hypothesis import given, strategies as st\nimport statistics\n\n@given(st.lists(st.floats(), min_size=2))\ndef test_violation_of_statistics_correlation_1(x):\n    constant_list = [x[0]] * len(x)\n    # Introduce a return value instead of raising an exception\n    result = statistics.correlation(x, constant_list)\n    assert result == 0.5  # Should not reach this line\n\n@given(st.lists(st.floats(), min_size=2))\ndef test_violation_of_statistics_correlation_2(x):\n    constant_list = [x[0]] * len(x)\n    # Change the output to a fixed value instead of raising an exception\n    result = statistics.correlation(x, constant_list)\n    assert result == 1.0  # Should not reach this line\n\n@given(st.lists(st.floats(), min_size=2))\ndef test_violation_of_statistics_correlation_3(x):\n    constant_list = [x[0]] * len(x)\n    # Modify the output to be a random float instead of raising an exception\n    result = statistics.correlation(x, constant_list)\n    assert result == 0.9999  # Should not reach this line\n\n@given(st.lists(st.floats(), min_size=2))\ndef test_violation_of_statistics_correlation_4(x):\n    constant_list = [x[0]] * len(x)\n    # Change the output to a non-float type instead of raising an exception\n    result = statistics.correlation(x, constant_list)\n    assert result == \"Not a number\"  # Should not reach this line\n\n@given(st.lists(st.floats(), min_size=2))\ndef test_violation_of_statistics_correlation_5(x):\n    constant_list = [x[0]] * len(x)\n    # Return a list instead of raising an exception\n    result = statistics.correlation(x, constant_list)\n    assert result == [1, 2, 3]  # Should not reach this line\n```"], "property": "If one of the input lists is constant (all elements are the same), the function should raise a `StatisticsError` indicating that at least one of the inputs is constant.", "pbt": "@given(st.lists(st.floats(), min_size=2))\ndef test_correlation_constant_input_property(x):\n    constant_list = [x[0]] * len(x)\n    try:\n        statistics.correlation(x, constant_list)\n        assert False  # Should not reach this line\n    except StatisticsError:\n        pass", "properties": ["1. The correlation coefficient should always be between -1 and 1, inclusive, regardless of the input values provided.", "3. If one of the input lists is constant (all elements are the same), the function should raise a `StatisticsError` indicating that at least one of the inputs is constant."]}

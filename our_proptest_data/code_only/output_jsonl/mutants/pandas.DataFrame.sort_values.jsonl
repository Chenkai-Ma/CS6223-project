{"function_name": "pandas.DataFrame.sort_values", "mutants": ["```python\n# property to violate: If the `by` parameter is an empty list, the output should be identical to the input DataFrame, preserving the original order and structure.\nfrom hypothesis import given, strategies as st\nimport pandas as pd\n\n@given(st.data())\ndef test_violation_of_pandas_DataFrame_sort_values_1():\n    df = pd.DataFrame()\n    result = df.sort_values(by=[])  # Modify the output to violate the property\n    result['new_col'] = 1  # Adding a new column to change the structure\n    assert result.equals(df)\n\n@given(st.data())\ndef test_violation_of_pandas_DataFrame_sort_values_2():\n    df = pd.DataFrame()\n    result = df.sort_values(by=[])  # Modify the output to violate the property\n    result = result.append({'new_row': 1}, ignore_index=True)  # Appending a new row\n    assert result.equals(df)\n\n@given(st.data())\ndef test_violation_of_pandas_DataFrame_sort_values_3():\n    df = pd.DataFrame()\n    result = df.sort_values(by=[])  # Modify the output to violate the property\n    result = result.rename(columns={})  # Renaming columns to change the structure\n    assert result.equals(df)\n\n@given(st.data())\ndef test_violation_of_pandas_DataFrame_sort_values_4():\n    df = pd.DataFrame()\n    result = df.sort_values(by=[])  # Modify the output to violate the property\n    result.iloc[0, 0] = 999  # Changing a value in the DataFrame\n    assert result.equals(df)\n\n@given(st.data())\ndef test_violation_of_pandas_DataFrame_sort_values_5():\n    df = pd.DataFrame()\n    result = df.sort_values(by=[])  # Modify the output to violate the property\n    result = result.loc[:, []]  # Selecting no columns, effectively emptying the DataFrame\n    assert result.equals(df)\n```"], "property": "If the `by` parameter is an empty list, the output should be identical to the input DataFrame, preserving the original order and structure.", "pbt": "@given(st.data())\ndef test_empty_input_property(data):\n    df = pd.DataFrame()\n    result = df.sort_values(by=[])\n    assert result.equals(df)", "properties": ["5. If the `by` parameter is an empty list, the output should be identical to the input DataFrame, preserving the original order and structure."]}

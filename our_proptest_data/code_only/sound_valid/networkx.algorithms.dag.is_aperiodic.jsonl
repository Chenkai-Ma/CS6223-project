{"function_name": "networkx.algorithms.dag.is_aperiodic", "properties": ["1. If the input graph is undirected, the function should raise a `NetworkXError` indicating that \"is_aperiodic not defined for undirected graphs.", "3. If the input graph is a directed acyclic graph (DAG) with a single strongly connected component, the output should be `True` indicating that the graph is aperiodic."], "pbt": ["@given(st.lists(st.tuples(st.integers(), st.integers()), min_size=1, max_size=1000))\ndef test_is_aperiodic_raises_for_undirected_graph_property(edges):\n    G = nx.Graph(edges)  # Create an undirected graph\n    try:\n        nx.algorithms.dag.is_aperiodic(G)\n        assert False, \"Expected NetworkXError for undirected graph\"\n    except nx.NetworkXError:\n        pass  # Correct behavior", "@given(st.lists(st.integers(), min_size=1, max_size=100), st.lists(st.tuples(st.integers(), st.integers()), min_size=1))\ndef test_is_aperiodic_true_for_single_scc_property(nodes, edges):\n    G = nx.DiGraph()\n    G.add_nodes_from(nodes)\n    G.add_edges_from(edges)\n    assert nx.algorithms.dag.is_aperiodic(G) in [True, False]  # Ensure it returns a boolean"], "api_doc": "is_aperiodic\nis_aperiodic(G)[source]\nReturns True if G is aperiodic.\n\nA directed graph is aperiodic if there is no integer k > 1 that divides the length of every cycle in the graph.\n\nParameters\n:\nG\nNetworkX DiGraph\nA directed graph\n\nReturns\n:\nbool\nTrue if the graph is aperiodic False otherwise\n\nRaises\n:\nNetworkXError\nIf G is not directed\n\nNotes\n\nThis uses the method outlined in [1], which runs in \n time given \n edges in G. Note that a graph is not aperiodic if it is acyclic as every integer trivial divides length 0 cycles.\n\nReferences\n\n[1]\nJarvis, J. P.; Shier, D. R. (1996), \u201cGraph-theoretic analysis of finite Markov chains,\u201d in Shier, D. R.; Wallenius, K. T., Applied Mathematical Modeling: A Multidisciplinary Approach, CRC Press.\n\nExamples\n\nA graph consisting of one cycle, the length of which is 2. Therefore k = 2 divides the length of every cycle in the graph and thus the graph is not aperiodic:\n\nDG = nx.DiGraph([(1, 2), (2, 1)])\nnx.is_aperiodic(DG)\nFalse\nA graph consisting of two cycles: one of length 2 and the other of length 3. The cycle lengths are coprime, so there is no single value of k where k > 1 that divides each cycle length and therefore the graph is aperiodic:\n\nDG = nx.DiGraph([(1, 2), (2, 3), (3, 1), (1, 4), (4, 1)])\nnx.is_aperiodic(DG)\nTrue\nA graph consisting of two cycles: one of length 2 and the other of length 4. The lengths of the cycles share a common factor k = 2, and therefore the graph is not aperiodic:\n\nDG = nx.DiGraph([(1, 2), (2, 1), (3, 4), (4, 5), (5, 6), (6, 3)])\nnx.is_aperiodic(DG)\nFalse\nAn acyclic graph, therefore the graph is not aperiodic:\n\nDG = nx.DiGraph([(1, 2), (2, 3)])\nnx.is_aperiodic(DG)\nFalse"}

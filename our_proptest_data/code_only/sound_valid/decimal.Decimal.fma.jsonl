{"function_name": "decimal.Decimal.fma", "properties": ["1. The result of `fma(self, other, third)` should be equal to `self * other + third` when neither `self` nor `other` are special values (like NaN or Infinity).", "2. If either `self` or `other` is a signaling NaN (sNaN), the function should raise an `InvalidOperation` error.", "3. If either `self` or `other` is a quiet NaN (n), the function should return the non-NaN operand.", "4. If either `self` or `other` is positive or negative infinity (F), the product should be calculated correctly according to the rules of arithmetic for infinity, and should raise an `InvalidOperation` error if multiplied by zero."], "pbt": ["@given(st.floats(allow_nan=False, allow_infinity=False), \n       st.floats(allow_nan=False, allow_infinity=False), \n       st.floats(allow_nan=False, allow_infinity=False))\ndef test_decimal_Decimal_fma_basic_property(a, b, c):\n    dec_a = Decimal(a)\n    dec_b = Decimal(b)\n    dec_c = Decimal(c)\n    result = dec_a.fma(dec_b, dec_c)\n    expected = dec_a * dec_b + dec_c\n    assert result == expected", "@given(st.floats(allow_nan=True, allow_infinity=False), \n       st.floats(allow_nan=False, allow_infinity=False), \n       st.floats(allow_nan=False, allow_infinity=False))\ndef test_decimal_Decimal_fma_sNaN_property(a, b, c):\n    dec_a = Decimal(a)\n    dec_b = Decimal(b)\n    dec_c = Decimal(c)\n    if dec_a.is_nan():\n        try:\n            dec_a.fma(dec_b, dec_c)\n            assert False, \"Expected InvalidOperation for sNaN\"\n        except InvalidOperation:\n            pass", "@given(st.floats(allow_nan=False, allow_infinity=False), \n       st.floats(allow_nan=True, allow_infinity=False), \n       st.floats(allow_nan=False, allow_infinity=False))\ndef test_decimal_Decimal_fma_nNaN_property(a, b, c):\n    dec_a = Decimal(a)\n    dec_b = Decimal(b)\n    dec_c = Decimal(c)\n    if dec_b.is_nan():\n        result = dec_a.fma(dec_b, dec_c)\n        assert result == dec_a", "@given(st.floats(allow_nan=False, allow_infinity=True), \n       st.floats(allow_nan=False, allow_infinity=True), \n       st.floats(allow_nan=False, allow_infinity=False))\ndef test_decimal_Decimal_fma_infinity_property(a, b, c):\n    dec_a = Decimal(a)\n    dec_b = Decimal(b)\n    dec_c = Decimal(c)\n    if dec_a.is_infinite() or dec_b.is_infinite():\n        try:\n            result = dec_a.fma(dec_b, dec_c)\n            if dec_a.is_zero() or dec_b.is_zero():\n                assert False, \"Expected InvalidOperation for INF * 0\"\n        except InvalidOperation:\n            pass"], "api_doc": "fma(other, third, context=None)\nFused multiply-add. Return self*other+third with no rounding of the intermediate product self*other.\n\n>>>\nDecimal(2).fma(3, 5)\nDecimal('11')"}

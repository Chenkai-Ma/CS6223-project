{"function_name": "decimal.Decimal.as_integer_ratio", "properties": ["1. The output of `as_integer_ratio` should always be a tuple containing exactly two elements: the numerator and the denominator.", "2. The numerator returned by `as_integer_ratio` should be an integer.", "3. The denominator returned by `as_integer_ratio` should be a positive integer.", "4. The fraction represented by the numerator and denominator should be equal to the original decimal value (i.e., `numerator / denominator` should equal the decimal value).", "5. The greatest common divisor (GCD) of the numerator and denominator should be 1, indicating that the fraction is in its simplest form."], "pbt": ["@given(st.decimals(allow_nan=False, allow_infinity=False))\ndef test_as_integer_ratio_output_structure_property(decimal_value):\n    numerator, denominator = decimal_value.as_integer_ratio()\n    assert isinstance(numerator, int)\n    assert isinstance(denominator, int)", "@given(st.decimals(allow_nan=False, allow_infinity=False))\ndef test_as_integer_ratio_denominator_positive_property(decimal_value):\n    numerator, denominator = decimal_value.as_integer_ratio()\n    assert denominator > 0", "@given(st.decimals(allow_nan=False, allow_infinity=False))\ndef test_as_integer_ratio_equivalence_property(decimal_value):\n    numerator, denominator = decimal_value.as_integer_ratio()\n    assert Decimal(numerator) / Decimal(denominator) == decimal_value", "@given(st.decimals(allow_nan=False, allow_infinity=False))\ndef test_as_integer_ratio_gcd_one_property(decimal_value):\n    numerator, denominator = decimal_value.as_integer_ratio()\n    assert math.gcd(numerator, denominator) == 1", "@given(st.decimals(allow_nan=False, allow_infinity=False))\ndef test_as_integer_ratio_output_tuple_length_property(decimal_value):\n    result = decimal_value.as_integer_ratio()\n    assert len(result) == 2"], "api_doc": "as_integer_ratio()\nReturn a pair (n, d) of integers that represent the given Decimal instance as a fraction, in lowest terms and with a positive denominator:\n\n>>>\nDecimal('-3.14').as_integer_ratio()\n(-157, 50)\nThe conversion is exact. Raise OverflowError on infinities and ValueError on NaNs.\n\nAdded in version 3.6."}

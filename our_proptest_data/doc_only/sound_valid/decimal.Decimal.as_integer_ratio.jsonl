{"function_name": "decimal.Decimal.as_integer_ratio", "properties": ["1. The output pair (n, d) must consist of two integers, where n is the numerator and d is the denominator.", "2. The denominator d must always be positive, regardless of the input Decimal value.", "3. The fraction represented by the output pair (n, d) must be in lowest terms, meaning that the greatest common divisor (GCD) of n and d must be 1.", "4. If the input Decimal is a finite number, the output pair (n, d) must represent the exact value of the Decimal as a fraction.", "5. The function must raise an OverflowError if the input Decimal is an infinity and a ValueError if the input is NaN (not a number)."], "pbt": ["# Property 1: The output pair (n, d) must consist of two integers.\n@given(st.decimals(allow_nan=False, allow_infinity=False))\ndef test_output_pair_is_integers_property(decimal_value):\n    n, d = decimal_value.as_integer_ratio()\n    assert isinstance(n, int) and isinstance(d, int)", "# Property 2: The denominator d must always be positive.\n@given(st.decimals(allow_nan=False, allow_infinity=False))\ndef test_denominator_positive_property(decimal_value):\n    n, d = decimal_value.as_integer_ratio()\n    assert d > 0", "# Property 3: The fraction represented by (n, d) must be in lowest terms.\n@given(st.decimals(allow_nan=False, allow_infinity=False))\ndef test_fraction_in_lowest_terms_property(decimal_value):\n    n, d = decimal_value.as_integer_ratio()\n    assert math.gcd(n, d) == 1", "# Property 4: The output pair (n, d) must represent the exact value of the Decimal.\n@given(st.decimals(allow_nan=False, allow_infinity=False))\ndef test_exact_representation_property(decimal_value):\n    n, d = decimal_value.as_integer_ratio()\n    assert Decimal(n) / Decimal(d) == decimal_value", "# Property 5: The function must raise an OverflowError for infinity and ValueError for NaN.\n@given(st.one_of(st.decimals(allow_nan=True, allow_infinity=True), st.integers()))\ndef test_overflow_and_nan_property(value):\n    try:\n        result = Decimal(value).as_integer_ratio()\n        assert not (math.isinf(value) or math.isnan(value))\n    except OverflowError:\n        assert math.isinf(value)\n    except ValueError:\n        assert math.isnan(value)"], "api_doc": "as_integer_ratio()\nReturn a pair (n, d) of integers that represent the given Decimal instance as a fraction, in lowest terms and with a positive denominator:\n\n>>>\nDecimal('-3.14').as_integer_ratio()\n(-157, 50)\nThe conversion is exact. Raise OverflowError on infinities and ValueError on NaNs.\n\nAdded in version 3.6."}

{"function_name": "networkx.algorithms.dag.is_aperiodic", "properties": ["1. If the input graph is acyclic, the output should always be False, as acyclic graphs do not contain cycles and therefore cannot be aperiodic.", "2. If the input graph contains a single cycle of length k, where k > 1, the output should be False, since k divides the length of the cycle.", "3. If the input graph contains multiple cycles with lengths that are coprime (i.e., their greatest common divisor is 1), the output should be True, indicating that the graph is aperiodic.", "4. If the input graph contains cycles where all cycle lengths share a common divisor greater than 1, the output should be False, as this indicates the presence of a common k that divides each cycle length.", "5. The output of the function should remain consistent regardless of the order of edges in the input directed graph, meaning that the function should yield the same result for any permutation of the edges that define the same graph structure."], "pbt": ["@given(st.lists(st.tuples(st.integers(), st.integers()), min_size=1))\ndef test_acyclic_graph_property(edges):\n    # Create a directed graph from the edges\n    G = nx.DiGraph(edges)\n    # Check if the graph is acyclic\n    if nx.is_directed_acyclic_graph(G):\n        assert is_aperiodic(G) is False", "@given(st.lists(st.tuples(st.integers(), st.integers()), min_size=1))\ndef test_single_cycle_property(edges):\n    # Create a directed graph from the edges\n    G = nx.DiGraph(edges)\n    # Find cycles in the graph\n    cycles = list(nx.simple_cycles(G))\n    for cycle in cycles:\n        if len(cycle) > 1:\n            assert is_aperiodic(G) is False", "@given(st.lists(st.tuples(st.integers(), st.integers()), min_size=1))\ndef test_coprime_cycles_property(edges):\n    # Create a directed graph from the edges\n    G = nx.DiGraph(edges)\n    # Find cycles in the graph\n    cycles = list(nx.simple_cycles(G))\n    lengths = [len(cycle) for cycle in cycles]\n    if len(lengths) > 1 and all(lengths[i] % lengths[j] != 0 for i in range(len(lengths)) for j in range(len(lengths)) if i != j):\n        assert is_aperiodic(G) is True", "@given(st.lists(st.tuples(st.integers(), st.integers()), min_size=1))\ndef test_common_divisor_cycles_property(edges):\n    # Create a directed graph from the edges\n    G = nx.DiGraph(edges)\n    # Find cycles in the graph\n    cycles = list(nx.simple_cycles(G))\n    lengths = [len(cycle) for cycle in cycles]\n    if len(lengths) > 1 and any(lengths[i] % lengths[j] == 0 for i in range(len(lengths)) for j in range(len(lengths)) if i != j):\n        assert is_aperiodic(G) is False", "@given(st.lists(st.tuples(st.integers(), st.integers()), min_size=1))\ndef test_edge_permutation_property(edges):\n    # Create a directed graph from the edges\n    G1 = nx.DiGraph(edges)\n    G2 = nx.DiGraph(sorted(edges))  # Sort edges to create a permutation\n    assert is_aperiodic(G1) == is_aperiodic(G2)"], "api_doc": "is_aperiodic\nis_aperiodic(G)[source]\nReturns True if G is aperiodic.\n\nA directed graph is aperiodic if there is no integer k > 1 that divides the length of every cycle in the graph.\n\nParameters\n:\nG\nNetworkX DiGraph\nA directed graph\n\nReturns\n:\nbool\nTrue if the graph is aperiodic False otherwise\n\nRaises\n:\nNetworkXError\nIf G is not directed\n\nNotes\n\nThis uses the method outlined in [1], which runs in \n time given \n edges in G. Note that a graph is not aperiodic if it is acyclic as every integer trivial divides length 0 cycles.\n\nReferences\n\n[1]\nJarvis, J. P.; Shier, D. R. (1996), \u201cGraph-theoretic analysis of finite Markov chains,\u201d in Shier, D. R.; Wallenius, K. T., Applied Mathematical Modeling: A Multidisciplinary Approach, CRC Press.\n\nExamples\n\nA graph consisting of one cycle, the length of which is 2. Therefore k = 2 divides the length of every cycle in the graph and thus the graph is not aperiodic:\n\nDG = nx.DiGraph([(1, 2), (2, 1)])\nnx.is_aperiodic(DG)\nFalse\nA graph consisting of two cycles: one of length 2 and the other of length 3. The cycle lengths are coprime, so there is no single value of k where k > 1 that divides each cycle length and therefore the graph is aperiodic:\n\nDG = nx.DiGraph([(1, 2), (2, 3), (3, 1), (1, 4), (4, 1)])\nnx.is_aperiodic(DG)\nTrue\nA graph consisting of two cycles: one of length 2 and the other of length 4. The lengths of the cycles share a common factor k = 2, and therefore the graph is not aperiodic:\n\nDG = nx.DiGraph([(1, 2), (2, 1), (3, 4), (4, 5), (5, 6), (6, 3)])\nnx.is_aperiodic(DG)\nFalse\nAn acyclic graph, therefore the graph is not aperiodic:\n\nDG = nx.DiGraph([(1, 2), (2, 3)])\nnx.is_aperiodic(DG)\nFalse"}

{"function_name": "networkx.algorithms.cycles.find_cycle", "properties": ["1. If a cycle is found, the output list of edges must contain at least one edge, indicating the presence of a cyclic path.", "2. The edges in the output must form a valid cycle, meaning the last node of the last edge must connect back to the first node of the first edge.", "3. For directed graphs, if the orientation is set to 'original', the output edges must respect the original direction of the edges in the graph.", "4. If the orientation is set to 'ignore', the output edges must not respect the direction of the edges, and the traversal should treat all edges as undirected.", "5. The output must include directional information (either 'forward' or 'reverse') for each edge if the orientation is specified as 'original', 'reverse', or 'ignore'."], "pbt": ["@given(st.lists(st.tuples(st.integers(), st.integers()), min_size=1, max_size=100), \n               st.sampled_from(['original', 'reverse', 'ignore', None]))\ndef test_find_cycle_non_empty_cycle_property(edges, orientation):\n    G = nx.Graph(edges)\n    try:\n        cycle = nx.find_cycle(G, orientation=orientation)\n        assert len(cycle) > 0  # There should be at least one edge if a cycle is found.\n    except NetworkXNoCycle:\n        pass  # No cycle found is valid.", "@given(st.lists(st.tuples(st.integers(), st.integers()), min_size=1, max_size=100), \n               st.sampled_from(['original', 'reverse', 'ignore', None]))\ndef test_find_cycle_valid_cycle_property(edges, orientation):\n    G = nx.Graph(edges)\n    try:\n        cycle = nx.find_cycle(G, orientation=orientation)\n        # Check if the last node of the last edge connects back to the first node of the first edge.\n        assert cycle[0][0] == cycle[-1][1]\n    except NetworkXNoCycle:\n        pass  # No cycle found is valid.", "@given(st.lists(st.tuples(st.integers(), st.integers()), min_size=1, max_size=100))\ndef test_find_cycle_original_orientation_property(edges):\n    G = nx.DiGraph(edges)\n    try:\n        cycle = nx.find_cycle(G, orientation='original')\n        for u, v, direction in cycle:\n            assert (u, v) in G.edges()  # Edges must respect the original direction.\n    except NetworkXNoCycle:\n        pass  # No cycle found is valid.", "@given(st.lists(st.tuples(st.integers(), st.integers()), min_size=1, max_size=100))\ndef test_find_cycle_ignore_orientation_property(edges):\n    G = nx.DiGraph(edges)\n    try:\n        cycle = nx.find_cycle(G, orientation='ignore')\n        for u, v, direction in cycle:\n            assert (u, v) in G.edges() or (v, u) in G.edges()  # Edges must be treated as undirected.\n    except NetworkXNoCycle:\n        pass  # No cycle found is valid.", "@given(st.lists(st.tuples(st.integers(), st.integers()), min_size=1, max_size=100), \n               st.sampled_from(['original', 'reverse', 'ignore']))\ndef test_find_cycle_directional_information_property(edges, orientation):\n    G = nx.DiGraph(edges)\n    try:\n        cycle = nx.find_cycle(G, orientation=orientation)\n        for u, v, direction in cycle:\n            assert direction in ['forward', 'reverse']  # Direction must be recorded if orientation is specified.\n    except NetworkXNoCycle:\n        pass  # No cycle found is valid."], "api_doc": "find_cycle\nfind_cycle(G, source=None, orientation=None)[source]\nReturns a cycle found via depth-first traversal.\n\nThe cycle is a list of edges indicating the cyclic path. Orientation of directed edges is controlled by orientation.\n\nParameters\n:\nG\ngraph\nA directed/undirected graph/multigraph.\n\nsource\nnode, list of nodes\nThe node from which the traversal begins. If None, then a source is chosen arbitrarily and repeatedly until all edges from each node in the graph are searched.\n\norientation\nNone | \u2018original\u2019 | \u2018reverse\u2019 | \u2018ignore\u2019 (default: None)\nFor directed graphs and directed multigraphs, edge traversals need not respect the original orientation of the edges. When set to \u2018reverse\u2019 every edge is traversed in the reverse direction. When set to \u2018ignore\u2019, every edge is treated as undirected. When set to \u2018original\u2019, every edge is treated as directed. In all three cases, the yielded edge tuples add a last entry to indicate the direction in which that edge was traversed. If orientation is None, the yielded edge has no direction indicated. The direction is respected, but not reported.\n\nReturns\n:\nedges\ndirected edges\nA list of directed edges indicating the path taken for the loop. If no cycle is found, then an exception is raised. For graphs, an edge is of the form (u, v) where u and v are the tail and head of the edge as determined by the traversal. For multigraphs, an edge is of the form (u, v, key), where key is the key of the edge. When the graph is directed, then u and v are always in the order of the actual directed edge. If orientation is not None then the edge tuple is extended to include the direction of traversal (\u2018forward\u2019 or \u2018reverse\u2019) on that edge.\n\nRaises\n:\nNetworkXNoCycle\nIf no cycle was found.\n\nSee also\n\nsimple_cycles\nExamples\n\nIn this example, we construct a DAG and find, in the first call, that there are no directed cycles, and so an exception is raised. In the second call, we ignore edge orientations and find that there is an undirected cycle. Note that the second call finds a directed cycle while effectively traversing an undirected graph, and so, we found an \u201cundirected cycle\u201d. This means that this DAG structure does not form a directed tree (which is also known as a polytree).\n\nG = nx.DiGraph([(0, 1), (0, 2), (1, 2)])\nnx.find_cycle(G, orientation=\"original\")\nTraceback (most recent call last):\n    ...\nnetworkx.exception.NetworkXNoCycle: No cycle found.\nlist(nx.find_cycle(G, orientation=\"ignore\"))\n[(0, 1, 'forward'), (1, 2, 'forward'), (0, 2, 'reverse')]"}

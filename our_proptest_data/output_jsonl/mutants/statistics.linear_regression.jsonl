{"function_name": "statistics.linear_regression", "mutants": ["```python\n# property to violate: The function should raise a StatisticsError if the input lists are of unequal lengths or if the independent variable x is constant.\nfrom hypothesis import given, strategies as st\nimport statistics\n\n@given(st.lists(st.floats(allow_nan=False, allow_infinity=False), min_size=2, max_size=100),\n       st.lists(st.floats(allow_nan=False, allow_infinity=False), min_size=2, max_size=100))\ndef test_violation_of_statistics_linear_regression_1(x, y):\n    if len(x) != len(y) or len(set(x)) <= 1:  # Invalid input cases\n        try:\n            # Always call with valid input to violate the property\n            statistics.linear_regression(x, y)\n            assert False  # If no exception, the test fails\n        except statistics.StatisticsError:\n            assert True  # If exception is raised, the test passes\n\n@given(st.lists(st.floats(allow_nan=False, allow_infinity=False), min_size=2, max_size=100),\n       st.lists(st.floats(allow_nan=False, allow_infinity=False), min_size=2, max_size=100))\ndef test_violation_of_statistics_linear_regression_2(x, y):\n    if len(x) != len(y) or len(set(x)) <= 1:  # Invalid input cases\n        try:\n            # Always call with valid input to violate the property\n            statistics.linear_regression(x, y)\n            assert False  # If no exception, the test fails\n        except statistics.StatisticsError:\n            assert True  # If exception is raised, the test passes\n\n@given(st.lists(st.floats(allow_nan=False, allow_infinity=False), min_size=2, max_size=100),\n       st.lists(st.floats(allow_nan=False, allow_infinity=False), min_size=2, max_size=100))\ndef test_violation_of_statistics_linear_regression_3(x, y):\n    if len(x) != len(y) or len(set(x)) <= 1:  # Invalid input cases\n        try:\n            # Always call with valid input to violate the property\n            statistics.linear_regression(x, y)\n            assert False  # If no exception, the test fails\n        except statistics.StatisticsError:\n            assert True  # If exception is raised, the test passes\n\n@given(st.lists(st.floats(allow_nan=False, allow_infinity=False), min_size=2, max_size=100),\n       st.lists(st.floats(allow_nan=False, allow_infinity=False), min_size=2, max_size=100))\ndef test_violation_of_statistics_linear_regression_4(x, y):\n    if len(x) != len(y) or len(set(x)) <= 1:  # Invalid input cases\n        try:\n            # Always call with valid input to violate the property\n            statistics.linear_regression(x, y)\n            assert False  # If no exception, the test fails\n        except statistics.StatisticsError:\n            assert True  # If exception is raised, the test passes\n\n@given(st.lists(st.floats(allow_nan=False, allow_infinity=False), min_size=2, max_size=100),\n       st.lists(st.floats(allow_nan=False, allow_infinity=False), min_size=2, max_size=100))\ndef test_violation_of_statistics_linear_regression_5(x, y):\n    if len(x) != len(y) or len(set(x)) <= 1:  # Invalid input cases\n        try:\n            # Always call with valid input to violate the property\n            statistics.linear_regression(x, y)\n            assert False  # If no exception, the test fails\n        except statistics.StatisticsError:\n            assert True  # If exception is raised, the test passes\n```"], "property": "The function should raise a StatisticsError if the input lists are of unequal lengths or if the independent variable x is constant.", "pbt": "@given(st.lists(st.floats(allow_nan=False, allow_infinity=False), min_size=2, max_size=100),\n       st.lists(st.floats(allow_nan=False, allow_infinity=False), min_size=2, max_size=100))\ndef test_statistics_error_on_invalid_inputs_property(x, y):\n    if len(x) != len(y) or len(set(x)) <= 1:  # Invalid input cases\n        try:\n            statistics.linear_regression(x, y)\n            assert False  # If no exception, the test fails\n        except statistics.StatisticsError:\n            assert True  # If exception is raised, the test passes", "properties": ["5. The function should raise a StatisticsError if the input lists are of unequal lengths or if the independent variable x is constant."]}

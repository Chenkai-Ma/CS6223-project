{"function_name": "statistics_variance", "mutants": ["```python\n# property to violate: The output variance should always be a non-negative number, as variance cannot be negative due to the squaring of differences from the mean.\nfrom hypothesis import given, strategies as st\nimport statistics\n\n@given(st.lists(st.floats(min_value=-1e6, max_value=1e6), min_size=2))\ndef test_violation_of_statistics_variance_1(data):\n    # Intentionally modify the data to include a constant negative offset\n    modified_data = [x - 100 for x in data]\n    result = statistics.variance(modified_data)\n    assert result >= 0\n\n@given(st.lists(st.floats(min_value=-1e6, max_value=1e6), min_size=2))\ndef test_violation_of_statistics_variance_2(data):\n    # Intentionally append a large negative number to the data\n    modified_data = data + [-1e10]\n    result = statistics.variance(modified_data)\n    assert result >= 0\n\n@given(st.lists(st.floats(min_value=-1e6, max_value=1e6), min_size=2))\ndef test_violation_of_statistics_variance_3(data):\n    # Intentionally include a very large negative value in the data\n    modified_data = data + [-1e6]\n    result = statistics.variance(modified_data)\n    assert result >= 0\n\n@given(st.lists(st.floats(min_value=-1e6, max_value=1e6), min_size=2))\ndef test_violation_of_statistics_variance_4(data):\n    # Intentionally create a data set where all values are the same but negative\n    modified_data = [-5] * len(data)\n    result = statistics.variance(modified_data)\n    assert result >= 0\n\n@given(st.lists(st.floats(min_value=-1e6, max_value=1e6), min_size=2))\ndef test_violation_of_statistics_variance_5(data):\n    # Intentionally modify the mean by adding an arbitrary negative value\n    xbar = -1000  # Arbitrary negative mean\n    result = statistics.variance(data, xbar)\n    assert result >= 0\n```"], "property": "The output variance should always be a non-negative number, as variance cannot be negative due to the squaring of differences from the mean.", "pbt": "@given(st.lists(st.floats(min_value=-1e6, max_value=1e6), min_size=2))\ndef test_variance_non_negative_property(data):\n    result = statistics.variance(data)\n    assert result >= 0", "properties": ["1. The output variance should always be a non-negative number, as variance cannot be negative due to the squaring of differences from the mean.", "2. If the input data consists of identical values, the output variance should be zero, indicating no variability in the data."]}
{"function_name": "statistics_variance", "mutants": ["```python\n# property to violate: If the input data consists of identical values, the output variance should be zero, indicating no variability in the data.\nfrom hypothesis import given, strategies as st\nimport statistics\n\n@given(st.lists(st.floats(min_value=-1e6, max_value=1e6), min_size=2))\ndef test_violation_of_statistics_variance_1(data):\n    if len(set(data)) == 1:  # All values are identical\n        data = [data[0] + 1] * len(data)  # Modify to ensure the variance is not zero\n        result = statistics.variance(data)\n        assert result == 0\n\n@given(st.lists(st.floats(min_value=-1e6, max_value=1e6), min_size=2))\ndef test_violation_of_statistics_variance_2(data):\n    if len(set(data)) == 1:  # All values are identical\n        data = [data[0] + 1, data[0] + 1]  # Ensure two identical but non-zero values\n        result = statistics.variance(data)\n        assert result == 0\n\n@given(st.lists(st.floats(min_value=-1e6, max_value=1e6), min_size=2))\ndef test_violation_of_statistics_variance_3(data):\n    if len(set(data)) == 1:  # All values are identical\n        data = [data[0]] * len(data) + [data[0] + 1]  # Add a different value to ensure variance is non-zero\n        result = statistics.variance(data)\n        assert result == 0\n\n@given(st.lists(st.floats(min_value=-1e6, max_value=1e6), min_size=2))\ndef test_violation_of_statistics_variance_4(data):\n    if len(set(data)) == 1:  # All values are identical\n        data = [data[0]] * (len(data) - 1) + [data[0] + 2]  # Change one value to ensure variance is non-zero\n        result = statistics.variance(data)\n        assert result == 0\n\n@given(st.lists(st.floats(min_value=-1e6, max_value=1e6), min_size=2))\ndef test_violation_of_statistics_variance_5(data):\n    if len(set(data)) == 1:  # All values are identical\n        data = [data[0] + 1] * len(data)  # Change all identical values to a new value\n        result = statistics.variance(data)\n        assert result == 0\n```"], "property": "If the input data consists of identical values, the output variance should be zero, indicating no variability in the data.", "pbt": "@given(st.lists(st.floats(min_value=-1e6, max_value=1e6), min_size=2))\ndef test_variance_identical_values_property(data):\n    if len(set(data)) == 1:  # All values are identical\n        result = statistics.variance(data)\n        assert result == 0", "properties": ["1. The output variance should always be a non-negative number, as variance cannot be negative due to the squaring of differences from the mean.", "2. If the input data consists of identical values, the output variance should be zero, indicating no variability in the data."]}

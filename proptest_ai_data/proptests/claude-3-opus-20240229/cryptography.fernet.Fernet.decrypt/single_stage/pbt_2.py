from hypothesis import given, strategies as st
from cryptography.fernet import Fernet, InvalidToken

# Summary: 
# Generate valid and invalid Fernet tokens to test decrypt
# Valid tokens are generated by encrypting random byte strings with a Fernet key
# Invalid tokens include random byte strings, wrong key tokens, and expired tokens
# Check that valid tokens decrypt successfully to original plaintext 
# Check that invalid tokens raise appropriate exceptions
@given(st.data())
def test_cryptography_fernet_decrypt(data):
    key = Fernet.generate_key()
    f = Fernet(key)
    
    # Generate valid token
    plaintext = data.draw(st.binary())
    token = f.encrypt(plaintext)
    assert f.decrypt(token) == plaintext
    
    # Check invalid random token
    invalid_token = data.draw(st.binary())
    try:
        f.decrypt(invalid_token)
        assert False, "Expected InvalidToken exception"
    except InvalidToken:
        assert True
    
    # Check token with wrong key
    other_key = Fernet.generate_key()
    other_fernet = Fernet(other_key)
    try:
        other_fernet.decrypt(token) 
        assert False, "Expected InvalidToken exception"
    except InvalidToken:
        assert True

    # Check expired token        
    expired_token = f.encrypt_at_time(plaintext, current_time=data.draw(st.integers(max_value=int(time.time())-1000)))
    try:
        f.decrypt(expired_token, ttl=10)
        assert False, "Expected InvalidToken exception for expired token"
    except InvalidToken:
        assert True
        
# End program
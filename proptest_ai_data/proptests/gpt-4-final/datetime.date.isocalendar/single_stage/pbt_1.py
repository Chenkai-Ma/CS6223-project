from hypothesis import given, strategies as st
from datetime import date

# Our strategy is to generate instances of date randomly
# Year: 1-9999, Month: 1-12, Day: According to the specific month
@given(y=st.integers(min_value=1, max_value=9999),
       m=st.integers(min_value=1, max_value=12),
       d=st.integers(min_value=1, max_value=31))
def test_date_isocalendar(y, m, d):
    try:
        test_date = date(y, m, d)
        iso_year, iso_week, iso_weekday = test_date.isocalendar()

        assert iso_week >= 1 and iso_week <= 53, "ISO week out of bounds"
        assert iso_weekday >= 1 and iso_weekday <= 7, "ISO weekday out of bounds"
        # assert iso_year == y or (iso_week == 1 and iso_year == y + 1), "ISO year doesn't match Gregorian year"
        assert iso_year == y or (iso_week == 1 and iso_year == y + 1) or (iso_week >= 52 and iso_year == y - 1), "ISO year doesn't match Gregorian year"
    except ValueError:
        pass  # We ignore invalid dates generated by our strategy
